--
-- PostgreSQL database dump
--

-- Dumped from database version 12.6 (Debian 12.6-1.pgdg100+1)
-- Dumped by pg_dump version 12.11

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: btree_gist; Type: EXTENSION; Schema: -; Owner: -
--

-- CREATE EXTENSION IF NOT EXISTS btree_gist WITH SCHEMA public;


--
-- Name: EXTENSION btree_gist; Type: COMMENT; Schema: -; Owner: 
--

-- COMMENT ON EXTENSION btree_gist IS 'support for indexing common datatypes in GiST';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: authorization_type; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.authorization_type AS ENUM (
    'caring',
    'nursing',
    'medication',
    'caringplus'
);


ALTER TYPE public.authorization_type OWNER TO aperi;

--
-- Name: bloodpressure_context_value; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.bloodpressure_context_value AS ENUM (
    'standing',
    'sitting',
    'lying'
);


ALTER TYPE public.bloodpressure_context_value OWNER TO aperi;

--
-- Name: bloodsample_kind; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.bloodsample_kind AS ENUM (
    'PTT',
    'Digoxine',
    'TSH',
    'T3',
    'T4',
    'CRP',
    'Hemoglobine',
    'Iron',
    'INR',
    'HbA1c',
    'eGFR'
);


ALTER TYPE public.bloodsample_kind OWNER TO aperi;

--
-- Name: call_reason_category_type; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.call_reason_category_type AS ENUM (
    'fall',
    'request',
    'social',
    'accidental',
    'other',
    'health',
    'toiletvisit'
);


ALTER TYPE public.call_reason_category_type OWNER TO aperi;

--
-- Name: call_source; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.call_source AS ENUM (
    'module',
    'publicapi',
    'timeout',
    'cas'
);


ALTER TYPE public.call_source OWNER TO aperi;

--
-- Name: callback_category; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.callback_category AS ENUM (
    'location_call'
);


ALTER TYPE public.callback_category OWNER TO aperi;

--
-- Name: callback_status; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.callback_status AS ENUM (
    'NEW',
    'SUCCESS',
    'FAILED',
    'ABORTED'
);


ALTER TYPE public.callback_status OWNER TO aperi;

--
-- Name: cas_mode; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.cas_mode AS ENUM (
    'ACTIVE',
    'INACTIVE',
    'DELETED'
);


ALTER TYPE public.cas_mode OWNER TO aperi;

--
-- Name: dementia_stage; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.dementia_stage AS ENUM (
    'unknown',
    'none',
    'early-stage',
    'mid-stage',
    'late-stage'
);


ALTER TYPE public.dementia_stage OWNER TO aperi;

--
-- Name: glycemia_context_value; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.glycemia_context_value AS ENUM (
    'sober',
    'notsober'
);


ALTER TYPE public.glycemia_context_value OWNER TO aperi;

--
-- Name: heartbeat_type; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.heartbeat_type AS ENUM (
    'device',
    'app'
);


ALTER TYPE public.heartbeat_type OWNER TO aperi;

--
-- Name: measurement_type; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.measurement_type AS ENUM (
    'pulse',
    'temperature',
    'weight',
    'urineoutput',
    'bloodpressure',
    'stoolrecord',
    'glycemia',
    'length',
    'oxygensaturation',
    'visualpainscale',
    'bloodsample',
    'morsefallscale',
    'waterlowscale'
);


ALTER TYPE public.measurement_type OWNER TO aperi;

--
-- Name: medication_phase; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.medication_phase AS ENUM (
    'prepare',
    'validate',
    'distribute',
    'administer'
);


ALTER TYPE public.medication_phase OWNER TO aperi;

--
-- Name: mis_mode; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.mis_mode AS ENUM (
    'PRESENT',
    'ABSENT'
);


ALTER TYPE public.mis_mode OWNER TO aperi;

--
-- Name: monitor_heat_status; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.monitor_heat_status AS ENUM (
    'NORMAL',
    'OVERHEAT'
);


ALTER TYPE public.monitor_heat_status OWNER TO aperi;

--
-- Name: monitor_rmq_status; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.monitor_rmq_status AS ENUM (
    'NOT_PROCESSING',
    'PROCESSING',
    'NOT_APPLICABLE'
);


ALTER TYPE public.monitor_rmq_status OWNER TO aperi;

--
-- Name: monitor_voice_status; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.monitor_voice_status AS ENUM (
    'NOT_APPLICABLE',
    'REGISTERED',
    'NOT_REGISTERED'
);


ALTER TYPE public.monitor_voice_status OWNER TO aperi;

--
-- Name: morsefallscale_ambulatoryaid_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.morsefallscale_ambulatoryaid_answer AS ENUM (
    'nurseassist',
    'crutches',
    'furniture'
);


ALTER TYPE public.morsefallscale_ambulatoryaid_answer OWNER TO aperi;

--
-- Name: morsefallscale_gait_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.morsefallscale_gait_answer AS ENUM (
    'normal',
    'weak',
    'impaired'
);


ALTER TYPE public.morsefallscale_gait_answer OWNER TO aperi;

--
-- Name: morsefallscale_mentalstatus_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.morsefallscale_mentalstatus_answer AS ENUM (
    'normal',
    'forgetslimitations'
);


ALTER TYPE public.morsefallscale_mentalstatus_answer OWNER TO aperi;

--
-- Name: pulse_context_value; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.pulse_context_value AS ENUM (
    'normal',
    'weak',
    'strong',
    'irregular'
);


ALTER TYPE public.pulse_context_value OWNER TO aperi;

--
-- Name: shortcut_type; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.shortcut_type AS ENUM (
    'IFRAME',
    'IMAGE_AUTO_REFRESH',
    'IMAGE_MANUAL_REFRESH'
);


ALTER TYPE public.shortcut_type OWNER TO aperi;

--
-- Name: stoolrecord_context_value; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.stoolrecord_context_value AS ENUM (
    'normal',
    'diarrhea',
    'slimy',
    'bloody',
    'faecaloma'
);


ALTER TYPE public.stoolrecord_context_value OWNER TO aperi;

--
-- Name: t_blood_type; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.t_blood_type AS ENUM (
    'A+',
    'A-',
    'B+',
    'B-',
    'O+',
    'O-',
    'AB+',
    'AB-'
);


ALTER TYPE public.t_blood_type OWNER TO aperi;

--
-- Name: urineoutput_context_value; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.urineoutput_context_value AS ENUM (
    'clear',
    'cloudy',
    'bloody',
    'purulent'
);


ALTER TYPE public.urineoutput_context_value OWNER TO aperi;

--
-- Name: waterlowscale_agerange_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.waterlowscale_agerange_answer AS ENUM (
    '14_to_49',
    '50_to_64',
    '65_to_74',
    '75_to_80',
    '81_plus'
);


ALTER TYPE public.waterlowscale_agerange_answer OWNER TO aperi;

--
-- Name: waterlowscale_apetite_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.waterlowscale_apetite_answer AS ENUM (
    'average',
    'bad',
    'nutrional_probe_or_liquid_only',
    'not_oral_or_anorexia'
);


ALTER TYPE public.waterlowscale_apetite_answer OWNER TO aperi;

--
-- Name: waterlowscale_build_height_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.waterlowscale_build_height_answer AS ENUM (
    'average',
    'above_average',
    'obese',
    'below_average'
);


ALTER TYPE public.waterlowscale_build_height_answer OWNER TO aperi;

--
-- Name: waterlowscale_continence_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.waterlowscale_continence_answer AS ENUM (
    'complete_catheterised',
    'incontinence_urine_only',
    'incontinence_faeces_only',
    'incontinence_urine_faeces'
);


ALTER TYPE public.waterlowscale_continence_answer OWNER TO aperi;

--
-- Name: waterlowscale_extensive_surgery_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.waterlowscale_extensive_surgery_answer AS ENUM (
    'orthopedic_spinal',
    'on_table_longer_2h',
    'on_table_longer_6h'
);


ALTER TYPE public.waterlowscale_extensive_surgery_answer OWNER TO aperi;

--
-- Name: waterlowscale_gender_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.waterlowscale_gender_answer AS ENUM (
    'male',
    'female'
);


ALTER TYPE public.waterlowscale_gender_answer OWNER TO aperi;

--
-- Name: waterlowscale_medications_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.waterlowscale_medications_answer AS ENUM (
    'cryostatic_drugs',
    'high_dose_steroids',
    'anti_inflamatory'
);


ALTER TYPE public.waterlowscale_medications_answer OWNER TO aperi;

--
-- Name: waterlowscale_mobility_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.waterlowscale_mobility_answer AS ENUM (
    'no_restrictions',
    'restless',
    'apathetic',
    'restricted',
    'bedbound',
    'chairbound'
);


ALTER TYPE public.waterlowscale_mobility_answer OWNER TO aperi;

--
-- Name: waterlowscale_neurological_disorders_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.waterlowscale_neurological_disorders_answer AS ENUM (
    'diabetes_ms_stroke',
    'motor_sensory_paraplegia'
);


ALTER TYPE public.waterlowscale_neurological_disorders_answer OWNER TO aperi;

--
-- Name: waterlowscale_skintype_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.waterlowscale_skintype_answer AS ENUM (
    'healthy',
    'tissue_paper',
    'dry',
    'oedematous',
    'clammy_sticky',
    'discoloured',
    'cracked_stained'
);


ALTER TYPE public.waterlowscale_skintype_answer OWNER TO aperi;

--
-- Name: waterlowscale_specialrisks_answer; Type: TYPE; Schema: public; Owner: aperi
--

CREATE TYPE public.waterlowscale_specialrisks_answer AS ENUM (
    'skin_nutrition_disorders',
    'multiple_organ_failure',
    'single_organ_failure',
    'peripheral_vascular_diseases',
    'anaemia',
    'smoking'
);


ALTER TYPE public.waterlowscale_specialrisks_answer OWNER TO aperi;

--
-- Name: _coalesce(anyelement, anyelement); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public._coalesce(anyelement, anyelement) RETURNS anyelement
    LANGUAGE sql IMMUTABLE PARALLEL SAFE
    AS $_$
    select coalesce($1, $2);
$_$;


ALTER FUNCTION public._coalesce(anyelement, anyelement) OWNER TO aperi;

--
-- Name: cas_api_access_door_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_access_door_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', access_door.identifier,
                  'name', access_door.name,
                  'cas_mode', access_door.cas_mode,
                  'cas_version', access_door.cas_version,
                  'device', (select jsonb_build_object('identifier', device.identifier) from device where (access_door.device_identifier) = (device.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                  'access_group', array(select jsonb_build_object('identifier', access_group.identifier) from access_group inner join access_door_access_group on (access_door_access_group.access_group_identifier) = (access_group.identifier) where (access_door.identifier) = (access_door_access_group.access_door_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE')),
                  'door_procedure', array(select jsonb_build_object('identifier', door_procedure.identifier) from door_procedure inner join access_door_door_procedure on (access_door_door_procedure.door_procedure_identifier) = (door_procedure.identifier) where (access_door.identifier) = (access_door_door_procedure.access_door_identifier) and door_procedure.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      access_door
    where     access_door.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_access_door_get() OWNER TO aperi;

--
-- Name: cas_api_access_door_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_access_door_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', access_door.identifier,
                      'name', access_door.name,
                      'cas_mode', access_door.cas_mode,
                      'cas_version', access_door.cas_version,
                      'device', (select jsonb_build_object('identifier', device.identifier) from device where (access_door.device_identifier) = (device.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                      'access_group', array(select jsonb_build_object('identifier', access_group.identifier) from access_group inner join access_door_access_group on (access_door_access_group.access_group_identifier) = (access_group.identifier) where (access_door.identifier) = (access_door_access_group.access_door_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE')),
                      'door_procedure', array(select jsonb_build_object('identifier', door_procedure.identifier) from door_procedure inner join access_door_door_procedure on (access_door_door_procedure.door_procedure_identifier) = (door_procedure.identifier) where (access_door.identifier) = (access_door_door_procedure.access_door_identifier) and door_procedure.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      access_door
        where     (access_door.identifier) = (($1->>'identifier')::integer) and
                  access_door.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'device' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', access_door.identifier,
                          'name', access_door.name,
                          'cas_mode', access_door.cas_mode,
                          'cas_version', access_door.cas_version,
                          'device', (select jsonb_build_object('identifier', device.identifier) from device where (access_door.device_identifier) = (device.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                          'access_group', array(select jsonb_build_object('identifier', access_group.identifier) from access_group inner join access_door_access_group on (access_door_access_group.access_group_identifier) = (access_group.identifier) where (access_door.identifier) = (access_door_access_group.access_door_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE')),
                          'door_procedure', array(select jsonb_build_object('identifier', door_procedure.identifier) from door_procedure inner join access_door_door_procedure on (access_door_door_procedure.door_procedure_identifier) = (door_procedure.identifier) where (access_door.identifier) = (access_door_door_procedure.access_door_identifier) and door_procedure.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      access_door
            where     exists(select from device where (device.identifier) = (($1->>'identifier')::integer) and (access_door.device_identifier) = (device.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')) and
                      access_door.cas_mode in('ACTIVE', 'INACTIVE');
        when 'access_group' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', access_door.identifier,
                          'name', access_door.name,
                          'cas_mode', access_door.cas_mode,
                          'cas_version', access_door.cas_version,
                          'device', (select jsonb_build_object('identifier', device.identifier) from device where (access_door.device_identifier) = (device.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                          'access_group', array(select jsonb_build_object('identifier', access_group.identifier) from access_group inner join access_door_access_group on (access_door_access_group.access_group_identifier) = (access_group.identifier) where (access_door.identifier) = (access_door_access_group.access_door_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE')),
                          'door_procedure', array(select jsonb_build_object('identifier', door_procedure.identifier) from door_procedure inner join access_door_door_procedure on (access_door_door_procedure.door_procedure_identifier) = (door_procedure.identifier) where (access_door.identifier) = (access_door_door_procedure.access_door_identifier) and door_procedure.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      access_door
            where     exists(select from access_group inner join access_door_access_group on (access_door_access_group.access_group_identifier) = (access_group.identifier) where (access_group.identifier) = (($1->>'identifier')::integer) and (access_door.identifier) = (access_door_access_group.access_door_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE')) and
                      access_door.cas_mode in('ACTIVE', 'INACTIVE');
        when 'door_procedure' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', access_door.identifier,
                          'name', access_door.name,
                          'cas_mode', access_door.cas_mode,
                          'cas_version', access_door.cas_version,
                          'device', (select jsonb_build_object('identifier', device.identifier) from device where (access_door.device_identifier) = (device.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                          'access_group', array(select jsonb_build_object('identifier', access_group.identifier) from access_group inner join access_door_access_group on (access_door_access_group.access_group_identifier) = (access_group.identifier) where (access_door.identifier) = (access_door_access_group.access_door_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE')),
                          'door_procedure', array(select jsonb_build_object('identifier', door_procedure.identifier) from door_procedure inner join access_door_door_procedure on (access_door_door_procedure.door_procedure_identifier) = (door_procedure.identifier) where (access_door.identifier) = (access_door_door_procedure.access_door_identifier) and door_procedure.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      access_door
            where     exists(select from door_procedure inner join access_door_door_procedure on (access_door_door_procedure.door_procedure_identifier) = (door_procedure.identifier) where (door_procedure.identifier) = (($1->>'identifier')::integer) and (access_door.identifier) = (access_door_door_procedure.access_door_identifier) and door_procedure.cas_mode in('ACTIVE', 'INACTIVE')) and
                      access_door.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_access_door_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_access_door_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_access_door_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ access_door;
    _device device;
begin
    if $1?'identifier' then
        select    access_door.*
        into      _
        from      access_door
        where     (access_door.identifier) = (($1->>'identifier')::integer) and
                  access_door.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'device' then
        _device = (select device from device where (device.identifier) = (($1->'device'->>'identifier')::integer) and device.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       access_door
        set          (name, cas_mode, device_identifier) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end,
                                   case when $1?'device' then coalesce(_device.identifier, null) else _.device_identifier end
                     )
        where        (access_door.identifier) = (_.identifier)
        returning    access_door.*
        into         _;
    elseif $2 then
        insert into    access_door(identifier, name, cas_mode, device_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_access_door_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end,
                       case when $1?'device' then coalesce(_device.identifier, null) else null end
        returning      access_door.*
        into           _;
    else
        return null;
    end if;

    if $1?'access_group' then
        with
        access_group as
        (
            select    access_group.*
            from      access_group, jsonb_array_elements($1->'access_group') as q
            where     (access_group.identifier) = ((q->>'identifier')::integer) and
                      access_group.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        access_door_access_group(access_door_identifier, access_group_identifier) as
        (
            select    _.identifier, access_group.identifier
            from      access_group
        ),
        access_door_access_group_orphan as
        (
            delete from    access_door_access_group
            where          (access_door_access_group.access_door_identifier) = (_.identifier) and
                           (access_door_access_group.access_group_identifier) not in(select (access_door_access_group.access_group_identifier) from access_door_access_group)
        )
        insert into    access_door_access_group(access_door_identifier, access_group_identifier)
        select         access_door_access_group.access_door_identifier, access_door_access_group.access_group_identifier
        from           access_door_access_group
        on conflict do nothing;
    end if;
    if $1?'door_procedure' then
        with
        door_procedure as
        (
            select    door_procedure.*
            from      door_procedure, jsonb_array_elements($1->'door_procedure') as q
            where     (door_procedure.identifier) = ((q->>'identifier')::integer) and
                      door_procedure.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        access_door_door_procedure(access_door_identifier, door_procedure_identifier) as
        (
            select    _.identifier, door_procedure.identifier
            from      door_procedure
        ),
        access_door_door_procedure_orphan as
        (
            delete from    access_door_door_procedure
            where          (access_door_door_procedure.access_door_identifier) = (_.identifier) and
                           (access_door_door_procedure.door_procedure_identifier) not in(select (access_door_door_procedure.door_procedure_identifier) from access_door_door_procedure)
        )
        insert into    access_door_door_procedure(access_door_identifier, door_procedure_identifier)
        select         access_door_door_procedure.access_door_identifier, access_door_door_procedure.door_procedure_identifier
        from           access_door_door_procedure
        on conflict do nothing;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_access_door_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_access_group_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_access_group_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', access_group.identifier,
                  'name', access_group.name,
                  'cas_mode', access_group.cas_mode,
                  'cas_version', access_group.cas_version,
                  'access_door', array(select jsonb_build_object('identifier', access_door.identifier) from access_door inner join access_door_access_group on (access_door_access_group.access_door_identifier) = (access_door.identifier) where (access_group.identifier) = (access_door_access_group.access_group_identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE')),
                  'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge inner join access_group_badge on (access_group_badge.badge_identifier) = (badge.identifier) where (access_group.identifier) = (access_group_badge.access_group_identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      access_group
    where     access_group.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_access_group_get() OWNER TO aperi;

--
-- Name: cas_api_access_group_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_access_group_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', access_group.identifier,
                      'name', access_group.name,
                      'cas_mode', access_group.cas_mode,
                      'cas_version', access_group.cas_version,
                      'access_door', array(select jsonb_build_object('identifier', access_door.identifier) from access_door inner join access_door_access_group on (access_door_access_group.access_door_identifier) = (access_door.identifier) where (access_group.identifier) = (access_door_access_group.access_group_identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE')),
                      'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge inner join access_group_badge on (access_group_badge.badge_identifier) = (badge.identifier) where (access_group.identifier) = (access_group_badge.access_group_identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      access_group
        where     (access_group.identifier) = (($1->>'identifier')::integer) and
                  access_group.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'access_door' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', access_group.identifier,
                          'name', access_group.name,
                          'cas_mode', access_group.cas_mode,
                          'cas_version', access_group.cas_version,
                          'access_door', array(select jsonb_build_object('identifier', access_door.identifier) from access_door inner join access_door_access_group on (access_door_access_group.access_door_identifier) = (access_door.identifier) where (access_group.identifier) = (access_door_access_group.access_group_identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE')),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge inner join access_group_badge on (access_group_badge.badge_identifier) = (badge.identifier) where (access_group.identifier) = (access_group_badge.access_group_identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      access_group
            where     exists(select from access_door inner join access_door_access_group on (access_door_access_group.access_door_identifier) = (access_door.identifier) where (access_door.identifier) = (($1->>'identifier')::integer) and (access_group.identifier) = (access_door_access_group.access_group_identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE')) and
                      access_group.cas_mode in('ACTIVE', 'INACTIVE');
        when 'badge' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', access_group.identifier,
                          'name', access_group.name,
                          'cas_mode', access_group.cas_mode,
                          'cas_version', access_group.cas_version,
                          'access_door', array(select jsonb_build_object('identifier', access_door.identifier) from access_door inner join access_door_access_group on (access_door_access_group.access_door_identifier) = (access_door.identifier) where (access_group.identifier) = (access_door_access_group.access_group_identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE')),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge inner join access_group_badge on (access_group_badge.badge_identifier) = (badge.identifier) where (access_group.identifier) = (access_group_badge.access_group_identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      access_group
            where     exists(select from badge inner join access_group_badge on (access_group_badge.badge_identifier) = (badge.identifier) where (badge.identifier) = (($1->>'identifier')::integer) and (access_group.identifier) = (access_group_badge.access_group_identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')) and
                      access_group.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_access_group_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_access_group_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_access_group_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ access_group;

begin
    if $1?'identifier' then
        select    access_group.*
        into      _
        from      access_group
        where     (access_group.identifier) = (($1->>'identifier')::integer) and
                  access_group.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       access_group
        set          (name, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (access_group.identifier) = (_.identifier)
        returning    access_group.*
        into         _;
    elseif $2 then
        insert into    access_group(identifier, name, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_access_group_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      access_group.*
        into           _;
    else
        return null;
    end if;

    if $1?'access_door' then
        with
        access_door as
        (
            select    access_door.*
            from      access_door, jsonb_array_elements($1->'access_door') as q
            where     (access_door.identifier) = ((q->>'identifier')::integer) and
                      access_door.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        access_door_access_group(access_group_identifier, access_door_identifier) as
        (
            select    _.identifier, access_door.identifier
            from      access_door
        ),
        access_door_access_group_orphan as
        (
            delete from    access_door_access_group
            where          (access_door_access_group.access_group_identifier) = (_.identifier) and
                           (access_door_access_group.access_door_identifier) not in(select (access_door_access_group.access_door_identifier) from access_door_access_group)
        )
        insert into    access_door_access_group(access_group_identifier, access_door_identifier)
        select         access_door_access_group.access_group_identifier, access_door_access_group.access_door_identifier
        from           access_door_access_group
        on conflict do nothing;
    end if;
    if $1?'badge' then
        with
        badge as
        (
            select    badge.*
            from      badge, jsonb_array_elements($1->'badge') as q
            where     (badge.identifier) = ((q->>'identifier')::integer) and
                      badge.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        access_group_badge(access_group_identifier, badge_identifier) as
        (
            select    _.identifier, badge.identifier
            from      badge
        ),
        access_group_badge_orphan as
        (
            delete from    access_group_badge
            where          (access_group_badge.access_group_identifier) = (_.identifier) and
                           (access_group_badge.badge_identifier) not in(select (access_group_badge.badge_identifier) from access_group_badge)
        )
        insert into    access_group_badge(access_group_identifier, badge_identifier)
        select         access_group_badge.access_group_identifier, access_group_badge.badge_identifier
        from           access_group_badge
        on conflict do nothing;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_access_group_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_activity_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_activity_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', activity.identifier,
                  'position', activity.position,
                  'cas_version', activity.cas_version,
                  'crew', (select jsonb_build_object('identifier', crew.identifier) from crew where (activity.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                  'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (activity.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                  'role', (select jsonb_build_object('identifier', role.identifier) from role where (activity.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE')),
                  'active', activity.active,
                  'active_started_at', (
                      select      lower(log_duty.period)
                      from        log_duty
                      where       activity.crew_identifier = log_duty.crew_identifier and
                                  activity.employee_identifier = log_duty.employee_identifier and
                                  activity.role_identifier = log_duty.role_identifier and
                                  upper(log_duty.period) = 'infinity'::timestamp
                      order by    lower(log_duty.period) desc
                      limit       1
                  )
              )), '[]')
    from      activity;
end
$$;


ALTER FUNCTION public.cas_api_activity_get() OWNER TO aperi;

--
-- Name: cas_api_activity_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_activity_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', activity.identifier,
                      'position', activity.position,
                      'cas_version', activity.cas_version,
                      'crew', (select jsonb_build_object('identifier', crew.identifier) from crew where (activity.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                      'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (activity.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                      'role', (select jsonb_build_object('identifier', role.identifier) from role where (activity.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE')),
                      'active', activity.active,
                      'active_started_at', (
                          select      lower(log_duty.period)
                          from        log_duty
                          where       activity.crew_identifier = log_duty.crew_identifier and
                                      activity.employee_identifier = log_duty.employee_identifier and
                                      activity.role_identifier = log_duty.role_identifier and
                                      upper(log_duty.period) = 'infinity'::timestamp
                          order by    lower(log_duty.period) desc
                          limit       1
                      )
                  )
        from      activity
        where     (activity.identifier) = (($1->>'identifier')::integer);
    end if;

    case $2
        when 'crew' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', activity.identifier,
                          'position', activity.position,
                          'cas_version', activity.cas_version,
                          'crew', (select jsonb_build_object('identifier', crew.identifier) from crew where (activity.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (activity.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'role', (select jsonb_build_object('identifier', role.identifier) from role where (activity.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE')),
                          'active', activity.active,
                          'active_started_at', (
                              select      lower(log_duty.period)
                              from        log_duty
                              where       activity.crew_identifier = log_duty.crew_identifier and
                                          activity.employee_identifier = log_duty.employee_identifier and
                                          activity.role_identifier = log_duty.role_identifier and
                                          upper(log_duty.period) = 'infinity'::timestamp
                              order by    lower(log_duty.period) desc
                              limit       1
                          )
                      )), '[]')
            from      activity
            where     exists(select from crew where (crew.identifier) = (($1->>'identifier')::integer) and (activity.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE'));
        when 'employee' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', activity.identifier,
                          'position', activity.position,
                          'cas_version', activity.cas_version,
                          'crew', (select jsonb_build_object('identifier', crew.identifier) from crew where (activity.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (activity.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'role', (select jsonb_build_object('identifier', role.identifier) from role where (activity.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE')),
                          'active', activity.active,
                          'active_started_at', (
                              select      lower(log_duty.period)
                              from        log_duty
                              where       activity.crew_identifier = log_duty.crew_identifier and
                                          activity.employee_identifier = log_duty.employee_identifier and
                                          activity.role_identifier = log_duty.role_identifier and
                                          upper(log_duty.period) = 'infinity'::timestamp
                              order by    lower(log_duty.period) desc
                              limit       1
                          )
                      )), '[]')
            from      activity
            where     exists(select from employee where (employee.identifier) = (($1->>'identifier')::integer) and (activity.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE'));
        when 'role' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', activity.identifier,
                          'position', activity.position,
                          'cas_version', activity.cas_version,
                          'crew', (select jsonb_build_object('identifier', crew.identifier) from crew where (activity.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (activity.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'role', (select jsonb_build_object('identifier', role.identifier) from role where (activity.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE')),
                          'active', activity.active,
                          'active_started_at', (
                              select      lower(log_duty.period)
                              from        log_duty
                              where       activity.crew_identifier = log_duty.crew_identifier and
                                          activity.employee_identifier = log_duty.employee_identifier and
                                          activity.role_identifier = log_duty.role_identifier and
                                          upper(log_duty.period) = 'infinity'::timestamp
                              order by    lower(log_duty.period) desc
                              limit       1
                          )
                      )), '[]')
            from      activity
            where     exists(select from role where (role.identifier) = (($1->>'identifier')::integer) and (activity.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'));
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_activity_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_activity_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_activity_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ activity;
    _crew crew;
    _employee employee;
    _role role;
begin
    if $1?'identifier' then
        select    activity.*
        into      _
        from      activity
        where     (activity.identifier) = (($1->>'identifier')::integer);
    end if;
    if $1?'crew' then
        _crew = (select crew from crew where (crew.identifier) = (($1->'crew'->>'identifier')::integer) and crew.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'employee' then
        _employee = (select employee from employee where (employee.identifier) = (($1->'employee'->>'identifier')::integer) and employee.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'role' then
        _role = (select role from role where (role.identifier) = (($1->'role'->>'identifier')::integer) and role.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       activity
        set          (position, crew_identifier, employee_identifier, role_identifier) =
                     (
                         select    case when $1?'position' then ($1->>'position')::integer else _.position::integer end,
                                   case when $1?'crew' then coalesce(_crew.identifier, null) else _.crew_identifier end,
                                   case when $1?'employee' then coalesce(_employee.identifier, null) else _.employee_identifier end,
                                   case when $1?'role' then coalesce(_role.identifier, null) else _.role_identifier end
                     )
        where        (activity.identifier) = (_.identifier)
        returning    activity.*
        into         _;
    elseif $2 then
        insert into    activity(identifier, position, crew_identifier, employee_identifier, role_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_activity_identifier'::regclass)::integer end,
                       case when $1?'position' then ($1->>'position')::integer else 0::integer end,
                       case when $1?'crew' then coalesce(_crew.identifier, null) else null end,
                       case when $1?'employee' then coalesce(_employee.identifier, null) else null end,
                       case when $1?'role' then coalesce(_role.identifier, null) else null end
        returning      activity.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_activity_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_badge_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_badge_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', badge.identifier,
                  'serial', badge.serial,
                  'timestamp', badge.timestamp,
                  'priority', badge.priority,
                  'cas_mode', badge.cas_mode,
                  'cas_version', badge.cas_version,
                  'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (badge.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                  'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (badge.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                  'access_group', array(select jsonb_build_object('identifier', access_group.identifier) from access_group inner join access_group_badge on (access_group_badge.access_group_identifier) = (access_group.identifier) where (badge.identifier) = (access_group_badge.badge_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      badge
    where     badge.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_badge_get() OWNER TO aperi;

--
-- Name: cas_api_badge_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_badge_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        if $1?'identifier' then
            return    jsonb_build_object(
                          'identifier', badge.identifier,
                          'serial', badge.serial,
                          'timestamp', badge.timestamp,
                          'priority', badge.priority,
                          'cas_mode', badge.cas_mode,
                          'cas_version', badge.cas_version,
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (badge.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (badge.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'access_group', array(select jsonb_build_object('identifier', access_group.identifier) from access_group inner join access_group_badge on (access_group_badge.access_group_identifier) = (access_group.identifier) where (badge.identifier) = (access_group_badge.badge_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      badge
            where     (badge.identifier) = (($1->>'identifier')::integer) and
                      badge.cas_mode in('ACTIVE', 'INACTIVE');
        elseif $1?'serial' then
            return    jsonb_build_object(
                          'identifier', badge.identifier,
                          'serial', badge.serial,
                          'timestamp', badge.timestamp,
                          'priority', badge.priority,
                          'cas_mode', badge.cas_mode,
                          'cas_version', badge.cas_version,
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (badge.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (badge.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'access_group', array(select jsonb_build_object('identifier', access_group.identifier) from access_group inner join access_group_badge on (access_group_badge.access_group_identifier) = (access_group.identifier) where (badge.identifier) = (access_group_badge.badge_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      badge
            where     badge.serial = $1->>'serial' and
                      badge.cas_mode in('ACTIVE', 'INACTIVE');
        else
            return null;
        end if;
    end if;

    case $2
        when 'employee' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', badge.identifier,
                          'serial', badge.serial,
                          'timestamp', badge.timestamp,
                          'priority', badge.priority,
                          'cas_mode', badge.cas_mode,
                          'cas_version', badge.cas_version,
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (badge.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (badge.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'access_group', array(select jsonb_build_object('identifier', access_group.identifier) from access_group inner join access_group_badge on (access_group_badge.access_group_identifier) = (access_group.identifier) where (badge.identifier) = (access_group_badge.badge_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      badge
            where     exists(select from employee where (employee.identifier) = (($1->>'identifier')::integer) and (badge.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')) and
                      badge.cas_mode in('ACTIVE', 'INACTIVE');
        when 'patient' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', badge.identifier,
                          'serial', badge.serial,
                          'timestamp', badge.timestamp,
                          'priority', badge.priority,
                          'cas_mode', badge.cas_mode,
                          'cas_version', badge.cas_version,
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (badge.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (badge.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'access_group', array(select jsonb_build_object('identifier', access_group.identifier) from access_group inner join access_group_badge on (access_group_badge.access_group_identifier) = (access_group.identifier) where (badge.identifier) = (access_group_badge.badge_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      badge
            where     exists(select from patient where (patient.identifier) = (($1->>'identifier')::integer) and (badge.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')) and
                      badge.cas_mode in('ACTIVE', 'INACTIVE');
        when 'access_group' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', badge.identifier,
                          'serial', badge.serial,
                          'timestamp', badge.timestamp,
                          'priority', badge.priority,
                          'cas_mode', badge.cas_mode,
                          'cas_version', badge.cas_version,
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (badge.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (badge.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'access_group', array(select jsonb_build_object('identifier', access_group.identifier) from access_group inner join access_group_badge on (access_group_badge.access_group_identifier) = (access_group.identifier) where (badge.identifier) = (access_group_badge.badge_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      badge
            where     exists(select from access_group inner join access_group_badge on (access_group_badge.access_group_identifier) = (access_group.identifier) where (access_group.identifier) = (($1->>'identifier')::integer) and (badge.identifier) = (access_group_badge.badge_identifier) and access_group.cas_mode in('ACTIVE', 'INACTIVE')) and
                      badge.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_badge_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_badge_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_badge_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ badge;
    _employee employee;
    _patient patient;
begin
    if $1?'identifier' then
        select    badge.*
        into      _
        from      badge
        where     (badge.identifier) = (($1->>'identifier')::integer) and
                  badge.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'employee' then
        _employee = (select employee from employee where (employee.identifier) = (($1->'employee'->>'identifier')::integer) and employee.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'patient' then
        _patient = (select patient from patient where (patient.identifier) = (($1->'patient'->>'identifier')::integer) and patient.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       badge
        set          (serial, timestamp, priority, cas_mode, employee_identifier, patient_identifier) =
                     (
                         select    case when $1?'serial' then ($1->>'serial')::text else _.serial::text end,
                                   case when $1?'timestamp' then ($1->>'timestamp')::timestamp with time zone else _.timestamp::timestamp with time zone end,
                                   case when $1?'priority' then ($1->>'priority')::boolean else _.priority::boolean end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end,
                                   case when $1?'employee' then coalesce(_employee.identifier, null) else _.employee_identifier end,
                                   case when $1?'patient' then coalesce(_patient.identifier, null) else _.patient_identifier end
                     )
        where        (badge.identifier) = (_.identifier)
        returning    badge.*
        into         _;
    elseif $2 then
        insert into    badge(identifier, serial, timestamp, priority, cas_mode, employee_identifier, patient_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_badge_identifier'::regclass)::integer end,
                       case when $1?'serial' then ($1->>'serial')::text else null::text end,
                       case when $1?'timestamp' then ($1->>'timestamp')::timestamp with time zone else '9999-12-31 01:00:00+01'::timestamp with time zone::timestamp with time zone end,
                       case when $1?'priority' then ($1->>'priority')::boolean else false::boolean end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end,
                       case when $1?'employee' then coalesce(_employee.identifier, null) else null end,
                       case when $1?'patient' then coalesce(_patient.identifier, null) else null end
        returning      badge.*
        into           _;
    else
        return null;
    end if;

    if $1?'access_group' then
        with
        access_group as
        (
            select    access_group.*
            from      access_group, jsonb_array_elements($1->'access_group') as q
            where     (access_group.identifier) = ((q->>'identifier')::integer) and
                      access_group.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        access_group_badge(badge_identifier, access_group_identifier) as
        (
            select    _.identifier, access_group.identifier
            from      access_group
        ),
        access_group_badge_orphan as
        (
            delete from    access_group_badge
            where          (access_group_badge.badge_identifier) = (_.identifier) and
                           (access_group_badge.access_group_identifier) not in(select (access_group_badge.access_group_identifier) from access_group_badge)
        )
        insert into    access_group_badge(badge_identifier, access_group_identifier)
        select         access_group_badge.badge_identifier, access_group_badge.access_group_identifier
        from           access_group_badge
        on conflict do nothing;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_badge_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_call_reason_category_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_call_reason_category_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', call_reason_category.identifier,
                  'prefix', call_reason_category.prefix,
                  'name', call_reason_category.name,
                  'cas_mode', call_reason_category.cas_mode,
                  'cas_version', call_reason_category.cas_version
              )), '[]')
    from      call_reason_category
    where     call_reason_category.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_call_reason_category_get() OWNER TO aperi;

--
-- Name: cas_api_call_reason_category_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_call_reason_category_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', call_reason_category.identifier,
                      'prefix', call_reason_category.prefix,
                      'name', call_reason_category.name,
                      'cas_mode', call_reason_category.cas_mode,
                      'cas_version', call_reason_category.cas_version
                  )
        from      call_reason_category
        where     (call_reason_category.identifier) = (($1->>'identifier')::integer) and
                  call_reason_category.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
end
$_$;


ALTER FUNCTION public.cas_api_call_reason_category_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_call_reason_category_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_call_reason_category_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ call_reason_category;

begin
    if $1?'identifier' then
        select    call_reason_category.*
        into      _
        from      call_reason_category
        where     (call_reason_category.identifier) = (($1->>'identifier')::integer) and
                  call_reason_category.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       call_reason_category
        set          (prefix, name, cas_mode) =
                     (
                         select    case when $1?'prefix' then ($1->>'prefix')::text else _.prefix::text end,
                                   case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (call_reason_category.identifier) = (_.identifier)
        returning    call_reason_category.*
        into         _;
    elseif $2 then
        insert into    call_reason_category(identifier, prefix, name, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_call_reason_category_identifier'::regclass)::integer end,
                       case when $1?'prefix' then ($1->>'prefix')::text else null::text end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      call_reason_category.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_call_reason_category_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_camera_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_camera_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', camera.identifier,
                  'location', camera.location,
                  'cas_mode', camera.cas_mode,
                  'cas_version', camera.cas_version
              )), '[]')
    from      camera
    where     camera.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_camera_get() OWNER TO aperi;

--
-- Name: cas_api_camera_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_camera_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', camera.identifier,
                      'location', camera.location,
                      'cas_mode', camera.cas_mode,
                      'cas_version', camera.cas_version
                  )
        from      camera
        where     (camera.identifier) = (($1->>'identifier')::integer) and
                  camera.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
end
$_$;


ALTER FUNCTION public.cas_api_camera_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_camera_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_camera_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ camera;

begin
    if $1?'identifier' then
        select    camera.*
        into      _
        from      camera
        where     (camera.identifier) = (($1->>'identifier')::integer) and
                  camera.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       camera
        set          (location, cas_mode) =
                     (
                         select    case when $1?'location' then ($1->>'location')::text else _.location::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (camera.identifier) = (_.identifier)
        returning    camera.*
        into         _;
    elseif $2 then
        insert into    camera(identifier, location, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_camera_identifier'::regclass)::integer end,
                       case when $1?'location' then ($1->>'location')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      camera.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_camera_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_cas_report_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_cas_report_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'key', cas_report.key,
                  'meta', cas_report.meta,
                  'visible', cas_report.visible
              )), '[]')
    from      cas_report;
end
$$;


ALTER FUNCTION public.cas_api_cas_report_get() OWNER TO aperi;

--
-- Name: cas_api_cas_report_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_cas_report_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'key', cas_report.key,
                      'meta', cas_report.meta,
                      'visible', cas_report.visible
                  )
        from      cas_report
        where     (cas_report.key) = (($1->>'key')::text);
    end if;
end
$_$;


ALTER FUNCTION public.cas_api_cas_report_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_cas_report_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_cas_report_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ cas_report;

begin
    if $1?'key' then
        select    cas_report.*
        into      _
        from      cas_report
        where     (cas_report.key) = (($1->>'key')::text);
    end if;


    if _.key is not null then
        update       cas_report
        set          (meta, visible) =
                     (
                         select    case when $1?'meta' then ($1->>'meta')::json else _.meta::json end,
                                   case when $1?'visible' then ($1->>'visible')::boolean else _.visible::boolean end
                     )
        where        (cas_report.key) = (_.key)
        returning    cas_report.*
        into         _;
    elseif $2 then
        insert into    cas_report(key, meta, visible)
        select         case when $1?'key' then ($1->>'key')::text else null::text end,
                       case when $1?'meta' then ($1->>'meta')::json else null::json end,
                       case when $1?'visible' then ($1->>'visible')::boolean else true::boolean end
        returning      cas_report.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('key', _.key);
end
$_$;


ALTER FUNCTION public.cas_api_cas_report_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_crew_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_crew_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', crew.identifier,
                  'name', crew.name,
                  'cas_mode', crew.cas_mode,
                  'cas_version', crew.cas_version,
                  'activity', cas_api_activity_get(jsonb_build_object('identifier', crew.identifier), 'crew'),
                  'email', cas_api_email_get(jsonb_build_object('identifier', crew.identifier), 'crew'),
                  'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join crew_location on (crew_location.location_identifier) = (location.identifier) where (crew.identifier) = (crew_location.crew_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      crew
    where     crew.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_crew_get() OWNER TO aperi;

--
-- Name: cas_api_crew_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_crew_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', crew.identifier,
                      'name', crew.name,
                      'cas_mode', crew.cas_mode,
                      'cas_version', crew.cas_version,
                      'activity', cas_api_activity_get(jsonb_build_object('identifier', crew.identifier), 'crew'),
                      'email', cas_api_email_get(jsonb_build_object('identifier', crew.identifier), 'crew'),
                      'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join crew_location on (crew_location.location_identifier) = (location.identifier) where (crew.identifier) = (crew_location.crew_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      crew
        where     (crew.identifier) = (($1->>'identifier')::integer) and
                  crew.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'activity' then
            return    jsonb_build_object(
                          'identifier', crew.identifier,
                          'name', crew.name,
                          'cas_mode', crew.cas_mode,
                          'cas_version', crew.cas_version,
                          'activity', cas_api_activity_get(jsonb_build_object('identifier', crew.identifier), 'crew'),
                          'email', cas_api_email_get(jsonb_build_object('identifier', crew.identifier), 'crew'),
                          'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join crew_location on (crew_location.location_identifier) = (location.identifier) where (crew.identifier) = (crew_location.crew_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      crew
            where     exists(select from activity where (activity.identifier) = (($1->>'identifier')::integer) and (activity.crew_identifier) = (crew.identifier)) and
                      crew.cas_mode in('ACTIVE', 'INACTIVE');
        when 'email' then
            return    jsonb_build_object(
                          'identifier', crew.identifier,
                          'name', crew.name,
                          'cas_mode', crew.cas_mode,
                          'cas_version', crew.cas_version,
                          'activity', cas_api_activity_get(jsonb_build_object('identifier', crew.identifier), 'crew'),
                          'email', cas_api_email_get(jsonb_build_object('identifier', crew.identifier), 'crew'),
                          'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join crew_location on (crew_location.location_identifier) = (location.identifier) where (crew.identifier) = (crew_location.crew_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      crew
            where     exists(select from email where (email.identifier) = (($1->>'identifier')::integer) and (email.crew_identifier) = (crew.identifier)) and
                      crew.cas_mode in('ACTIVE', 'INACTIVE');
        when 'location' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', crew.identifier,
                          'name', crew.name,
                          'cas_mode', crew.cas_mode,
                          'cas_version', crew.cas_version,
                          'activity', cas_api_activity_get(jsonb_build_object('identifier', crew.identifier), 'crew'),
                          'email', cas_api_email_get(jsonb_build_object('identifier', crew.identifier), 'crew'),
                          'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join crew_location on (crew_location.location_identifier) = (location.identifier) where (crew.identifier) = (crew_location.crew_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      crew
            where     exists(select from location inner join crew_location on (crew_location.location_identifier) = (location.identifier) where (location.identifier) = (($1->>'identifier')::integer) and (crew.identifier) = (crew_location.crew_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')) and
                      crew.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_crew_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_crew_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_crew_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ crew;

begin
    if $1?'identifier' then
        select    crew.*
        into      _
        from      crew
        where     (crew.identifier) = (($1->>'identifier')::integer) and
                  crew.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       crew
        set          (name, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (crew.identifier) = (_.identifier)
        returning    crew.*
        into         _;
    elseif $2 then
        insert into    crew(identifier, name, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_crew_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      crew.*
        into           _;
    else
        return null;
    end if;

    if $1?'activity' then
        with
        activity as
        (
            update       activity
            set          (crew_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'activity') as q
            where        (activity.identifier) = ((q->>'identifier')::integer)
            returning    activity.identifier
        )
        update    activity
        set       (crew_identifier) = row(null)
        where     (activity.crew_identifier) = (_.identifier) and
                  (activity.identifier) not in(select (activity.identifier) from activity);
    end if;
    if $1?'email' then -- !!! CUSTOM !!!
        with
        email_input(address) as
        (
            select    email->>'address'
            from      jsonb_array_elements($1->'email') as email
        ),
        email_insert as
        (
            insert into    email(crew_identifier, address)
            select         _.identifier, email_input.address
            from           email_input
            on conflict    (crew_identifier, address)
            do nothing
        )
        delete from    email
        where          email.crew_identifier = _.identifier and
                       email.address not in(select email_input.address from email_input);
    end if;
    if $1?'location' then
        with
        location as
        (
            select    location.*
            from      location, jsonb_array_elements($1->'location') as q
            where     (location.identifier) = ((q->>'identifier')::integer) and
                      location.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        crew_location(crew_identifier, location_identifier) as
        (
            select    _.identifier, location.identifier
            from      location
        ),
        crew_location_orphan as
        (
            delete from    crew_location
            where          (crew_location.crew_identifier) = (_.identifier) and
                           (crew_location.location_identifier) not in(select (crew_location.location_identifier) from crew_location)
        )
        insert into    crew_location(crew_identifier, location_identifier)
        select         crew_location.crew_identifier, crew_location.location_identifier
        from           crew_location
        on conflict do nothing;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_crew_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_dect_account_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_dect_account_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', dect_account.identifier,
                  'name', dect_account.name,
                  'number', dect_account.number,
                  'cas_mode', dect_account.cas_mode,
                  'cas_version', dect_account.cas_version,
                  'employee', array(select jsonb_build_object('identifier', employee.identifier) from employee where (employee.dect_account_identifier) = (dect_account.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                  'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_dect_account on (dect_group_dect_account.dect_group_identifier) = (dect_group.identifier) where (dect_account.identifier) = (dect_group_dect_account.dect_account_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      dect_account
    where     dect_account.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_dect_account_get() OWNER TO aperi;

--
-- Name: cas_api_dect_account_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_dect_account_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', dect_account.identifier,
                      'name', dect_account.name,
                      'number', dect_account.number,
                      'cas_mode', dect_account.cas_mode,
                      'cas_version', dect_account.cas_version,
                      'employee', array(select jsonb_build_object('identifier', employee.identifier) from employee where (employee.dect_account_identifier) = (dect_account.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                      'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_dect_account on (dect_group_dect_account.dect_group_identifier) = (dect_group.identifier) where (dect_account.identifier) = (dect_group_dect_account.dect_account_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      dect_account
        where     (dect_account.identifier) = (($1->>'identifier')::integer) and
                  dect_account.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'employee' then
            return    jsonb_build_object(
                          'identifier', dect_account.identifier,
                          'name', dect_account.name,
                          'number', dect_account.number,
                          'cas_mode', dect_account.cas_mode,
                          'cas_version', dect_account.cas_version,
                          'employee', array(select jsonb_build_object('identifier', employee.identifier) from employee where (employee.dect_account_identifier) = (dect_account.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_dect_account on (dect_group_dect_account.dect_group_identifier) = (dect_group.identifier) where (dect_account.identifier) = (dect_group_dect_account.dect_account_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      dect_account
            where     exists(select from employee where (employee.identifier) = (($1->>'identifier')::integer) and (employee.dect_account_identifier) = (dect_account.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')) and
                      dect_account.cas_mode in('ACTIVE', 'INACTIVE');
        when 'dect_group' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', dect_account.identifier,
                          'name', dect_account.name,
                          'number', dect_account.number,
                          'cas_mode', dect_account.cas_mode,
                          'cas_version', dect_account.cas_version,
                          'employee', array(select jsonb_build_object('identifier', employee.identifier) from employee where (employee.dect_account_identifier) = (dect_account.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_dect_account on (dect_group_dect_account.dect_group_identifier) = (dect_group.identifier) where (dect_account.identifier) = (dect_group_dect_account.dect_account_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      dect_account
            where     exists(select from dect_group inner join dect_group_dect_account on (dect_group_dect_account.dect_group_identifier) = (dect_group.identifier) where (dect_group.identifier) = (($1->>'identifier')::integer) and (dect_account.identifier) = (dect_group_dect_account.dect_account_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE')) and
                      dect_account.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_dect_account_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_dect_account_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_dect_account_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ dect_account;

begin
    if $1?'identifier' then
        select    dect_account.*
        into      _
        from      dect_account
        where     (dect_account.identifier) = (($1->>'identifier')::integer) and
                  dect_account.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       dect_account
        set          (name, number, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'number' then ($1->>'number')::integer else _.number::integer end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (dect_account.identifier) = (_.identifier)
        returning    dect_account.*
        into         _;
    elseif $2 then
        insert into    dect_account(identifier, name, number, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_dect_account_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'number' then ($1->>'number')::integer else null::integer end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      dect_account.*
        into           _;
    else
        return null;
    end if;

    if $1?'employee' then
        with
        employee as
        (
            update       employee
            set          (dect_account_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'employee') as q
            where        (employee.identifier) = ((q->>'identifier')::integer) and
                         employee.cas_mode in('ACTIVE', 'INACTIVE')
            returning    employee.identifier
        )
        update    employee
        set       (dect_account_identifier) = row(null)
        where     (employee.dect_account_identifier) = (_.identifier) and
                  (employee.identifier) not in(select (employee.identifier) from employee) and
                  employee.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'dect_group' then
        with
        dect_group as
        (
            select    dect_group.*
            from      dect_group, jsonb_array_elements($1->'dect_group') as q
            where     (dect_group.identifier) = ((q->>'identifier')::integer) and
                      dect_group.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        dect_group_dect_account(dect_account_identifier, dect_group_identifier) as
        (
            select    _.identifier, dect_group.identifier
            from      dect_group
        ),
        dect_group_dect_account_orphan as
        (
            delete from    dect_group_dect_account
            where          (dect_group_dect_account.dect_account_identifier) = (_.identifier) and
                           (dect_group_dect_account.dect_group_identifier) not in(select (dect_group_dect_account.dect_group_identifier) from dect_group_dect_account)
        )
        insert into    dect_group_dect_account(dect_account_identifier, dect_group_identifier)
        select         dect_group_dect_account.dect_account_identifier, dect_group_dect_account.dect_group_identifier
        from           dect_group_dect_account
        on conflict do nothing;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_dect_account_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_dect_group_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_dect_group_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', dect_group.identifier,
                  'name', dect_group.name,
                  'cas_mode', dect_group.cas_mode,
                  'cas_version', dect_group.cas_version,
                  'dect_account', array(select jsonb_build_object('identifier', dect_account.identifier) from dect_account inner join dect_group_dect_account on (dect_group_dect_account.dect_account_identifier) = (dect_account.identifier) where (dect_group.identifier) = (dect_group_dect_account.dect_group_identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')),
                  'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join dect_group_location on (dect_group_location.location_identifier) = (location.identifier) where (dect_group.identifier) = (dect_group_location.dect_group_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      dect_group
    where     dect_group.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_dect_group_get() OWNER TO aperi;

--
-- Name: cas_api_dect_group_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_dect_group_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', dect_group.identifier,
                      'name', dect_group.name,
                      'cas_mode', dect_group.cas_mode,
                      'cas_version', dect_group.cas_version,
                      'dect_account', array(select jsonb_build_object('identifier', dect_account.identifier) from dect_account inner join dect_group_dect_account on (dect_group_dect_account.dect_account_identifier) = (dect_account.identifier) where (dect_group.identifier) = (dect_group_dect_account.dect_group_identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')),
                      'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join dect_group_location on (dect_group_location.location_identifier) = (location.identifier) where (dect_group.identifier) = (dect_group_location.dect_group_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      dect_group
        where     (dect_group.identifier) = (($1->>'identifier')::integer) and
                  dect_group.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'dect_account' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', dect_group.identifier,
                          'name', dect_group.name,
                          'cas_mode', dect_group.cas_mode,
                          'cas_version', dect_group.cas_version,
                          'dect_account', array(select jsonb_build_object('identifier', dect_account.identifier) from dect_account inner join dect_group_dect_account on (dect_group_dect_account.dect_account_identifier) = (dect_account.identifier) where (dect_group.identifier) = (dect_group_dect_account.dect_group_identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join dect_group_location on (dect_group_location.location_identifier) = (location.identifier) where (dect_group.identifier) = (dect_group_location.dect_group_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      dect_group
            where     exists(select from dect_account inner join dect_group_dect_account on (dect_group_dect_account.dect_account_identifier) = (dect_account.identifier) where (dect_account.identifier) = (($1->>'identifier')::integer) and (dect_group.identifier) = (dect_group_dect_account.dect_group_identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')) and
                      dect_group.cas_mode in('ACTIVE', 'INACTIVE');
        when 'location' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', dect_group.identifier,
                          'name', dect_group.name,
                          'cas_mode', dect_group.cas_mode,
                          'cas_version', dect_group.cas_version,
                          'dect_account', array(select jsonb_build_object('identifier', dect_account.identifier) from dect_account inner join dect_group_dect_account on (dect_group_dect_account.dect_account_identifier) = (dect_account.identifier) where (dect_group.identifier) = (dect_group_dect_account.dect_group_identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join dect_group_location on (dect_group_location.location_identifier) = (location.identifier) where (dect_group.identifier) = (dect_group_location.dect_group_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      dect_group
            where     exists(select from location inner join dect_group_location on (dect_group_location.location_identifier) = (location.identifier) where (location.identifier) = (($1->>'identifier')::integer) and (dect_group.identifier) = (dect_group_location.dect_group_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')) and
                      dect_group.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_dect_group_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_dect_group_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_dect_group_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ dect_group;

begin
    if $1?'identifier' then
        select    dect_group.*
        into      _
        from      dect_group
        where     (dect_group.identifier) = (($1->>'identifier')::integer) and
                  dect_group.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       dect_group
        set          (name, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (dect_group.identifier) = (_.identifier)
        returning    dect_group.*
        into         _;
    elseif $2 then
        insert into    dect_group(identifier, name, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_dect_group_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      dect_group.*
        into           _;
    else
        return null;
    end if;

    if $1?'dect_account' then
        with
        dect_account as
        (
            select    dect_account.*
            from      dect_account, jsonb_array_elements($1->'dect_account') as q
            where     (dect_account.identifier) = ((q->>'identifier')::integer) and
                      dect_account.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        dect_group_dect_account(dect_group_identifier, dect_account_identifier) as
        (
            select    _.identifier, dect_account.identifier
            from      dect_account
        ),
        dect_group_dect_account_orphan as
        (
            delete from    dect_group_dect_account
            where          (dect_group_dect_account.dect_group_identifier) = (_.identifier) and
                           (dect_group_dect_account.dect_account_identifier) not in(select (dect_group_dect_account.dect_account_identifier) from dect_group_dect_account)
        )
        insert into    dect_group_dect_account(dect_group_identifier, dect_account_identifier)
        select         dect_group_dect_account.dect_group_identifier, dect_group_dect_account.dect_account_identifier
        from           dect_group_dect_account
        on conflict do nothing;
    end if;
    if $1?'location' then
        with
        location as
        (
            select    location.*
            from      location, jsonb_array_elements($1->'location') as q
            where     (location.identifier) = ((q->>'identifier')::integer) and
                      location.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        dect_group_location(dect_group_identifier, location_identifier) as
        (
            select    _.identifier, location.identifier
            from      location
        ),
        dect_group_location_orphan as
        (
            delete from    dect_group_location
            where          (dect_group_location.dect_group_identifier) = (_.identifier) and
                           (dect_group_location.location_identifier) not in(select (dect_group_location.location_identifier) from dect_group_location)
        )
        insert into    dect_group_location(dect_group_identifier, location_identifier)
        select         dect_group_location.dect_group_identifier, dect_group_location.location_identifier
        from           dect_group_location
        on conflict do nothing;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_dect_group_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_department_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_department_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', department.identifier,
                  'name', department.name,
                  'code', department.code,
                  'cas_mode', department.cas_mode,
                  'cas_version', department.cas_version,
                  'site', (select jsonb_build_object('identifier', site.identifier) from site where (department.site_identifier) = (site.identifier)),
                  'location', array(select jsonb_build_object('identifier', location.identifier) from location where (location.department_identifier) = (department.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                  'mis_connection_department', cas_api_mis_connection_department_get(jsonb_build_object('identifier', department.identifier), 'department')
              )), '[]')
    from      department
    where     department.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_department_get() OWNER TO aperi;

--
-- Name: cas_api_department_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_department_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', department.identifier,
                      'name', department.name,
                      'code', department.code,
                      'cas_mode', department.cas_mode,
                      'cas_version', department.cas_version,
                      'site', (select jsonb_build_object('identifier', site.identifier) from site where (department.site_identifier) = (site.identifier)),
                      'location', array(select jsonb_build_object('identifier', location.identifier) from location where (location.department_identifier) = (department.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                      'mis_connection_department', cas_api_mis_connection_department_get(jsonb_build_object('identifier', department.identifier), 'department')
                  )
        from      department
        where     (department.identifier) = (($1->>'identifier')::integer) and
                  department.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'site' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', department.identifier,
                          'name', department.name,
                          'code', department.code,
                          'cas_mode', department.cas_mode,
                          'cas_version', department.cas_version,
                          'site', (select jsonb_build_object('identifier', site.identifier) from site where (department.site_identifier) = (site.identifier)),
                          'location', array(select jsonb_build_object('identifier', location.identifier) from location where (location.department_identifier) = (department.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'mis_connection_department', cas_api_mis_connection_department_get(jsonb_build_object('identifier', department.identifier), 'department')
                      )), '[]')
            from      department
            where     exists(select from site where (site.identifier) = (($1->>'identifier')::integer) and (department.site_identifier) = (site.identifier)) and
                      department.cas_mode in('ACTIVE', 'INACTIVE');
        when 'location' then
            return    jsonb_build_object(
                          'identifier', department.identifier,
                          'name', department.name,
                          'code', department.code,
                          'cas_mode', department.cas_mode,
                          'cas_version', department.cas_version,
                          'site', (select jsonb_build_object('identifier', site.identifier) from site where (department.site_identifier) = (site.identifier)),
                          'location', array(select jsonb_build_object('identifier', location.identifier) from location where (location.department_identifier) = (department.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'mis_connection_department', cas_api_mis_connection_department_get(jsonb_build_object('identifier', department.identifier), 'department')
                      )
            from      department
            where     exists(select from location where (location.identifier) = (($1->>'identifier')::integer) and (location.department_identifier) = (department.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')) and
                      department.cas_mode in('ACTIVE', 'INACTIVE');
        when 'mis_connection_department' then
            return    jsonb_build_object(
                          'identifier', department.identifier,
                          'name', department.name,
                          'code', department.code,
                          'cas_mode', department.cas_mode,
                          'cas_version', department.cas_version,
                          'site', (select jsonb_build_object('identifier', site.identifier) from site where (department.site_identifier) = (site.identifier)),
                          'location', array(select jsonb_build_object('identifier', location.identifier) from location where (location.department_identifier) = (department.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'mis_connection_department', cas_api_mis_connection_department_get(jsonb_build_object('identifier', department.identifier), 'department')
                      )
            from      department
            where     exists(select from mis_connection_department where (mis_connection_department.identifier) = (($1->>'identifier')::integer) and (mis_connection_department.department_identifier) = (department.identifier)) and
                      department.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_department_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_department_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_department_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ department;
    _site site;
begin
    if $1?'identifier' then
        select    department.*
        into      _
        from      department
        where     (department.identifier) = (($1->>'identifier')::integer) and
                  department.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'site' then
        _site = (select site from site where (site.identifier) = (($1->'site'->>'identifier')::integer));
    end if;

    if _.identifier is not null then
        update       department
        set          (name, code, cas_mode, site_identifier) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'code' then ($1->>'code')::text else _.code::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end,
                                   case when $1?'site' then coalesce(_site.identifier, null) else _.site_identifier end
                     )
        where        (department.identifier) = (_.identifier)
        returning    department.*
        into         _;
    elseif $2 then
        insert into    department(identifier, name, code, cas_mode, site_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_department_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'code' then ($1->>'code')::text else gen_random_uuid()::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end,
                       case when $1?'site' then coalesce(_site.identifier, null) else null end
        returning      department.*
        into           _;
    else
        return null;
    end if;

    if $1?'location' then
        with
        location as
        (
            update       location
            set          (department_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'location') as q
            where        (location.identifier) = ((q->>'identifier')::integer) and
                         location.cas_mode in('ACTIVE', 'INACTIVE')
            returning    location.identifier
        )
        update    location
        set       (department_identifier) = row(null)
        where     (location.department_identifier) = (_.identifier) and
                  (location.identifier) not in(select (location.identifier) from location) and
                  location.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'mis_connection_department' then
        with
        mis_connection_department as
        (
            update       mis_connection_department
            set          (department_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'mis_connection_department') as q
            where        (mis_connection_department.identifier) = ((q->>'identifier')::integer)
            returning    mis_connection_department.identifier
        )
        update    mis_connection_department
        set       (department_identifier) = row(null)
        where     (mis_connection_department.department_identifier) = (_.identifier) and
                  (mis_connection_department.identifier) not in(select (mis_connection_department.identifier) from mis_connection_department);
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_department_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_device_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_device_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', device.identifier,
                  'serial', device.serial,
                  'name', device.name,
                  'verklizan_location_identifier', device.verklizan_location_identifier,
                  'application', device.application,
                  'verklizan_identifier', device.verklizan_identifier,
                  'viedome_identifier', device.viedome_identifier,
                  'application_parameters', device.application_parameters,
                  'cas_mode', device.cas_mode,
                  'cas_version', device.cas_version,
                  'location', (select jsonb_build_object('identifier', location.identifier) from location where (device.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                  'access_door', array(select jsonb_build_object('identifier', access_door.identifier) from access_door where (access_door.device_identifier) = (device.identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE')),
				  'embezzlement_time', ag.embezzlement_time,
				  'comfort_during_night', ag.comfort_during_night,
                  'use_newui', device.use_newui		
              )), '[]')
    from      device
	left outer join application_global ag on ag.device_identifier = device.identifier	
    where     device.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_device_get() OWNER TO aperi;

--
-- Name: cas_api_device_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_device_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', device.identifier,
                      'serial', device.serial,
                      'name', device.name,
                      'verklizan_location_identifier', device.verklizan_location_identifier,
                      'application', device.application,
                      'verklizan_identifier', device.verklizan_identifier,
                      'viedome_identifier', device.viedome_identifier,
                      'application_parameters', device.application_parameters,
                      'cas_mode', device.cas_mode,
                      'cas_version', device.cas_version,
                      'location', (select jsonb_build_object('identifier', location.identifier) from location where (device.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                      'access_door', array(select jsonb_build_object('identifier', access_door.identifier) from access_door where (access_door.device_identifier) = (device.identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE')),					  
			 		  'embezzlement_time', ag.embezzlement_time,
				  	  'comfort_during_night', ag.comfort_during_night,
                      'use_newui', device.use_newui		
                  )
        from      device
		left outer join application_global ag on ag.device_identifier = device.identifier	
        where     (device.identifier) = (($1->>'identifier')::integer) and
                  device.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'location' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', device.identifier,
                          'serial', device.serial,
                          'name', device.name,
                          'verklizan_location_identifier', device.verklizan_location_identifier,
                          'application', device.application,
                          'verklizan_identifier', device.verklizan_identifier,
                          'viedome_identifier', device.viedome_identifier,
                          'application_parameters', device.application_parameters,
                          'cas_mode', device.cas_mode,
                          'cas_version', device.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location where (device.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'access_door', array(select jsonb_build_object('identifier', access_door.identifier) from access_door where (access_door.device_identifier) = (device.identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE')),
						  'embezzlement_time', ag.embezzlement_time,
				          'comfort_during_night', ag.comfort_during_night,	
                          'use_newui', device.use_newui
                      )), '[]')
            from      device
			left outer join application_global ag on ag.device_identifier = device.identifier	
            where     exists(select from location where (location.identifier) = (($1->>'identifier')::integer) and (device.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')) and
                      device.cas_mode in('ACTIVE', 'INACTIVE');
        when 'access_door' then
            return    jsonb_build_object(
                          'identifier', device.identifier,
                          'serial', device.serial,
                          'name', device.name,
                          'verklizan_location_identifier', device.verklizan_location_identifier,
                          'application', device.application,
                          'verklizan_identifier', device.verklizan_identifier,
                          'viedome_identifier', device.viedome_identifier,
                          'application_parameters', device.application_parameters,
                          'cas_mode', device.cas_mode,
                          'cas_version', device.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location where (device.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'access_door', array(select jsonb_build_object('identifier', access_door.identifier) from access_door where (access_door.device_identifier) = (device.identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE')),
						  'embezzlement_time', ag.embezzlement_time,
				          'comfort_during_night', ag.comfort_during_night,
                          'use_newui', device.use_newui	
                      )
            from      device
			left outer join application_global ag on ag.device_identifier = device.identifier	
            where     exists(select from access_door where (access_door.identifier) = (($1->>'identifier')::integer) and (access_door.device_identifier) = (device.identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE')) and
                      device.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_device_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_device_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_device_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ device;
    _location location;	
begin
    if $1?'identifier' then
        select    device.*
        into      _
        from      device
        where     (device.identifier) = (($1->>'identifier')::integer) and
                  device.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'location' then
        _location = (select location from location where (location.identifier) = (($1->'location'->>'identifier')::integer) and location.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       device
        set          (serial, name, verklizan_location_identifier, application, verklizan_identifier, viedome_identifier, application_parameters, cas_mode, location_identifier, use_newui) =
                     (
                         select    case when $1?'serial' then ($1->>'serial')::integer else _.serial::integer end,
                                   case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'verklizan_location_identifier' then ($1->>'verklizan_location_identifier')::integer else _.verklizan_location_identifier::integer end,
                                   case when $1?'application' then ($1->>'application')::integer else _.application::integer end,
                                   case when $1?'verklizan_identifier' then ($1->>'verklizan_identifier')::text else _.verklizan_identifier::text end,
                                   case when $1?'viedome_identifier' then ($1->>'viedome_identifier')::text else _.viedome_identifier::text end,
                                   case when $1?'application_parameters' then ($1->>'application_parameters')::jsonb else _.application_parameters::jsonb end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end,
                                   case when $1?'location' then coalesce(_location.identifier, null) else _.location_identifier end,
                                   case when $1?'use_newui' then ($1->>'use_newui')::boolean else _.use_newui end
                     )
        where        (device.identifier) = (_.identifier)
        returning    device.*
        into         _;
							
				
    elseif $2 then
        insert into    device(identifier, serial, name, verklizan_location_identifier, application, verklizan_identifier, viedome_identifier, application_parameters, cas_mode, location_identifier, use_newui)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_device_identifier'::regclass)::integer end,
                       case when $1?'serial' then ($1->>'serial')::integer else null::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'verklizan_location_identifier' then ($1->>'verklizan_location_identifier')::integer else null::integer end,
                       case when $1?'application' then ($1->>'application')::integer else 3::integer end,
                       case when $1?'verklizan_identifier' then ($1->>'verklizan_identifier')::text else null::text end,
                       case when $1?'viedome_identifier' then ($1->>'viedome_identifier')::text else null::text end,
                       case when $1?'application_parameters' then ($1->>'application_parameters')::jsonb else '{}'::jsonb::jsonb end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end,
                       case when $1?'location' then coalesce(_location.identifier, null) else null end,
                        case when $1?'use_newui' then ($1->>'use_newui')::boolean else _.use_newui end
        returning      device.*
        into           _;
    else
        return null;
    end if;
    --AP-395: Add Device as location gateway, if no gateways for location are defined.
    if (_.location_identifier is not null and 
        _.identifier is not null and 
        (select count(*) from location_gateway_device_gateway where location_gateway_device_gateway.location_identifier = _.location_identifier) = 0)
    then
    		insert into location_gateway_device_gateway(location_identifier, device_identifier)
			values (_.location_identifier, _.identifier);
    end if;

	--AP-535 Add application_svp record if SVP		
	if (_.application = 1 AND _.cas_mode != 'DELETED') then	
		insert into application_svp(device_identifier, esvp_device_identifier)
		select _.identifier, _.identifier
		on conflict do nothing;
	else
		delete from application_svp where device_identifier = _.identifier;
	end if;
    
    if $1?'access_door' then
        with
        access_door as
        (
            update       access_door
            set          (device_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'access_door') as q
            where        (access_door.identifier) = ((q->>'identifier')::integer) and
                         access_door.cas_mode in('ACTIVE', 'INACTIVE')
            returning    access_door.identifier
        )
        update    access_door
        set       (device_identifier) = row(null)
        where     (access_door.device_identifier) = (_.identifier) and
                  (access_door.identifier) not in(select (access_door.identifier) from access_door) and
                  access_door.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
	
	--Set embezzlement time and night_comfort
	if ((select count(*) from application_global ag where ag.device_identifier = _.identifier) = 0) and (_.identifier is not null) then
		insert into application_global (comfort_during_night, embezzlement_time, device_identifier)
		select	coalesce(($1->>'comfort_during_night')::boolean, true),
				coalesce(($1->>'embezzlement_time')::integer, 300),
				_.identifier;
	end if;
	
	if ((select count(*) from application_global ag where ag.device_identifier = _.identifier) = 1) then
		update application_global 
		set comfort_during_night = coalesce(($1->>'comfort_during_night')::boolean, application_global.comfort_during_night, true),
				embezzlement_time = coalesce(($1->>'embezzlement_time')::integer, application_global.embezzlement_time, 300)
		where device_identifier = _.identifier;
	end if;					
	
    return jsonb_build_object('identifier', _.identifier, 'cas_version', (select cas_version from device where identifier = _.identifier));
end
$_$;


ALTER FUNCTION public.cas_api_device_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_device_status_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_device_status_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', device_status.identifier,
                  'name', device_status.name,
                  'state_machine', device_status.state_machine,
                  'state_identifier', device_status.state_identifier,
                  'device_only', device_status.device_only,
                  'cas_mode', device_status.cas_mode,
                  'cas_version', device_status.cas_version
              )), '[]')
    from      device_status
    where     device_status.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_device_status_get() OWNER TO aperi;

--
-- Name: cas_api_device_status_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_device_status_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', device_status.identifier,
                      'name', device_status.name,
                      'state_machine', device_status.state_machine,
                      'state_identifier', device_status.state_identifier,
                      'device_only', device_status.device_only,
                      'cas_mode', device_status.cas_mode,
                      'cas_version', device_status.cas_version
                  )
        from      device_status
        where     (device_status.identifier) = (($1->>'identifier')::integer) and
                  device_status.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
end
$_$;


ALTER FUNCTION public.cas_api_device_status_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_device_status_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_device_status_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ device_status;

begin
    if $1?'identifier' then
        select    device_status.*
        into      _
        from      device_status
        where     (device_status.identifier) = (($1->>'identifier')::integer) and
                  device_status.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       device_status
        set          (name, state_machine, state_identifier, device_only, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'state_machine' then ($1->>'state_machine')::integer else _.state_machine::integer end,
                                   case when $1?'state_identifier' then ($1->>'state_identifier')::integer else _.state_identifier::integer end,
                                   case when $1?'device_only' then ($1->>'device_only')::boolean else _.device_only::boolean end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (device_status.identifier) = (_.identifier)
        returning    device_status.*
        into         _;
    elseif $2 then
        insert into    device_status(identifier, name, state_machine, state_identifier, device_only, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_device_status_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'state_machine' then ($1->>'state_machine')::integer else null::integer end,
                       case when $1?'state_identifier' then ($1->>'state_identifier')::integer else null::integer end,
                       case when $1?'device_only' then ($1->>'device_only')::boolean else false::boolean end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      device_status.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_device_status_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_door_procedure_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_door_procedure_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', door_procedure.identifier,
                  'name', door_procedure.name,
                  'functionality', door_procedure.functionality,
                  'cas_mode', door_procedure.cas_mode,
                  'cas_version', door_procedure.cas_version,
                  'access_door', array(select jsonb_build_object('identifier', access_door.identifier) from access_door inner join access_door_door_procedure on (access_door_door_procedure.access_door_identifier) = (access_door.identifier) where (door_procedure.identifier) = (access_door_door_procedure.door_procedure_identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      door_procedure
    where     door_procedure.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_door_procedure_get() OWNER TO aperi;

--
-- Name: cas_api_door_procedure_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_door_procedure_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', door_procedure.identifier,
                      'name', door_procedure.name,
                      'functionality', door_procedure.functionality,
                      'cas_mode', door_procedure.cas_mode,
                      'cas_version', door_procedure.cas_version,
                      'access_door', array(select jsonb_build_object('identifier', access_door.identifier) from access_door inner join access_door_door_procedure on (access_door_door_procedure.access_door_identifier) = (access_door.identifier) where (door_procedure.identifier) = (access_door_door_procedure.door_procedure_identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      door_procedure
        where     (door_procedure.identifier) = (($1->>'identifier')::integer) and
                  door_procedure.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'access_door' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', door_procedure.identifier,
                          'name', door_procedure.name,
                          'functionality', door_procedure.functionality,
                          'cas_mode', door_procedure.cas_mode,
                          'cas_version', door_procedure.cas_version,
                          'access_door', array(select jsonb_build_object('identifier', access_door.identifier) from access_door inner join access_door_door_procedure on (access_door_door_procedure.access_door_identifier) = (access_door.identifier) where (door_procedure.identifier) = (access_door_door_procedure.door_procedure_identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      door_procedure
            where     exists(select from access_door inner join access_door_door_procedure on (access_door_door_procedure.access_door_identifier) = (access_door.identifier) where (access_door.identifier) = (($1->>'identifier')::integer) and (door_procedure.identifier) = (access_door_door_procedure.door_procedure_identifier) and access_door.cas_mode in('ACTIVE', 'INACTIVE')) and
                      door_procedure.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_door_procedure_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_door_procedure_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_door_procedure_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ door_procedure;

begin
    if $1?'identifier' then
        select    door_procedure.*
        into      _
        from      door_procedure
        where     (door_procedure.identifier) = (($1->>'identifier')::integer) and
                  door_procedure.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       door_procedure
        set          (name, functionality, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'functionality' then ($1->>'functionality')::integer else _.functionality::integer end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (door_procedure.identifier) = (_.identifier)
        returning    door_procedure.*
        into         _;
    elseif $2 then
        insert into    door_procedure(identifier, name, functionality, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_door_procedure_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'functionality' then ($1->>'functionality')::integer else null::integer end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      door_procedure.*
        into           _;
    else
        return null;
    end if;

    if $1?'access_door' then
        with
        access_door as
        (
            select    access_door.*
            from      access_door, jsonb_array_elements($1->'access_door') as q
            where     (access_door.identifier) = ((q->>'identifier')::integer) and
                      access_door.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        access_door_door_procedure(door_procedure_identifier, access_door_identifier) as
        (
            select    _.identifier, access_door.identifier
            from      access_door
        ),
        access_door_door_procedure_orphan as
        (
            delete from    access_door_door_procedure
            where          (access_door_door_procedure.door_procedure_identifier) = (_.identifier) and
                           (access_door_door_procedure.access_door_identifier) not in(select (access_door_door_procedure.access_door_identifier) from access_door_door_procedure)
        )
        insert into    access_door_door_procedure(door_procedure_identifier, access_door_identifier)
        select         access_door_door_procedure.door_procedure_identifier, access_door_door_procedure.access_door_identifier
        from           access_door_door_procedure
        on conflict do nothing;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_door_procedure_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_email_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_email_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', email.identifier,
                  'address', email.address,
                  'cas_version', email.cas_version,
                  'crew', (select jsonb_build_object('identifier', crew.identifier) from crew where (email.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                  'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (email.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                  'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (email.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                  'possible_work_order_top', (select jsonb_build_object('identifier', possible_work_order_top.identifier) from possible_work_order_top where (email.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE')),
                  'role', (select jsonb_build_object('identifier', role.identifier) from role where (email.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      email;
end
$$;


ALTER FUNCTION public.cas_api_email_get() OWNER TO aperi;

--
-- Name: cas_api_email_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_email_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', email.identifier,
                      'address', email.address,
                      'cas_version', email.cas_version,
                      'crew', (select jsonb_build_object('identifier', crew.identifier) from crew where (email.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                      'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (email.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                      'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (email.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                      'possible_work_order_top', (select jsonb_build_object('identifier', possible_work_order_top.identifier) from possible_work_order_top where (email.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE')),
                      'role', (select jsonb_build_object('identifier', role.identifier) from role where (email.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      email
        where     (email.identifier) = (($1->>'identifier')::integer);
    end if;

    case $2
        when 'crew' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', email.identifier,
                          'address', email.address,
                          'cas_version', email.cas_version,
                          'crew', (select jsonb_build_object('identifier', crew.identifier) from crew where (email.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (email.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (email.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'possible_work_order_top', (select jsonb_build_object('identifier', possible_work_order_top.identifier) from possible_work_order_top where (email.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE')),
                          'role', (select jsonb_build_object('identifier', role.identifier) from role where (email.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      email
            where     exists(select from crew where (crew.identifier) = (($1->>'identifier')::integer) and (email.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE'));
        when 'employee' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', email.identifier,
                          'address', email.address,
                          'cas_version', email.cas_version,
                          'crew', (select jsonb_build_object('identifier', crew.identifier) from crew where (email.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (email.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (email.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'possible_work_order_top', (select jsonb_build_object('identifier', possible_work_order_top.identifier) from possible_work_order_top where (email.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE')),
                          'role', (select jsonb_build_object('identifier', role.identifier) from role where (email.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      email
            where     exists(select from employee where (employee.identifier) = (($1->>'identifier')::integer) and (email.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE'));
        when 'patient' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', email.identifier,
                          'address', email.address,
                          'cas_version', email.cas_version,
                          'crew', (select jsonb_build_object('identifier', crew.identifier) from crew where (email.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (email.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (email.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'possible_work_order_top', (select jsonb_build_object('identifier', possible_work_order_top.identifier) from possible_work_order_top where (email.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE')),
                          'role', (select jsonb_build_object('identifier', role.identifier) from role where (email.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      email
            where     exists(select from patient where (patient.identifier) = (($1->>'identifier')::integer) and (email.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE'));
        when 'possible_work_order_top' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', email.identifier,
                          'address', email.address,
                          'cas_version', email.cas_version,
                          'crew', (select jsonb_build_object('identifier', crew.identifier) from crew where (email.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (email.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (email.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'possible_work_order_top', (select jsonb_build_object('identifier', possible_work_order_top.identifier) from possible_work_order_top where (email.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE')),
                          'role', (select jsonb_build_object('identifier', role.identifier) from role where (email.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      email
            where     exists(select from possible_work_order_top where (possible_work_order_top.identifier) = (($1->>'identifier')::integer) and (email.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE'));
        when 'role' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', email.identifier,
                          'address', email.address,
                          'cas_version', email.cas_version,
                          'crew', (select jsonb_build_object('identifier', crew.identifier) from crew where (email.crew_identifier) = (crew.identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (email.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (email.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'possible_work_order_top', (select jsonb_build_object('identifier', possible_work_order_top.identifier) from possible_work_order_top where (email.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE')),
                          'role', (select jsonb_build_object('identifier', role.identifier) from role where (email.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      email
            where     exists(select from role where (role.identifier) = (($1->>'identifier')::integer) and (email.role_identifier) = (role.identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'));
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_email_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_email_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_email_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ email;
    _crew crew;
    _employee employee;
    _patient patient;
    _possible_work_order_top possible_work_order_top;
    _role role;
begin
    if $1?'identifier' then
        select    email.*
        into      _
        from      email
        where     (email.identifier) = (($1->>'identifier')::integer);
    end if;
    if $1?'crew' then
        _crew = (select crew from crew where (crew.identifier) = (($1->'crew'->>'identifier')::integer) and crew.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'employee' then
        _employee = (select employee from employee where (employee.identifier) = (($1->'employee'->>'identifier')::integer) and employee.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'patient' then
        _patient = (select patient from patient where (patient.identifier) = (($1->'patient'->>'identifier')::integer) and patient.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'possible_work_order_top' then
        _possible_work_order_top = (select possible_work_order_top from possible_work_order_top where (possible_work_order_top.identifier) = (($1->'possible_work_order_top'->>'identifier')::integer) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'role' then
        _role = (select role from role where (role.identifier) = (($1->'role'->>'identifier')::integer) and role.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       email
        set          (address, crew_identifier, employee_identifier, patient_identifier, possible_work_order_top_identifier, role_identifier) =
                     (
                         select    case when $1?'address' then ($1->>'address')::text else _.address::text end,
                                   case when $1?'crew' then coalesce(_crew.identifier, null) else _.crew_identifier end,
                                   case when $1?'employee' then coalesce(_employee.identifier, null) else _.employee_identifier end,
                                   case when $1?'patient' then coalesce(_patient.identifier, null) else _.patient_identifier end,
                                   case when $1?'possible_work_order_top' then coalesce(_possible_work_order_top.identifier, null) else _.possible_work_order_top_identifier end,
                                   case when $1?'role' then coalesce(_role.identifier, null) else _.role_identifier end
                     )
        where        (email.identifier) = (_.identifier)
        returning    email.*
        into         _;
    elseif $2 then
        insert into    email(identifier, address, crew_identifier, employee_identifier, patient_identifier, possible_work_order_top_identifier, role_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_email_identifier'::regclass)::integer end,
                       case when $1?'address' then ($1->>'address')::text else null::text end,
                       case when $1?'crew' then coalesce(_crew.identifier, null) else null end,
                       case when $1?'employee' then coalesce(_employee.identifier, null) else null end,
                       case when $1?'patient' then coalesce(_patient.identifier, null) else null end,
                       case when $1?'possible_work_order_top' then coalesce(_possible_work_order_top.identifier, null) else null end,
                       case when $1?'role' then coalesce(_role.identifier, null) else null end
        returning      email.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_email_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_employee_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_employee_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', employee.identifier,
                  'name', employee.name,
                  'cas_language', employee.cas_language,
                  'cas_user', employee.cas_user,
                  'cas_password', employee.cas_password,
                  'cas_permissions', employee.cas_permissions,
                  'cas_mode', employee.cas_mode,
                  'cas_version', employee.cas_version,
                  'dect_account', (select jsonb_build_object('identifier', dect_account.identifier) from dect_account where (employee.dect_account_identifier) = (dect_account.identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')),
                  'spectralink_account', (select jsonb_build_object('identifier', spectralink_account.identifier) from spectralink_account where (employee.spectralink_account_identifier) = (spectralink_account.identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE')),
                  'activity', cas_api_activity_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                  'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.employee_identifier) = (employee.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                  'email', cas_api_email_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                  'mis_connection_employee', cas_api_mis_connection_employee_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                  'cms_code_one', employee.cms_code_one
              )), '[]')
    from      employee
    where     employee.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_employee_get() OWNER TO aperi;

--
-- Name: cas_api_employee_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_employee_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', employee.identifier,
                      'name', employee.name,
                      'cas_language', employee.cas_language,
                      'cas_user', employee.cas_user,
                      'cas_password', employee.cas_password,
                      'cas_permissions', employee.cas_permissions,
                      'cas_mode', employee.cas_mode,
                      'cas_version', employee.cas_version,
                      'dect_account', (select jsonb_build_object('identifier', dect_account.identifier) from dect_account where (employee.dect_account_identifier) = (dect_account.identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')),
                      'spectralink_account', (select jsonb_build_object('identifier', spectralink_account.identifier) from spectralink_account where (employee.spectralink_account_identifier) = (spectralink_account.identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE')),
                      'activity', cas_api_activity_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                      'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.employee_identifier) = (employee.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                      'email', cas_api_email_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                      'mis_connection_employee', cas_api_mis_connection_employee_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                      'cms_code_one', employee.cms_code_one
                  )
        from      employee
        where     (employee.identifier) = (($1->>'identifier')::integer) and
                  employee.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'dect_account' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', employee.identifier,
                          'name', employee.name,
                          'cas_language', employee.cas_language,
                          'cas_user', employee.cas_user,
                          'cas_password', employee.cas_password,
                          'cas_permissions', employee.cas_permissions,
                          'cas_mode', employee.cas_mode,
                          'cas_version', employee.cas_version,
                          'dect_account', (select jsonb_build_object('identifier', dect_account.identifier) from dect_account where (employee.dect_account_identifier) = (dect_account.identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_account', (select jsonb_build_object('identifier', spectralink_account.identifier) from spectralink_account where (employee.spectralink_account_identifier) = (spectralink_account.identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'activity', cas_api_activity_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.employee_identifier) = (employee.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                          'email', cas_api_email_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'mis_connection_employee', cas_api_mis_connection_employee_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'cms_code_one', employee.cms_code_one
                      )), '[]')
            from      employee
            where     exists(select from dect_account where (dect_account.identifier) = (($1->>'identifier')::integer) and (employee.dect_account_identifier) = (dect_account.identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')) and
                      employee.cas_mode in('ACTIVE', 'INACTIVE');
        when 'spectralink_account' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', employee.identifier,
                          'name', employee.name,
                          'cas_language', employee.cas_language,
                          'cas_user', employee.cas_user,
                          'cas_password', employee.cas_password,
                          'cas_permissions', employee.cas_permissions,
                          'cas_mode', employee.cas_mode,
                          'cas_version', employee.cas_version,
                          'dect_account', (select jsonb_build_object('identifier', dect_account.identifier) from dect_account where (employee.dect_account_identifier) = (dect_account.identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_account', (select jsonb_build_object('identifier', spectralink_account.identifier) from spectralink_account where (employee.spectralink_account_identifier) = (spectralink_account.identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'activity', cas_api_activity_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.employee_identifier) = (employee.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                          'email', cas_api_email_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'mis_connection_employee', cas_api_mis_connection_employee_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'cms_code_one', employee.cms_code_one
                      )), '[]')
            from      employee
            where     exists(select from spectralink_account where (spectralink_account.identifier) = (($1->>'identifier')::integer) and (employee.spectralink_account_identifier) = (spectralink_account.identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE')) and
                      employee.cas_mode in('ACTIVE', 'INACTIVE');
        when 'activity' then
            return    jsonb_build_object(
                          'identifier', employee.identifier,
                          'name', employee.name,
                          'cas_language', employee.cas_language,
                          'cas_user', employee.cas_user,
                          'cas_password', employee.cas_password,
                          'cas_permissions', employee.cas_permissions,
                          'cas_mode', employee.cas_mode,
                          'cas_version', employee.cas_version,
                          'dect_account', (select jsonb_build_object('identifier', dect_account.identifier) from dect_account where (employee.dect_account_identifier) = (dect_account.identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_account', (select jsonb_build_object('identifier', spectralink_account.identifier) from spectralink_account where (employee.spectralink_account_identifier) = (spectralink_account.identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'activity', cas_api_activity_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.employee_identifier) = (employee.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                          'email', cas_api_email_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'mis_connection_employee', cas_api_mis_connection_employee_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'cms_code_one', employee.cms_code_one
                      )
            from      employee
            where     exists(select from activity where (activity.identifier) = (($1->>'identifier')::integer) and (activity.employee_identifier) = (employee.identifier)) and
                      employee.cas_mode in('ACTIVE', 'INACTIVE');
        when 'badge' then
            return    jsonb_build_object(
                          'identifier', employee.identifier,
                          'name', employee.name,
                          'cas_language', employee.cas_language,
                          'cas_user', employee.cas_user,
                          'cas_password', employee.cas_password,
                          'cas_permissions', employee.cas_permissions,
                          'cas_mode', employee.cas_mode,
                          'cas_version', employee.cas_version,
                          'dect_account', (select jsonb_build_object('identifier', dect_account.identifier) from dect_account where (employee.dect_account_identifier) = (dect_account.identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_account', (select jsonb_build_object('identifier', spectralink_account.identifier) from spectralink_account where (employee.spectralink_account_identifier) = (spectralink_account.identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'activity', cas_api_activity_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.employee_identifier) = (employee.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                          'email', cas_api_email_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'mis_connection_employee', cas_api_mis_connection_employee_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'cms_code_one', employee.cms_code_one
                      )
            from      employee
            where     exists(select from badge where (badge.identifier) = (($1->>'identifier')::integer) and (badge.employee_identifier) = (employee.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')) and
                      employee.cas_mode in('ACTIVE', 'INACTIVE');
        when 'email' then
            return    jsonb_build_object(
                          'identifier', employee.identifier,
                          'name', employee.name,
                          'cas_language', employee.cas_language,
                          'cas_user', employee.cas_user,
                          'cas_password', employee.cas_password,
                          'cas_permissions', employee.cas_permissions,
                          'cas_mode', employee.cas_mode,
                          'cas_version', employee.cas_version,
                          'dect_account', (select jsonb_build_object('identifier', dect_account.identifier) from dect_account where (employee.dect_account_identifier) = (dect_account.identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_account', (select jsonb_build_object('identifier', spectralink_account.identifier) from spectralink_account where (employee.spectralink_account_identifier) = (spectralink_account.identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'activity', cas_api_activity_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.employee_identifier) = (employee.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                          'email', cas_api_email_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'mis_connection_employee', cas_api_mis_connection_employee_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'cms_code_one', employee.cms_code_one
                      )
            from      employee
            where     exists(select from email where (email.identifier) = (($1->>'identifier')::integer) and (email.employee_identifier) = (employee.identifier)) and
                      employee.cas_mode in('ACTIVE', 'INACTIVE');
        when 'mis_connection_employee' then
            return    jsonb_build_object(
                          'identifier', employee.identifier,
                          'name', employee.name,
                          'cas_language', employee.cas_language,
                          'cas_user', employee.cas_user,
                          'cas_password', employee.cas_password,
                          'cas_permissions', employee.cas_permissions,
                          'cas_mode', employee.cas_mode,
                          'cas_version', employee.cas_version,
                          'dect_account', (select jsonb_build_object('identifier', dect_account.identifier) from dect_account where (employee.dect_account_identifier) = (dect_account.identifier) and dect_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_account', (select jsonb_build_object('identifier', spectralink_account.identifier) from spectralink_account where (employee.spectralink_account_identifier) = (spectralink_account.identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE')),
                          'activity', cas_api_activity_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.employee_identifier) = (employee.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                          'email', cas_api_email_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'mis_connection_employee', cas_api_mis_connection_employee_get(jsonb_build_object('identifier', employee.identifier), 'employee'),
                          'cms_code_one', employee.cms_code_one
                      )
            from      employee
            where     exists(select from mis_connection_employee where (mis_connection_employee.identifier) = (($1->>'identifier')::integer) and (mis_connection_employee.employee_identifier) = (employee.identifier)) and
                      employee.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_employee_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_employee_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_employee_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ employee;
    _dect_account dect_account;
    _spectralink_account spectralink_account;
begin
    if $1?'identifier' then
        select    employee.*
        into      _
        from      employee
        where     (employee.identifier) = (($1->>'identifier')::integer) and
                  employee.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'dect_account' then
        _dect_account = (select dect_account from dect_account where (dect_account.identifier) = (($1->'dect_account'->>'identifier')::integer) and dect_account.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'spectralink_account' then
        _spectralink_account = (select spectralink_account from spectralink_account where (spectralink_account.identifier) = (($1->'spectralink_account'->>'identifier')::integer) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       employee
        set          (name, cas_language, cas_user, cas_password, cas_permissions, cas_mode, dect_account_identifier, spectralink_account_identifier) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_language' then ($1->>'cas_language')::text else _.cas_language::text end,
                                   case when $1?'cas_user' then ($1->>'cas_user')::text else _.cas_user::text end,
                                   case when $1?'cas_password' then ($1->>'cas_password')::text else _.cas_password::text end,
                                   case when $1?'cas_permissions' then ($1->>'cas_permissions')::jsonb else _.cas_permissions::jsonb end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end,
                                   case when $1?'dect_account' then coalesce(_dect_account.identifier, null) else _.dect_account_identifier end,
                                   case when $1?'spectralink_account' then coalesce(_spectralink_account.identifier, null) else _.spectralink_account_identifier end
                     )
        where        (employee.identifier) = (_.identifier)
        returning    employee.*
        into         _;
    elseif $2 then
        insert into    employee(identifier, name, cas_language, cas_user, cas_password, cas_permissions, cas_mode, dect_account_identifier, spectralink_account_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_employee_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_language' then ($1->>'cas_language')::text else null::text end,
                       case when $1?'cas_user' then ($1->>'cas_user')::text else gen_random_uuid()::text end,
                       case when $1?'cas_password' then ($1->>'cas_password')::text else crypt((gen_random_uuid())::text, gen_salt('bf'::text, 12))::text end,
                       case when $1?'cas_permissions' then ($1->>'cas_permissions')::jsonb else null::jsonb end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end,
                       case when $1?'dect_account' then coalesce(_dect_account.identifier, null) else null end,
                       case when $1?'spectralink_account' then coalesce(_spectralink_account.identifier, null) else null end
        returning      employee.*
        into           _;
    else
        return null;
    end if;

    if $1?'activity' then -- !!! CUSTOM !!!
        with
        activity as
        (
            insert into    activity(crew_identifier, employee_identifier, role_identifier, position)
            select         (activity->'crew'->>'identifier')::integer, _.identifier, (activity->'role'->>'identifier')::integer, coalesce((activity->>'position')::integer, 0)
            from           jsonb_array_elements($1->'activity') as activity
            on conflict    (crew_identifier, employee_identifier, role_identifier)
            do update
            set            position = excluded.position
            returning      activity.identifier
        )
        delete from    activity
        where          (activity.employee_identifier) = (_.identifier) and
                       (activity.identifier) not in(select (activity.identifier) from activity);
    end if;
    if $1?'badge' then
        with
        badge as
        (
            update       badge
            set          (employee_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'badge') as q
            where        (badge.identifier) = ((q->>'identifier')::integer) and
                         badge.cas_mode in('ACTIVE', 'INACTIVE')
            returning    badge.identifier
        )
        update    badge
        set       (employee_identifier) = row(null)
        where     (badge.employee_identifier) = (_.identifier) and
                  (badge.identifier) not in(select (badge.identifier) from badge) and
                  badge.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'email' then
        with
        email as
        (
            update       email
            set          (employee_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'email') as q
            where        (email.identifier) = ((q->>'identifier')::integer)
            returning    email.identifier
        )
        update    email
        set       (employee_identifier) = row(null)
        where     (email.employee_identifier) = (_.identifier) and
                  (email.identifier) not in(select (email.identifier) from email);
    end if;
    if $1?'mis_connection_employee' then
        with
        mis_connection_employee as
        (
            update       mis_connection_employee
            set          (employee_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'mis_connection_employee') as q
            where        (mis_connection_employee.identifier) = ((q->>'identifier')::integer)
            returning    mis_connection_employee.identifier
        )
        update    mis_connection_employee
        set       (employee_identifier) = row(null)
        where     (mis_connection_employee.employee_identifier) = (_.identifier) and
                  (mis_connection_employee.identifier) not in(select (mis_connection_employee.identifier) from mis_connection_employee);
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_employee_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_location_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_location_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', location.identifier,
                  'name', location.name,
                  'cas_mode', location.cas_mode,
                  'cas_version', location.cas_version,
                  'department', (select jsonb_build_object('identifier', department.identifier) from department where (location.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE')),
                  'device', array(select jsonb_build_object('identifier', device.identifier) from device where (device.location_identifier) = (location.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                  'mis_connection_location', cas_api_mis_connection_location_get(jsonb_build_object('identifier', location.identifier), 'location'),
                  'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.location_identifier) = (location.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')),
                  'crew', array(select jsonb_build_object('identifier', crew.identifier) from crew inner join crew_location on (crew_location.crew_identifier) = (crew.identifier) where (location.identifier) = (crew_location.location_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                  'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_location on (dect_group_location.dect_group_identifier) = (dect_group.identifier) where (location.identifier) = (dect_group_location.location_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE')),
                  'patient', array(select jsonb_build_object('identifier', patient.identifier) from patient inner join location_patient on (location_patient.patient_identifier) = (patient.identifier) where (location.identifier) = (location_patient.location_identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                  'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_location on (spectralink_group_location.spectralink_group_identifier) = (spectralink_group.identifier) where (location.identifier) = (spectralink_group_location.location_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')),
				  'gateway', array(select json_build_object('identifier', lgd.device_identifier) from location_gateway_device_gateway lgd where lgd.location_identifier = location.identifier)
              )), '[]')
    from      location
    where     location.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_location_get() OWNER TO aperi;

--
-- Name: cas_api_location_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_location_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', location.identifier,
                      'name', location.name,
                      'cas_mode', location.cas_mode,
                      'cas_version', location.cas_version,
                      'department', (select jsonb_build_object('identifier', department.identifier) from department where (location.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE')),
                      'device', array(select jsonb_build_object('identifier', device.identifier) from device where (device.location_identifier) = (location.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                      'mis_connection_location', cas_api_mis_connection_location_get(jsonb_build_object('identifier', location.identifier), 'location'),
                      'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.location_identifier) = (location.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')),
                      'crew', array(select jsonb_build_object('identifier', crew.identifier) from crew inner join crew_location on (crew_location.crew_identifier) = (crew.identifier) where (location.identifier) = (crew_location.location_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                      'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_location on (dect_group_location.dect_group_identifier) = (dect_group.identifier) where (location.identifier) = (dect_group_location.location_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE')),
                      'patient', array(select jsonb_build_object('identifier', patient.identifier) from patient inner join location_patient on (location_patient.patient_identifier) = (patient.identifier) where (location.identifier) = (location_patient.location_identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                      'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_location on (spectralink_group_location.spectralink_group_identifier) = (spectralink_group.identifier) where (location.identifier) = (spectralink_group_location.location_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')),
					  'gateway', array(select json_build_object('identifier', lgd.device_identifier) from location_gateway_device_gateway lgd where lgd.location_identifier = location.identifier)
                  )
        from      location
        where     (location.identifier) = (($1->>'identifier')::integer) and
                  location.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'department' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', location.identifier,
                          'name', location.name,
                          'cas_mode', location.cas_mode,
                          'cas_version', location.cas_version,
                          'department', (select jsonb_build_object('identifier', department.identifier) from department where (location.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE')),
                          'device', array(select jsonb_build_object('identifier', device.identifier) from device where (device.location_identifier) = (location.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                          'mis_connection_location', cas_api_mis_connection_location_get(jsonb_build_object('identifier', location.identifier), 'location'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.location_identifier) = (location.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')),
                          'crew', array(select jsonb_build_object('identifier', crew.identifier) from crew inner join crew_location on (crew_location.crew_identifier) = (crew.identifier) where (location.identifier) = (crew_location.location_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_location on (dect_group_location.dect_group_identifier) = (dect_group.identifier) where (location.identifier) = (dect_group_location.location_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', array(select jsonb_build_object('identifier', patient.identifier) from patient inner join location_patient on (location_patient.patient_identifier) = (patient.identifier) where (location.identifier) = (location_patient.location_identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_location on (spectralink_group_location.spectralink_group_identifier) = (spectralink_group.identifier) where (location.identifier) = (spectralink_group_location.location_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')),
					      'gateway', array(select json_build_object('identifier', lgd.device_identifier) from location_gateway_device_gateway lgd where lgd.location_identifier = location.identifier)				
                      )), '[]')
            from      location
            where     exists(select from department where (department.identifier) = (($1->>'identifier')::integer) and (location.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE')) and
                      location.cas_mode in('ACTIVE', 'INACTIVE');
        when 'device' then
            return    jsonb_build_object(
                          'identifier', location.identifier,
                          'name', location.name,
                          'cas_mode', location.cas_mode,
                          'cas_version', location.cas_version,
                          'department', (select jsonb_build_object('identifier', department.identifier) from department where (location.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE')),
                          'device', array(select jsonb_build_object('identifier', device.identifier) from device where (device.location_identifier) = (location.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                          'mis_connection_location', cas_api_mis_connection_location_get(jsonb_build_object('identifier', location.identifier), 'location'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.location_identifier) = (location.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')),
                          'crew', array(select jsonb_build_object('identifier', crew.identifier) from crew inner join crew_location on (crew_location.crew_identifier) = (crew.identifier) where (location.identifier) = (crew_location.location_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_location on (dect_group_location.dect_group_identifier) = (dect_group.identifier) where (location.identifier) = (dect_group_location.location_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', array(select jsonb_build_object('identifier', patient.identifier) from patient inner join location_patient on (location_patient.patient_identifier) = (patient.identifier) where (location.identifier) = (location_patient.location_identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_location on (spectralink_group_location.spectralink_group_identifier) = (spectralink_group.identifier) where (location.identifier) = (spectralink_group_location.location_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')),
					      'gateway', array(select json_build_object('identifier', lgd.device_identifier) from location_gateway_device_gateway lgd where lgd.location_identifier = location.identifier)				
                      )
            from      location
            where     exists(select from device where (device.identifier) = (($1->>'identifier')::integer) and (device.location_identifier) = (location.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')) and
                      location.cas_mode in('ACTIVE', 'INACTIVE');
        when 'mis_connection_location' then
            return    jsonb_build_object(
                          'identifier', location.identifier,
                          'name', location.name,
                          'cas_mode', location.cas_mode,
                          'cas_version', location.cas_version,
                          'department', (select jsonb_build_object('identifier', department.identifier) from department where (location.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE')),
                          'device', array(select jsonb_build_object('identifier', device.identifier) from device where (device.location_identifier) = (location.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                          'mis_connection_location', cas_api_mis_connection_location_get(jsonb_build_object('identifier', location.identifier), 'location'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.location_identifier) = (location.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')),
                          'crew', array(select jsonb_build_object('identifier', crew.identifier) from crew inner join crew_location on (crew_location.crew_identifier) = (crew.identifier) where (location.identifier) = (crew_location.location_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_location on (dect_group_location.dect_group_identifier) = (dect_group.identifier) where (location.identifier) = (dect_group_location.location_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', array(select jsonb_build_object('identifier', patient.identifier) from patient inner join location_patient on (location_patient.patient_identifier) = (patient.identifier) where (location.identifier) = (location_patient.location_identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_location on (spectralink_group_location.spectralink_group_identifier) = (spectralink_group.identifier) where (location.identifier) = (spectralink_group_location.location_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')),
					      'gateway', array(select json_build_object('identifier', lgd.device_identifier) from location_gateway_device_gateway lgd where lgd.location_identifier = location.identifier)				
                      )
            from      location
            where     exists(select from mis_connection_location where (mis_connection_location.identifier) = (($1->>'identifier')::integer) and (mis_connection_location.location_identifier) = (location.identifier)) and
                      location.cas_mode in('ACTIVE', 'INACTIVE');
        when 'rf_module' then
            return    jsonb_build_object(
                          'identifier', location.identifier,
                          'name', location.name,
                          'cas_mode', location.cas_mode,
                          'cas_version', location.cas_version,
                          'department', (select jsonb_build_object('identifier', department.identifier) from department where (location.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE')),
                          'device', array(select jsonb_build_object('identifier', device.identifier) from device where (device.location_identifier) = (location.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                          'mis_connection_location', cas_api_mis_connection_location_get(jsonb_build_object('identifier', location.identifier), 'location'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.location_identifier) = (location.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')),
                          'crew', array(select jsonb_build_object('identifier', crew.identifier) from crew inner join crew_location on (crew_location.crew_identifier) = (crew.identifier) where (location.identifier) = (crew_location.location_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_location on (dect_group_location.dect_group_identifier) = (dect_group.identifier) where (location.identifier) = (dect_group_location.location_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', array(select jsonb_build_object('identifier', patient.identifier) from patient inner join location_patient on (location_patient.patient_identifier) = (patient.identifier) where (location.identifier) = (location_patient.location_identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_location on (spectralink_group_location.spectralink_group_identifier) = (spectralink_group.identifier) where (location.identifier) = (spectralink_group_location.location_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')),
					      'gateway', array(select json_build_object('identifier', lgd.device_identifier) from location_gateway_device_gateway lgd where lgd.location_identifier = location.identifier)				
                      )
            from      location
            where     exists(select from rf_module where (rf_module.identifier) = (($1->>'identifier')::integer) and (rf_module.location_identifier) = (location.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')) and
                      location.cas_mode in('ACTIVE', 'INACTIVE');
        when 'crew' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', location.identifier,
                          'name', location.name,
                          'cas_mode', location.cas_mode,
                          'cas_version', location.cas_version,
                          'department', (select jsonb_build_object('identifier', department.identifier) from department where (location.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE')),
                          'device', array(select jsonb_build_object('identifier', device.identifier) from device where (device.location_identifier) = (location.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                          'mis_connection_location', cas_api_mis_connection_location_get(jsonb_build_object('identifier', location.identifier), 'location'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.location_identifier) = (location.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')),
                          'crew', array(select jsonb_build_object('identifier', crew.identifier) from crew inner join crew_location on (crew_location.crew_identifier) = (crew.identifier) where (location.identifier) = (crew_location.location_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_location on (dect_group_location.dect_group_identifier) = (dect_group.identifier) where (location.identifier) = (dect_group_location.location_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', array(select jsonb_build_object('identifier', patient.identifier) from patient inner join location_patient on (location_patient.patient_identifier) = (patient.identifier) where (location.identifier) = (location_patient.location_identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_location on (spectralink_group_location.spectralink_group_identifier) = (spectralink_group.identifier) where (location.identifier) = (spectralink_group_location.location_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      location
            where     exists(select from crew inner join crew_location on (crew_location.crew_identifier) = (crew.identifier) where (crew.identifier) = (($1->>'identifier')::integer) and (location.identifier) = (crew_location.location_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')) and
                      location.cas_mode in('ACTIVE', 'INACTIVE');
        when 'dect_group' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', location.identifier,
                          'name', location.name,
                          'cas_mode', location.cas_mode,
                          'cas_version', location.cas_version,
                          'department', (select jsonb_build_object('identifier', department.identifier) from department where (location.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE')),
                          'device', array(select jsonb_build_object('identifier', device.identifier) from device where (device.location_identifier) = (location.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                          'mis_connection_location', cas_api_mis_connection_location_get(jsonb_build_object('identifier', location.identifier), 'location'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.location_identifier) = (location.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')),
                          'crew', array(select jsonb_build_object('identifier', crew.identifier) from crew inner join crew_location on (crew_location.crew_identifier) = (crew.identifier) where (location.identifier) = (crew_location.location_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_location on (dect_group_location.dect_group_identifier) = (dect_group.identifier) where (location.identifier) = (dect_group_location.location_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', array(select jsonb_build_object('identifier', patient.identifier) from patient inner join location_patient on (location_patient.patient_identifier) = (patient.identifier) where (location.identifier) = (location_patient.location_identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_location on (spectralink_group_location.spectralink_group_identifier) = (spectralink_group.identifier) where (location.identifier) = (spectralink_group_location.location_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')),
						  'gateway', array(select json_build_object('identifier', lgd.device_identifier) from location_gateway_device_gateway lgd where lgd.location_identifier = location.identifier)
                      )), '[]')
            from      location
            where     exists(select from dect_group inner join dect_group_location on (dect_group_location.dect_group_identifier) = (dect_group.identifier) where (dect_group.identifier) = (($1->>'identifier')::integer) and (location.identifier) = (dect_group_location.location_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE')) and
                      location.cas_mode in('ACTIVE', 'INACTIVE');
        when 'patient' then
            return    jsonb_build_object(
                          'identifier', location.identifier,
                          'name', location.name,
                          'cas_mode', location.cas_mode,
                          'cas_version', location.cas_version,
                          'department', (select jsonb_build_object('identifier', department.identifier) from department where (location.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE')),
                          'device', array(select jsonb_build_object('identifier', device.identifier) from device where (device.location_identifier) = (location.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                          'mis_connection_location', cas_api_mis_connection_location_get(jsonb_build_object('identifier', location.identifier), 'location'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.location_identifier) = (location.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')),
                          'crew', array(select jsonb_build_object('identifier', crew.identifier) from crew inner join crew_location on (crew_location.crew_identifier) = (crew.identifier) where (location.identifier) = (crew_location.location_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_location on (dect_group_location.dect_group_identifier) = (dect_group.identifier) where (location.identifier) = (dect_group_location.location_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', array(select jsonb_build_object('identifier', patient.identifier) from patient inner join location_patient on (location_patient.patient_identifier) = (patient.identifier) where (location.identifier) = (location_patient.location_identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_location on (spectralink_group_location.spectralink_group_identifier) = (spectralink_group.identifier) where (location.identifier) = (spectralink_group_location.location_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')),
					      'gateway', array(select json_build_object('identifier', lgd.device_identifier) from location_gateway_device_gateway lgd where lgd.location_identifier = location.identifier)				
                      )
            from      location
            where     exists(select from patient inner join location_patient on (location_patient.patient_identifier) = (patient.identifier) where (patient.identifier) = (($1->>'identifier')::integer) and (location.identifier) = (location_patient.location_identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')) and
                      location.cas_mode in('ACTIVE', 'INACTIVE');
        when 'spectralink_group' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', location.identifier,
                          'name', location.name,
                          'cas_mode', location.cas_mode,
                          'cas_version', location.cas_version,
                          'department', (select jsonb_build_object('identifier', department.identifier) from department where (location.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE')),
                          'device', array(select jsonb_build_object('identifier', device.identifier) from device where (device.location_identifier) = (location.identifier) and device.cas_mode in('ACTIVE', 'INACTIVE')),
                          'mis_connection_location', cas_api_mis_connection_location_get(jsonb_build_object('identifier', location.identifier), 'location'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.location_identifier) = (location.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')),
                          'crew', array(select jsonb_build_object('identifier', crew.identifier) from crew inner join crew_location on (crew_location.crew_identifier) = (crew.identifier) where (location.identifier) = (crew_location.location_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE')),
                          'dect_group', array(select jsonb_build_object('identifier', dect_group.identifier) from dect_group inner join dect_group_location on (dect_group_location.dect_group_identifier) = (dect_group.identifier) where (location.identifier) = (dect_group_location.location_identifier) and dect_group.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', array(select jsonb_build_object('identifier', patient.identifier) from patient inner join location_patient on (location_patient.patient_identifier) = (patient.identifier) where (location.identifier) = (location_patient.location_identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_location on (spectralink_group_location.spectralink_group_identifier) = (spectralink_group.identifier) where (location.identifier) = (spectralink_group_location.location_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')),
						  'gateway', array(select json_build_object('identifier', lgd.device_identifier) from location_gateway_device_gateway lgd where lgd.location_identifier = location.identifier)
                      )), '[]')
            from      location
            where     exists(select from spectralink_group inner join spectralink_group_location on (spectralink_group_location.spectralink_group_identifier) = (spectralink_group.identifier) where (spectralink_group.identifier) = (($1->>'identifier')::integer) and (location.identifier) = (spectralink_group_location.location_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')) and
                      location.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_location_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_location_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_location_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ location;
    _department department;
begin
    if $1?'identifier' then
        select    location.*
        into      _
        from      location
        where     (location.identifier) = (($1->>'identifier')::integer) and
                  location.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'department' then
        _department = (select department from department where (department.identifier) = (($1->'department'->>'identifier')::integer) and department.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       location
        set          (name, cas_mode, department_identifier) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end,
                                   case when $1?'department' then coalesce(_department.identifier, null) else _.department_identifier end
                     )
        where        (location.identifier) = (_.identifier)
        returning    location.*
        into         _;
    elseif $2 then
        insert into    location(identifier, name, cas_mode, department_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_location_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end,
                       case when $1?'department' then coalesce(_department.identifier, null) else null end
        returning      location.*
        into           _;
    else
        return null;
    end if;

    if $1?'device' then
        with
        device as
        (
            update       device
            set          (location_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'device') as q
            where        (device.identifier) = ((q->>'identifier')::integer) and
                         device.cas_mode in('ACTIVE', 'INACTIVE')
            returning    device.identifier
        )
        update    device
        set       (location_identifier) = row(null)
        where     (device.location_identifier) = (_.identifier) and
                  (device.identifier) not in(select (device.identifier) from device) and
                  device.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'mis_connection_location' then
        with
        mis_connection_location as
        (
            update       mis_connection_location
            set          (location_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'mis_connection_location') as q
            where        (mis_connection_location.identifier) = ((q->>'identifier')::integer)
            returning    mis_connection_location.identifier
        )
        update    mis_connection_location
        set       (location_identifier) = row(null)
        where     (mis_connection_location.location_identifier) = (_.identifier) and
                  (mis_connection_location.identifier) not in(select (mis_connection_location.identifier) from mis_connection_location);
    end if;
    if $1?'rf_module' then
        with
        rf_module as
        (
            update       rf_module
            set          (location_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'rf_module') as q
            where        (rf_module.identifier) = ((q->>'identifier')::integer) and
                         rf_module.cas_mode in('ACTIVE', 'INACTIVE')
            returning    rf_module.identifier
        )
        update    rf_module
        set       (location_identifier) = row(null)
        where     (rf_module.location_identifier) = (_.identifier) and
                  (rf_module.identifier) not in(select (rf_module.identifier) from rf_module) and
                  rf_module.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'crew' then
        with
        crew as
        (
            select    crew.*
            from      crew, jsonb_array_elements($1->'crew') as q
            where     (crew.identifier) = ((q->>'identifier')::integer) and
                      crew.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        crew_location(location_identifier, crew_identifier) as
        (
            select    _.identifier, crew.identifier
            from      crew
        ),
        crew_location_orphan as
        (
            delete from    crew_location
            where          (crew_location.location_identifier) = (_.identifier) and
                           (crew_location.crew_identifier) not in(select (crew_location.crew_identifier) from crew_location)
        )
        insert into    crew_location(location_identifier, crew_identifier)
        select         crew_location.location_identifier, crew_location.crew_identifier
        from           crew_location
        on conflict do nothing;
    end if;
    if $1?'dect_group' then
        with
        dect_group as
        (
            select    dect_group.*
            from      dect_group, jsonb_array_elements($1->'dect_group') as q
            where     (dect_group.identifier) = ((q->>'identifier')::integer) and
                      dect_group.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        dect_group_location(location_identifier, dect_group_identifier) as
        (
            select    _.identifier, dect_group.identifier
            from      dect_group
        ),
        dect_group_location_orphan as
        (
            delete from    dect_group_location
            where          (dect_group_location.location_identifier) = (_.identifier) and
                           (dect_group_location.dect_group_identifier) not in(select (dect_group_location.dect_group_identifier) from dect_group_location)
        )
        insert into    dect_group_location(location_identifier, dect_group_identifier)
        select         dect_group_location.location_identifier, dect_group_location.dect_group_identifier
        from           dect_group_location
        on conflict do nothing;
    end if;
    if $1?'patient' then
        with
        patient as
        (
            select    patient.*
            from      patient, jsonb_array_elements($1->'patient') as q
            where     (patient.identifier) = ((q->>'identifier')::integer) and
                      patient.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        location_patient(location_identifier, patient_identifier) as
        (
            select    _.identifier, patient.identifier
            from      patient
        ),
        location_patient_orphan as
        (
            delete from    location_patient
            where          (location_patient.location_identifier) = (_.identifier) and
                           (location_patient.patient_identifier) not in(select (location_patient.patient_identifier) from location_patient)
        )
        insert into    location_patient(location_identifier, patient_identifier)
        select         location_patient.location_identifier, location_patient.patient_identifier
        from           location_patient
        on conflict do nothing;
    end if;
    if $1?'spectralink_group' then
        with
        spectralink_group as
        (
            select    spectralink_group.*
            from      spectralink_group, jsonb_array_elements($1->'spectralink_group') as q
            where     (spectralink_group.identifier) = ((q->>'identifier')::integer) and
                      spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        spectralink_group_location(location_identifier, spectralink_group_identifier) as
        (
            select    _.identifier, spectralink_group.identifier
            from      spectralink_group
        ),
        spectralink_group_location_orphan as
        (
            delete from    spectralink_group_location
            where          (spectralink_group_location.location_identifier) = (_.identifier) and
                           (spectralink_group_location.spectralink_group_identifier) not in(select (spectralink_group_location.spectralink_group_identifier) from spectralink_group_location)
        )
        insert into    spectralink_group_location(location_identifier, spectralink_group_identifier)
        select         spectralink_group_location.location_identifier, spectralink_group_location.spectralink_group_identifier
        from           spectralink_group_location
        on conflict do nothing;
    end if;
	
	if $1?'gateway' then
	with gws as 
	(
	   SELECT (obj ->> 'identifier')::integer as gateway_device_identifier 
		FROM jsonb_array_elements($1->'gateway') obj
	)
	DELETE FROM location_gateway_device_gateway 
	WHERE location_gateway_device_gateway.location_identifier = _.identifier 
	   AND location_gateway_device_gateway.device_identifier not in (select gateway_device_identifier from gws)
	;
	with gws as 
	(
	   SELECT (obj ->> 'identifier')::integer as gateway_device_identifier 
	   FROM jsonb_array_elements($1->'gateway') obj
	)
	INSERT INTO location_gateway_device_gateway (location_identifier, device_identifier) 	
	SELECT  _.identifier, gateway_device_identifier
			FROM gws 
			WHERE NOT EXISTS			
			  (SELECT location_gateway_device_gateway.location_identifier FROM location_gateway_device_gateway
			   WHERE location_gateway_device_gateway.location_identifier  = _.identifier
			  AND location_gateway_device_gateway.device_identifier = gws.gateway_device_identifier
	   );
	end if;
	
    --uitloggen bestaande care_sessions indien kamer naar 'DELETED' gaat.
	--Stop all care_sessions for this location, log out everyone.
	if $1?'cas_mode' then 
        if ($1->>'cas_mode')::cas_mode = 'DELETED' then
		    update care_session set timestamp_leave = now()-INTERVAL'5 minute', locked=false
		    where care_session.care_identifier = _.care_identifier and timestamp_leave is null;
	    end if;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', (select cas_version from location where identifier = _.identifier));
end
$_$;


ALTER FUNCTION public.cas_api_location_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_mis_connection_department_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_mis_connection_department_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', mis_connection_department.identifier,
                  'identification', mis_connection_department.identification,
                  'mis_mode', mis_connection_department.mis_mode,
                  'cas_version', mis_connection_department.cas_version,
                  'department', (select jsonb_build_object('identifier', department.identifier) from department where (mis_connection_department.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      mis_connection_department;
end
$$;


ALTER FUNCTION public.cas_api_mis_connection_department_get() OWNER TO aperi;

--
-- Name: cas_api_mis_connection_department_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_mis_connection_department_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', mis_connection_department.identifier,
                      'identification', mis_connection_department.identification,
                      'mis_mode', mis_connection_department.mis_mode,
                      'cas_version', mis_connection_department.cas_version,
                      'department', (select jsonb_build_object('identifier', department.identifier) from department where (mis_connection_department.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      mis_connection_department
        where     (mis_connection_department.identifier) = (($1->>'identifier')::integer);
    end if;

    case $2
        when 'department' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', mis_connection_department.identifier,
                          'identification', mis_connection_department.identification,
                          'mis_mode', mis_connection_department.mis_mode,
                          'cas_version', mis_connection_department.cas_version,
                          'department', (select jsonb_build_object('identifier', department.identifier) from department where (mis_connection_department.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      mis_connection_department
            where     exists(select from department where (department.identifier) = (($1->>'identifier')::integer) and (mis_connection_department.department_identifier) = (department.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE'));
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_mis_connection_department_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_mis_connection_department_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_mis_connection_department_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ mis_connection_department;
    _department department;
begin
    if $1?'identifier' then
        select    mis_connection_department.*
        into      _
        from      mis_connection_department
        where     (mis_connection_department.identifier) = (($1->>'identifier')::integer);
    end if;
    if $1?'department' then
        _department = (select department from department where (department.identifier) = (($1->'department'->>'identifier')::integer) and department.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       mis_connection_department
        set          (identification, mis_mode, department_identifier) =
                     (
                         select    case when $1?'identification' then ($1->>'identification')::jsonb else _.identification::jsonb end,
                                   case when $1?'mis_mode' then ($1->>'mis_mode')::mis_mode else _.mis_mode::mis_mode end,
                                   case when $1?'department' then coalesce(_department.identifier, null) else _.department_identifier end
                     )
        where        (mis_connection_department.identifier) = (_.identifier)
        returning    mis_connection_department.*
        into         _;
    elseif $2 then
        insert into    mis_connection_department(identifier, identification, mis_mode, department_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('mis_connection_department_identifier_seq'::regclass)::integer end,
                       case when $1?'identification' then ($1->>'identification')::jsonb else null::jsonb end,
                       case when $1?'mis_mode' then ($1->>'mis_mode')::mis_mode else 'PRESENT'::mis_mode::mis_mode end,
                       case when $1?'department' then coalesce(_department.identifier, null) else null end
        returning      mis_connection_department.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_mis_connection_department_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_mis_connection_employee_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_mis_connection_employee_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', mis_connection_employee.identifier,
                  'identification', mis_connection_employee.identification,
                  'mis_mode', mis_connection_employee.mis_mode,
                  'cas_version', mis_connection_employee.cas_version,
                  'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (mis_connection_employee.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      mis_connection_employee;
end
$$;


ALTER FUNCTION public.cas_api_mis_connection_employee_get() OWNER TO aperi;

--
-- Name: cas_api_mis_connection_employee_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_mis_connection_employee_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', mis_connection_employee.identifier,
                      'identification', mis_connection_employee.identification,
                      'mis_mode', mis_connection_employee.mis_mode,
                      'cas_version', mis_connection_employee.cas_version,
                      'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (mis_connection_employee.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      mis_connection_employee
        where     (mis_connection_employee.identifier) = (($1->>'identifier')::integer);
    end if;

    case $2
        when 'employee' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', mis_connection_employee.identifier,
                          'identification', mis_connection_employee.identification,
                          'mis_mode', mis_connection_employee.mis_mode,
                          'cas_version', mis_connection_employee.cas_version,
                          'employee', (select jsonb_build_object('identifier', employee.identifier) from employee where (mis_connection_employee.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      mis_connection_employee
            where     exists(select from employee where (employee.identifier) = (($1->>'identifier')::integer) and (mis_connection_employee.employee_identifier) = (employee.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE'));
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_mis_connection_employee_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_mis_connection_employee_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_mis_connection_employee_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ mis_connection_employee;
    _employee employee;
begin
    if $1?'identifier' then
        select    mis_connection_employee.*
        into      _
        from      mis_connection_employee
        where     (mis_connection_employee.identifier) = (($1->>'identifier')::integer);
    end if;
    if $1?'employee' then
        _employee = (select employee from employee where (employee.identifier) = (($1->'employee'->>'identifier')::integer) and employee.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       mis_connection_employee
        set          (identification, mis_mode, employee_identifier) =
                     (
                         select    case when $1?'identification' then ($1->>'identification')::jsonb else _.identification::jsonb end,
                                   case when $1?'mis_mode' then ($1->>'mis_mode')::mis_mode else _.mis_mode::mis_mode end,
                                   case when $1?'employee' then coalesce(_employee.identifier, null) else _.employee_identifier end
                     )
        where        (mis_connection_employee.identifier) = (_.identifier)
        returning    mis_connection_employee.*
        into         _;
    elseif $2 then
        insert into    mis_connection_employee(identifier, identification, mis_mode, employee_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('mis_connection_employee_identifier_seq'::regclass)::integer end,
                       case when $1?'identification' then ($1->>'identification')::jsonb else null::jsonb end,
                       case when $1?'mis_mode' then ($1->>'mis_mode')::mis_mode else 'PRESENT'::mis_mode::mis_mode end,
                       case when $1?'employee' then coalesce(_employee.identifier, null) else null end
        returning      mis_connection_employee.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_mis_connection_employee_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_mis_connection_location_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_mis_connection_location_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', mis_connection_location.identifier,
                  'identification', mis_connection_location.identification,
                  'mis_mode', mis_connection_location.mis_mode,
                  'cas_version', mis_connection_location.cas_version,
                  'location', (select jsonb_build_object('identifier', location.identifier) from location where (mis_connection_location.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      mis_connection_location;
end
$$;


ALTER FUNCTION public.cas_api_mis_connection_location_get() OWNER TO aperi;

--
-- Name: cas_api_mis_connection_location_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_mis_connection_location_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', mis_connection_location.identifier,
                      'identification', mis_connection_location.identification,
                      'mis_mode', mis_connection_location.mis_mode,
                      'cas_version', mis_connection_location.cas_version,
                      'location', (select jsonb_build_object('identifier', location.identifier) from location where (mis_connection_location.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      mis_connection_location
        where     (mis_connection_location.identifier) = (($1->>'identifier')::integer);
    end if;

    case $2
        when 'location' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', mis_connection_location.identifier,
                          'identification', mis_connection_location.identification,
                          'mis_mode', mis_connection_location.mis_mode,
                          'cas_version', mis_connection_location.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location where (mis_connection_location.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      mis_connection_location
            where     exists(select from location where (location.identifier) = (($1->>'identifier')::integer) and (mis_connection_location.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE'));
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_mis_connection_location_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_mis_connection_location_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_mis_connection_location_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ mis_connection_location;
    _location location;
begin
    if $1?'identifier' then
        select    mis_connection_location.*
        into      _
        from      mis_connection_location
        where     (mis_connection_location.identifier) = (($1->>'identifier')::integer);
    end if;
    if $1?'location' then
        _location = (select location from location where (location.identifier) = (($1->'location'->>'identifier')::integer) and location.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       mis_connection_location
        set          (identification, mis_mode, location_identifier) =
                     (
                         select    case when $1?'identification' then ($1->>'identification')::jsonb else _.identification::jsonb end,
                                   case when $1?'mis_mode' then ($1->>'mis_mode')::mis_mode else _.mis_mode::mis_mode end,
                                   case when $1?'location' then coalesce(_location.identifier, null) else _.location_identifier end
                     )
        where        (mis_connection_location.identifier) = (_.identifier)
        returning    mis_connection_location.*
        into         _;
    elseif $2 then
        insert into    mis_connection_location(identifier, identification, mis_mode, location_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('mis_connection_location_identifier_seq'::regclass)::integer end,
                       case when $1?'identification' then ($1->>'identification')::jsonb else null::jsonb end,
                       case when $1?'mis_mode' then ($1->>'mis_mode')::mis_mode else 'PRESENT'::mis_mode::mis_mode end,
                       case when $1?'location' then coalesce(_location.identifier, null) else null end
        returning      mis_connection_location.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_mis_connection_location_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_mis_connection_patient_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_mis_connection_patient_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', mis_connection_patient.identifier,
                  'identification', mis_connection_patient.identification,
                  'mis_mode', mis_connection_patient.mis_mode,
                  'cas_version', mis_connection_patient.cas_version,
                  'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (mis_connection_patient.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      mis_connection_patient;
end
$$;


ALTER FUNCTION public.cas_api_mis_connection_patient_get() OWNER TO aperi;

--
-- Name: cas_api_mis_connection_patient_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_mis_connection_patient_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', mis_connection_patient.identifier,
                      'identification', mis_connection_patient.identification,
                      'mis_mode', mis_connection_patient.mis_mode,
                      'cas_version', mis_connection_patient.cas_version,
                      'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (mis_connection_patient.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      mis_connection_patient
        where     (mis_connection_patient.identifier) = (($1->>'identifier')::integer);
    end if;

    case $2
        when 'patient' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', mis_connection_patient.identifier,
                          'identification', mis_connection_patient.identification,
                          'mis_mode', mis_connection_patient.mis_mode,
                          'cas_version', mis_connection_patient.cas_version,
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (mis_connection_patient.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      mis_connection_patient
            where     exists(select from patient where (patient.identifier) = (($1->>'identifier')::integer) and (mis_connection_patient.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE'));
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_mis_connection_patient_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_mis_connection_patient_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_mis_connection_patient_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ mis_connection_patient;
    _patient patient;
begin
    if $1?'identifier' then
        select    mis_connection_patient.*
        into      _
        from      mis_connection_patient
        where     (mis_connection_patient.identifier) = (($1->>'identifier')::integer);
    end if;
    if $1?'patient' then
        _patient = (select patient from patient where (patient.identifier) = (($1->'patient'->>'identifier')::integer) and patient.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       mis_connection_patient
        set          (identification, mis_mode, patient_identifier) =
                     (
                         select    case when $1?'identification' then ($1->>'identification')::jsonb else _.identification::jsonb end,
                                   case when $1?'mis_mode' then ($1->>'mis_mode')::mis_mode else _.mis_mode::mis_mode end,
                                   case when $1?'patient' then coalesce(_patient.identifier, null) else _.patient_identifier end
                     )
        where        (mis_connection_patient.identifier) = (_.identifier)
        returning    mis_connection_patient.*
        into         _;
    elseif $2 then
        insert into    mis_connection_patient(identifier, identification, mis_mode, patient_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('mis_connection_patient_identifier_seq'::regclass)::integer end,
                       case when $1?'identification' then ($1->>'identification')::jsonb else null::jsonb end,
                       case when $1?'mis_mode' then ($1->>'mis_mode')::mis_mode else 'PRESENT'::mis_mode::mis_mode end,
                       case when $1?'patient' then coalesce(_patient.identifier, null) else null end
        returning      mis_connection_patient.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_mis_connection_patient_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_patient_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_patient_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', patient.identifier,
                  'first_name', patient.first_name,
                  'last_name', patient.last_name,
                  'sex', patient.sex,
                  'cas_mode', patient.cas_mode,
                  'cas_version', patient.cas_version,
                  'location', (select jsonb_build_object('identifier', location.identifier) from location inner join location_patient on (location_patient.location_identifier) = (location.identifier) where (patient.identifier) = (location_patient.patient_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                  'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.patient_identifier) = (patient.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                  'email', cas_api_email_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                  'mis_connection_patient', cas_api_mis_connection_patient_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                  'patient_identification', cas_api_patient_identification_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                  'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.patient_identifier) = (patient.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      patient
    where     patient.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_patient_get() OWNER TO aperi;

--
-- Name: cas_api_patient_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_patient_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', patient.identifier,
                      'first_name', patient.first_name,
                      'last_name', patient.last_name,
                      'sex', patient.sex,
                      'cas_mode', patient.cas_mode,
                      'cas_version', patient.cas_version,
                      'location', (select jsonb_build_object('identifier', location.identifier) from location inner join location_patient on (location_patient.location_identifier) = (location.identifier) where (patient.identifier) = (location_patient.patient_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                      'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.patient_identifier) = (patient.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                      'email', cas_api_email_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                      'mis_connection_patient', cas_api_mis_connection_patient_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                      'patient_identification', cas_api_patient_identification_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                      'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.patient_identifier) = (patient.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      patient
        where     (patient.identifier) = (($1->>'identifier')::integer) and
                  patient.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'location' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', patient.identifier,
                          'first_name', patient.first_name,
                          'last_name', patient.last_name,
                          'sex', patient.sex,
                          'cas_mode', patient.cas_mode,
                          'cas_version', patient.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location inner join location_patient on (location_patient.location_identifier) = (location.identifier) where (patient.identifier) = (location_patient.patient_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.patient_identifier) = (patient.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                          'email', cas_api_email_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'mis_connection_patient', cas_api_mis_connection_patient_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'patient_identification', cas_api_patient_identification_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.patient_identifier) = (patient.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      patient
            where     exists(select from location inner join location_patient on (location_patient.location_identifier) = (location.identifier) where (location.identifier) = (($1->>'identifier')::integer) and (patient.identifier) = (location_patient.patient_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')) and
                      patient.cas_mode in('ACTIVE', 'INACTIVE');
        when 'badge' then
            return    jsonb_build_object(
                          'identifier', patient.identifier,
                          'first_name', patient.first_name,
                          'last_name', patient.last_name,
                          'sex', patient.sex,
                          'cas_mode', patient.cas_mode,
                          'cas_version', patient.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location inner join location_patient on (location_patient.location_identifier) = (location.identifier) where (patient.identifier) = (location_patient.patient_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.patient_identifier) = (patient.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                          'email', cas_api_email_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'mis_connection_patient', cas_api_mis_connection_patient_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'patient_identification', cas_api_patient_identification_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.patient_identifier) = (patient.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      patient
            where     exists(select from badge where (badge.identifier) = (($1->>'identifier')::integer) and (badge.patient_identifier) = (patient.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')) and
                      patient.cas_mode in('ACTIVE', 'INACTIVE');
        when 'email' then
            return    jsonb_build_object(
                          'identifier', patient.identifier,
                          'first_name', patient.first_name,
                          'last_name', patient.last_name,
                          'sex', patient.sex,
                          'cas_mode', patient.cas_mode,
                          'cas_version', patient.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location inner join location_patient on (location_patient.location_identifier) = (location.identifier) where (patient.identifier) = (location_patient.patient_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.patient_identifier) = (patient.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                          'email', cas_api_email_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'mis_connection_patient', cas_api_mis_connection_patient_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'patient_identification', cas_api_patient_identification_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.patient_identifier) = (patient.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      patient
            where     exists(select from email where (email.identifier) = (($1->>'identifier')::integer) and (email.patient_identifier) = (patient.identifier)) and
                      patient.cas_mode in('ACTIVE', 'INACTIVE');
        when 'mis_connection_patient' then
            return    jsonb_build_object(
                          'identifier', patient.identifier,
                          'first_name', patient.first_name,
                          'last_name', patient.last_name,
                          'sex', patient.sex,
                          'cas_mode', patient.cas_mode,
                          'cas_version', patient.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location inner join location_patient on (location_patient.location_identifier) = (location.identifier) where (patient.identifier) = (location_patient.patient_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.patient_identifier) = (patient.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                          'email', cas_api_email_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'mis_connection_patient', cas_api_mis_connection_patient_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'patient_identification', cas_api_patient_identification_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.patient_identifier) = (patient.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      patient
            where     exists(select from mis_connection_patient where (mis_connection_patient.identifier) = (($1->>'identifier')::integer) and (mis_connection_patient.patient_identifier) = (patient.identifier)) and
                      patient.cas_mode in('ACTIVE', 'INACTIVE');
        when 'patient_identification' then
            return    jsonb_build_object(
                          'identifier', patient.identifier,
                          'first_name', patient.first_name,
                          'last_name', patient.last_name,
                          'sex', patient.sex,
                          'cas_mode', patient.cas_mode,
                          'cas_version', patient.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location inner join location_patient on (location_patient.location_identifier) = (location.identifier) where (patient.identifier) = (location_patient.patient_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.patient_identifier) = (patient.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                          'email', cas_api_email_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'mis_connection_patient', cas_api_mis_connection_patient_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'patient_identification', cas_api_patient_identification_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.patient_identifier) = (patient.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      patient
            where     exists(select from patient_identification where (patient_identification.identifier) = (($1->>'identifier')::integer) and (patient_identification.patient_identifier) = (patient.identifier)) and
                      patient.cas_mode in('ACTIVE', 'INACTIVE');
        when 'rf_module' then
            return    jsonb_build_object(
                          'identifier', patient.identifier,
                          'first_name', patient.first_name,
                          'last_name', patient.last_name,
                          'sex', patient.sex,
                          'cas_mode', patient.cas_mode,
                          'cas_version', patient.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location inner join location_patient on (location_patient.location_identifier) = (location.identifier) where (patient.identifier) = (location_patient.patient_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'badge', array(select jsonb_build_object('identifier', badge.identifier) from badge where (badge.patient_identifier) = (patient.identifier) and badge.cas_mode in('ACTIVE', 'INACTIVE')),
                          'email', cas_api_email_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'mis_connection_patient', cas_api_mis_connection_patient_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'patient_identification', cas_api_patient_identification_get(jsonb_build_object('identifier', patient.identifier), 'patient'),
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.patient_identifier) = (patient.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      patient
            where     exists(select from rf_module where (rf_module.identifier) = (($1->>'identifier')::integer) and (rf_module.patient_identifier) = (patient.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')) and
                      patient.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_patient_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_patient_identification_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_patient_identification_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', patient_identification.identifier,
                  'key', patient_identification.key,
                  'value', patient_identification.value,
                  'cas_version', patient_identification.cas_version,
                  'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (patient_identification.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      patient_identification;
end
$$;


ALTER FUNCTION public.cas_api_patient_identification_get() OWNER TO aperi;

--
-- Name: cas_api_patient_identification_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_patient_identification_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', patient_identification.identifier,
                      'key', patient_identification.key,
                      'value', patient_identification.value,
                      'cas_version', patient_identification.cas_version,
                      'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (patient_identification.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      patient_identification
        where     (patient_identification.identifier) = (($1->>'identifier')::integer);
    end if;

    case $2
        when 'patient' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', patient_identification.identifier,
                          'key', patient_identification.key,
                          'value', patient_identification.value,
                          'cas_version', patient_identification.cas_version,
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (patient_identification.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      patient_identification
            where     exists(select from patient where (patient.identifier) = (($1->>'identifier')::integer) and (patient_identification.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE'));
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_patient_identification_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_patient_identification_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_patient_identification_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ patient_identification;
    _patient patient;
begin
    if $1?'identifier' then
        select    patient_identification.*
        into      _
        from      patient_identification
        where     (patient_identification.identifier) = (($1->>'identifier')::integer);
    end if;
    if $1?'patient' then
        _patient = (select patient from patient where (patient.identifier) = (($1->'patient'->>'identifier')::integer) and patient.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       patient_identification
        set          (key, value, patient_identifier) =
                     (
                         select    case when $1?'key' then ($1->>'key')::text else _.key::text end,
                                   case when $1?'value' then ($1->>'value')::text else _.value::text end,
                                   case when $1?'patient' then coalesce(_patient.identifier, null) else _.patient_identifier end
                     )
        where        (patient_identification.identifier) = (_.identifier)
        returning    patient_identification.*
        into         _;
    elseif $2 then
        insert into    patient_identification(identifier, key, value, patient_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('patient_identification_identifier_seq'::regclass)::integer end,
                       case when $1?'key' then ($1->>'key')::text else null::text end,
                       case when $1?'value' then ($1->>'value')::text else null::text end,
                       case when $1?'patient' then coalesce(_patient.identifier, null) else null end
        returning      patient_identification.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_patient_identification_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_patient_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_patient_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
    declare
        _ patient;

    begin
        if $1?'identifier' then
            select    patient.*
            into      _
            from      patient
            where     (patient.identifier) = (($1->>'identifier')::integer) and
                    patient.cas_mode in('ACTIVE', 'INACTIVE');
        end if;


        if _.identifier is not null then
            update       patient
            set          (first_name, last_name, sex, cas_mode) =
                        (
                            select    case when $1?'first_name' then ($1->>'first_name')::text else _.first_name::text end,
                                    case when $1?'last_name' then ($1->>'last_name')::text else _.last_name::text end,
                                    case when $1?'sex' then ($1->>'sex')::text else _.sex::text end,
                                    case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                        )
            where        (patient.identifier) = (_.identifier)
            returning    patient.*
            into         _;
        elseif $2 then
            insert into    patient(identifier, first_name, last_name, sex, cas_mode)
            select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_patient_identifier'::regclass)::integer end,
                        case when $1?'first_name' then ($1->>'first_name')::text else null::text end,
                        case when $1?'last_name' then ($1->>'last_name')::text else null::text end,
                        case when $1?'sex' then ($1->>'sex')::text else null::text end,
                        case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
            returning      patient.*
            into           _;
        else
            return null;
        end if;

        if $1?'badge' then
            with
            badge as
            (
                update       badge
                set          (patient_identifier) = row(_.identifier)
                from         jsonb_array_elements($1->'badge') as q
                where        (badge.identifier) = ((q->>'identifier')::integer) and
                            badge.cas_mode in('ACTIVE', 'INACTIVE')
                returning    badge.identifier
            )
            update    badge
            set       (patient_identifier) = row(null)
            where     (badge.patient_identifier) = (_.identifier) and
                    (badge.identifier) not in(select (badge.identifier) from badge) and
                    badge.cas_mode in('ACTIVE', 'INACTIVE');
        end if;
        if $1?'email' then
            with
            email as
            (
                update       email
                set          (patient_identifier) = row(_.identifier)
                from         jsonb_array_elements($1->'email') as q
                where        (email.identifier) = ((q->>'identifier')::integer)
                returning    email.identifier
            )
            update    email
            set       (patient_identifier) = row(null)
            where     (email.patient_identifier) = (_.identifier) and
                    (email.identifier) not in(select (email.identifier) from email);
        end if;
        if $1?'mis_connection_patient' then
            with
            mis_connection_patient as
            (
                update       mis_connection_patient
                set          (patient_identifier) = row(_.identifier)
                from         jsonb_array_elements($1->'mis_connection_patient') as q
                where        (mis_connection_patient.identifier) = ((q->>'identifier')::integer)
                returning    mis_connection_patient.identifier
            )
            update    mis_connection_patient
            set       (patient_identifier) = row(null)
            where     (mis_connection_patient.patient_identifier) = (_.identifier) and
                    (mis_connection_patient.identifier) not in(select (mis_connection_patient.identifier) from mis_connection_patient);
        end if;
        if $1?'patient_identification' then -- !!! CUSTOM !!!
            with
            patient_identification as
            (
                insert into    patient_identification(key, value, patient_identifier)
                select         patient_identification->>'key', patient_identification->>'value', _.identifier
                from           jsonb_array_elements($1->'patient_identification') as patient_identification
                on conflict    (patient_identifier, key)
                do update
                set            value = excluded.value
                returning      patient_identification.identifier
            )
            delete from    patient_identification
            where          (patient_identification.patient_identifier) = (_.identifier) and
                        (patient_identification.identifier) not in(select (patient_identification.identifier) from patient_identification);
        end if;
        if $1?'rf_module' then
            with
            rf_module as
            (
                update       rf_module
                set          (patient_identifier) = row(_.identifier)
                from         jsonb_array_elements($1->'rf_module') as q
                where        (rf_module.identifier) = ((q->>'identifier')::integer) and
                            rf_module.cas_mode in('ACTIVE', 'INACTIVE')
                returning    rf_module.identifier
            )
            update    rf_module
            set       (patient_identifier) = row(null)
            where     (rf_module.patient_identifier) = (_.identifier) and
                    (rf_module.identifier) not in(select (rf_module.identifier) from rf_module) and
                    rf_module.cas_mode in('ACTIVE', 'INACTIVE');
        end if;
        if $1?'location' then
            delete from location_patient where patient_identifier = _.identifier and location_identifier <> (($1->'location'->>'identifier')::integer);		
            insert into location_patient (location_identifier, patient_identifier)
            select (($1->'location'->>'identifier')::integer),_.identifier	
            on conflict do nothing;
        end if;    
        return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
    end
    $_$;


ALTER FUNCTION public.cas_api_patient_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_possible_work_order_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_possible_work_order_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', possible_work_order.identifier,
                  'name', possible_work_order.name,
                  'code', possible_work_order.code,
                  'cas_mode', possible_work_order.cas_mode,
                  'cas_version', possible_work_order.cas_version,
                  'possible_work_order_top', (select jsonb_build_object('identifier', possible_work_order_top.identifier) from possible_work_order_top where (possible_work_order.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE')),
                  'role', array(select jsonb_build_object('identifier', role.identifier) from role inner join possible_work_order_role on (possible_work_order_role.role_identifier) = (role.identifier) where (possible_work_order.identifier) = (possible_work_order_role.possible_work_order_identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      possible_work_order
    where     possible_work_order.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_possible_work_order_get() OWNER TO aperi;

--
-- Name: cas_api_possible_work_order_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_possible_work_order_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', possible_work_order.identifier,
                      'name', possible_work_order.name,
                      'code', possible_work_order.code,
                      'cas_mode', possible_work_order.cas_mode,
                      'cas_version', possible_work_order.cas_version,
                      'possible_work_order_top', (select jsonb_build_object('identifier', possible_work_order_top.identifier) from possible_work_order_top where (possible_work_order.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE')),
                      'role', array(select jsonb_build_object('identifier', role.identifier) from role inner join possible_work_order_role on (possible_work_order_role.role_identifier) = (role.identifier) where (possible_work_order.identifier) = (possible_work_order_role.possible_work_order_identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      possible_work_order
        where     (possible_work_order.identifier) = (($1->>'identifier')::integer) and
                  possible_work_order.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'possible_work_order_top' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', possible_work_order.identifier,
                          'name', possible_work_order.name,
                          'code', possible_work_order.code,
                          'cas_mode', possible_work_order.cas_mode,
                          'cas_version', possible_work_order.cas_version,
                          'possible_work_order_top', (select jsonb_build_object('identifier', possible_work_order_top.identifier) from possible_work_order_top where (possible_work_order.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE')),
                          'role', array(select jsonb_build_object('identifier', role.identifier) from role inner join possible_work_order_role on (possible_work_order_role.role_identifier) = (role.identifier) where (possible_work_order.identifier) = (possible_work_order_role.possible_work_order_identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      possible_work_order
            where     exists(select from possible_work_order_top where (possible_work_order_top.identifier) = (($1->>'identifier')::integer) and (possible_work_order.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE')) and
                      possible_work_order.cas_mode in('ACTIVE', 'INACTIVE');
        when 'role' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', possible_work_order.identifier,
                          'name', possible_work_order.name,
                          'code', possible_work_order.code,
                          'cas_mode', possible_work_order.cas_mode,
                          'cas_version', possible_work_order.cas_version,
                          'possible_work_order_top', (select jsonb_build_object('identifier', possible_work_order_top.identifier) from possible_work_order_top where (possible_work_order.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE')),
                          'role', array(select jsonb_build_object('identifier', role.identifier) from role inner join possible_work_order_role on (possible_work_order_role.role_identifier) = (role.identifier) where (possible_work_order.identifier) = (possible_work_order_role.possible_work_order_identifier) and role.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      possible_work_order
            where     exists(select from role inner join possible_work_order_role on (possible_work_order_role.role_identifier) = (role.identifier) where (role.identifier) = (($1->>'identifier')::integer) and (possible_work_order.identifier) = (possible_work_order_role.possible_work_order_identifier) and role.cas_mode in('ACTIVE', 'INACTIVE')) and
                      possible_work_order.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_possible_work_order_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_possible_work_order_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_possible_work_order_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ possible_work_order;
    _possible_work_order_top possible_work_order_top;
begin
    if $1?'identifier' then
        select    possible_work_order.*
        into      _
        from      possible_work_order
        where     (possible_work_order.identifier) = (($1->>'identifier')::integer) and
                  possible_work_order.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'possible_work_order_top' then
        _possible_work_order_top = (select possible_work_order_top from possible_work_order_top where (possible_work_order_top.identifier) = (($1->'possible_work_order_top'->>'identifier')::integer) and possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       possible_work_order
        set          (name, code, cas_mode, possible_work_order_top_identifier) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'code' then ($1->>'code')::text else _.code::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end,
                                   case when $1?'possible_work_order_top' then coalesce(_possible_work_order_top.identifier, null) else _.possible_work_order_top_identifier end
                     )
        where        (possible_work_order.identifier) = (_.identifier)
        returning    possible_work_order.*
        into         _;
    elseif $2 then
        insert into    possible_work_order(identifier, name, code, cas_mode, possible_work_order_top_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_possible_work_order_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'code' then ($1->>'code')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end,
                       case when $1?'possible_work_order_top' then coalesce(_possible_work_order_top.identifier, null) else null end
        returning      possible_work_order.*
        into           _;
    else
        return null;
    end if;

    if $1?'role' then
        with
        role as
        (
            select    role.*
            from      role, jsonb_array_elements($1->'role') as q
            where     (role.identifier) = ((q->>'identifier')::integer) and
                      role.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        possible_work_order_role(possible_work_order_identifier, role_identifier) as
        (
            select    _.identifier, role.identifier
            from      role
        ),
        possible_work_order_role_orphan as
        (
            delete from    possible_work_order_role
            where          (possible_work_order_role.possible_work_order_identifier) = (_.identifier) and
                           (possible_work_order_role.role_identifier) not in(select (possible_work_order_role.role_identifier) from possible_work_order_role)
        )
        insert into    possible_work_order_role(possible_work_order_identifier, role_identifier)
        select         possible_work_order_role.possible_work_order_identifier, possible_work_order_role.role_identifier
        from           possible_work_order_role
        on conflict do nothing;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_possible_work_order_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_possible_work_order_top_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_possible_work_order_top_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', possible_work_order_top.identifier,
                  'name', possible_work_order_top.name,
                  'cas_mode', possible_work_order_top.cas_mode,
                  'cas_version', possible_work_order_top.cas_version,
                  'email', cas_api_email_get(jsonb_build_object('identifier', possible_work_order_top.identifier), 'possible_work_order_top'),
                  'possible_work_order', array(select jsonb_build_object('identifier', possible_work_order.identifier) from possible_work_order where (possible_work_order.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      possible_work_order_top
    where     possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_possible_work_order_top_get() OWNER TO aperi;

--
-- Name: cas_api_possible_work_order_top_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_possible_work_order_top_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', possible_work_order_top.identifier,
                      'name', possible_work_order_top.name,
                      'cas_mode', possible_work_order_top.cas_mode,
                      'cas_version', possible_work_order_top.cas_version,
                      'email', cas_api_email_get(jsonb_build_object('identifier', possible_work_order_top.identifier), 'possible_work_order_top'),
                      'possible_work_order', array(select jsonb_build_object('identifier', possible_work_order.identifier) from possible_work_order where (possible_work_order.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      possible_work_order_top
        where     (possible_work_order_top.identifier) = (($1->>'identifier')::integer) and
                  possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'email' then
            return    jsonb_build_object(
                          'identifier', possible_work_order_top.identifier,
                          'name', possible_work_order_top.name,
                          'cas_mode', possible_work_order_top.cas_mode,
                          'cas_version', possible_work_order_top.cas_version,
                          'email', cas_api_email_get(jsonb_build_object('identifier', possible_work_order_top.identifier), 'possible_work_order_top'),
                          'possible_work_order', array(select jsonb_build_object('identifier', possible_work_order.identifier) from possible_work_order where (possible_work_order.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      possible_work_order_top
            where     exists(select from email where (email.identifier) = (($1->>'identifier')::integer) and (email.possible_work_order_top_identifier) = (possible_work_order_top.identifier)) and
                      possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE');
        when 'possible_work_order' then
            return    jsonb_build_object(
                          'identifier', possible_work_order_top.identifier,
                          'name', possible_work_order_top.name,
                          'cas_mode', possible_work_order_top.cas_mode,
                          'cas_version', possible_work_order_top.cas_version,
                          'email', cas_api_email_get(jsonb_build_object('identifier', possible_work_order_top.identifier), 'possible_work_order_top'),
                          'possible_work_order', array(select jsonb_build_object('identifier', possible_work_order.identifier) from possible_work_order where (possible_work_order.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      possible_work_order_top
            where     exists(select from possible_work_order where (possible_work_order.identifier) = (($1->>'identifier')::integer) and (possible_work_order.possible_work_order_top_identifier) = (possible_work_order_top.identifier) and possible_work_order.cas_mode in('ACTIVE', 'INACTIVE')) and
                      possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_possible_work_order_top_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_possible_work_order_top_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_possible_work_order_top_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ possible_work_order_top;

begin
    if $1?'identifier' then
        select    possible_work_order_top.*
        into      _
        from      possible_work_order_top
        where     (possible_work_order_top.identifier) = (($1->>'identifier')::integer) and
                  possible_work_order_top.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       possible_work_order_top
        set          (name, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (possible_work_order_top.identifier) = (_.identifier)
        returning    possible_work_order_top.*
        into         _;
    elseif $2 then
        insert into    possible_work_order_top(identifier, name, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_possible_work_order_top_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      possible_work_order_top.*
        into           _;
    else
        return null;
    end if;

    if $1?'email' then -- !!! CUSTOM !!!
        with
        email_input(address) as
        (
            select    email->>'address'
            from      jsonb_array_elements($1->'email') as email
        ),
        email_insert as
        (
            insert into    email(possible_work_order_top_identifier, address)
            select         _.identifier, email_input.address
            from           email_input
            on conflict    (possible_work_order_top_identifier, address)
            do nothing
        )
        delete from    email
        where          email.possible_work_order_top_identifier = _.identifier and
                       email.address not in(select email_input.address from email_input);
    end if;
    if $1?'possible_work_order' then
        with
        possible_work_order as
        (
            update       possible_work_order
            set          (possible_work_order_top_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'possible_work_order') as q
            where        (possible_work_order.identifier) = ((q->>'identifier')::integer) and
                         possible_work_order.cas_mode in('ACTIVE', 'INACTIVE')
            returning    possible_work_order.identifier
        )
        update    possible_work_order
        set       (possible_work_order_top_identifier) = row(null)
        where     (possible_work_order.possible_work_order_top_identifier) = (_.identifier) and
                  (possible_work_order.identifier) not in(select (possible_work_order.identifier) from possible_work_order) and
                  possible_work_order.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_possible_work_order_top_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_rf_module_brand_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_rf_module_brand_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', rf_module_brand.identifier,
                  'name', rf_module_brand.name,
                  'cas_mode', rf_module_brand.cas_mode,
                  'cas_version', rf_module_brand.cas_version,
                  'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.brand_identifier) = (rf_module_brand.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      rf_module_brand
    where     rf_module_brand.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_rf_module_brand_get() OWNER TO aperi;

--
-- Name: cas_api_rf_module_brand_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_rf_module_brand_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', rf_module_brand.identifier,
                      'name', rf_module_brand.name,
                      'cas_mode', rf_module_brand.cas_mode,
                      'cas_version', rf_module_brand.cas_version,
                      'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.brand_identifier) = (rf_module_brand.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      rf_module_brand
        where     (rf_module_brand.identifier) = (($1->>'identifier')::integer) and
                  rf_module_brand.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'rf_module' then
            return    jsonb_build_object(
                          'identifier', rf_module_brand.identifier,
                          'name', rf_module_brand.name,
                          'cas_mode', rf_module_brand.cas_mode,
                          'cas_version', rf_module_brand.cas_version,
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.brand_identifier) = (rf_module_brand.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      rf_module_brand
            where     exists(select from rf_module where (rf_module.identifier) = (($1->>'identifier')::integer) and (rf_module.brand_identifier) = (rf_module_brand.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')) and
                      rf_module_brand.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_rf_module_brand_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_rf_module_brand_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_rf_module_brand_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ rf_module_brand;

begin
    if $1?'identifier' then
        select    rf_module_brand.*
        into      _
        from      rf_module_brand
        where     (rf_module_brand.identifier) = (($1->>'identifier')::integer) and
                  rf_module_brand.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       rf_module_brand
        set          (name, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (rf_module_brand.identifier) = (_.identifier)
        returning    rf_module_brand.*
        into         _;
    elseif $2 then
        insert into    rf_module_brand(identifier, name, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else null::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      rf_module_brand.*
        into           _;
    else
        return null;
    end if;

    if $1?'rf_module' then
        with
        rf_module as
        (
            update       rf_module
            set          (brand_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'rf_module') as q
            where        (rf_module.identifier) = ((q->>'identifier')::integer) and
                         rf_module.cas_mode in('ACTIVE', 'INACTIVE')
            returning    rf_module.identifier
        )
        update    rf_module
        set       (brand_identifier) = row(null)
        where     (rf_module.brand_identifier) = (_.identifier) and
                  (rf_module.identifier) not in(select (rf_module.identifier) from rf_module) and
                  rf_module.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_rf_module_brand_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_rf_module_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_rf_module_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', rf_module.identifier,
                  'serial', rf_module.serial,
                  'cas_mode', rf_module.cas_mode,
                  'cas_version', rf_module.cas_version,
                  'location', (select jsonb_build_object('identifier', location.identifier) from location where (rf_module.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                  'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (rf_module.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                  'rf_module_brand', (select jsonb_build_object('identifier', rf_module_brand.identifier) from rf_module_brand where (rf_module.brand_identifier) = (rf_module_brand.identifier) and rf_module_brand.cas_mode in('ACTIVE', 'INACTIVE')),
                  'rf_module_type', (select jsonb_build_object('identifier', rf_module_type.identifier) from rf_module_type where (rf_module.type_identifier) = (rf_module_type.identifier) and rf_module_type.cas_mode in('ACTIVE', 'INACTIVE')),
                  'activity_timestamp', rf_module.activity_timestamp,
                  'battery_low', rf_module.battery_low
              )), '[]')
    from      rf_module
    where     rf_module.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_rf_module_get() OWNER TO aperi;

--
-- Name: cas_api_rf_module_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_rf_module_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', rf_module.identifier,
                      'serial', rf_module.serial,
                      'cas_mode', rf_module.cas_mode,
                      'cas_version', rf_module.cas_version,
                      'location', (select jsonb_build_object('identifier', location.identifier) from location where (rf_module.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                      'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (rf_module.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                      'rf_module_brand', (select jsonb_build_object('identifier', rf_module_brand.identifier) from rf_module_brand where (rf_module.brand_identifier) = (rf_module_brand.identifier) and rf_module_brand.cas_mode in('ACTIVE', 'INACTIVE')),
                      'rf_module_type', (select jsonb_build_object('identifier', rf_module_type.identifier) from rf_module_type where (rf_module.type_identifier) = (rf_module_type.identifier) and rf_module_type.cas_mode in('ACTIVE', 'INACTIVE')),
                      'activity_timestamp', rf_module.activity_timestamp,
                      'battery_low', rf_module.battery_low
                  )
        from      rf_module
        where     (rf_module.identifier) = (($1->>'identifier')::integer) and
                  rf_module.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'location' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', rf_module.identifier,
                          'serial', rf_module.serial,
                          'cas_mode', rf_module.cas_mode,
                          'cas_version', rf_module.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location where (rf_module.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (rf_module.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'rf_module_brand', (select jsonb_build_object('identifier', rf_module_brand.identifier) from rf_module_brand where (rf_module.brand_identifier) = (rf_module_brand.identifier) and rf_module_brand.cas_mode in('ACTIVE', 'INACTIVE')),
                          'rf_module_type', (select jsonb_build_object('identifier', rf_module_type.identifier) from rf_module_type where (rf_module.type_identifier) = (rf_module_type.identifier) and rf_module_type.cas_mode in('ACTIVE', 'INACTIVE')),
                          'activity_timestamp', rf_module.activity_timestamp,
                          'battery_low', rf_module.battery_low
                      )), '[]')
            from      rf_module
            where     exists(select from location where (location.identifier) = (($1->>'identifier')::integer) and (rf_module.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')) and
                      rf_module.cas_mode in('ACTIVE', 'INACTIVE');
        when 'patient' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', rf_module.identifier,
                          'serial', rf_module.serial,
                          'cas_mode', rf_module.cas_mode,
                          'cas_version', rf_module.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location where (rf_module.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (rf_module.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'rf_module_brand', (select jsonb_build_object('identifier', rf_module_brand.identifier) from rf_module_brand where (rf_module.brand_identifier) = (rf_module_brand.identifier) and rf_module_brand.cas_mode in('ACTIVE', 'INACTIVE')),
                          'rf_module_type', (select jsonb_build_object('identifier', rf_module_type.identifier) from rf_module_type where (rf_module.type_identifier) = (rf_module_type.identifier) and rf_module_type.cas_mode in('ACTIVE', 'INACTIVE')),
                          'activity_timestamp', rf_module.activity_timestamp,
                          'battery_low', rf_module.battery_low
                      )), '[]')
            from      rf_module
            where     exists(select from patient where (patient.identifier) = (($1->>'identifier')::integer) and (rf_module.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')) and
                      rf_module.cas_mode in('ACTIVE', 'INACTIVE');
        when 'rf_module_brand' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', rf_module.identifier,
                          'serial', rf_module.serial,
                          'cas_mode', rf_module.cas_mode,
                          'cas_version', rf_module.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location where (rf_module.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (rf_module.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'rf_module_brand', (select jsonb_build_object('identifier', rf_module_brand.identifier) from rf_module_brand where (rf_module.brand_identifier) = (rf_module_brand.identifier) and rf_module_brand.cas_mode in('ACTIVE', 'INACTIVE')),
                          'rf_module_type', (select jsonb_build_object('identifier', rf_module_type.identifier) from rf_module_type where (rf_module.type_identifier) = (rf_module_type.identifier) and rf_module_type.cas_mode in('ACTIVE', 'INACTIVE')),
                          'activity_timestamp', rf_module.activity_timestamp,
                          'battery_low', rf_module.battery_low
                      )), '[]')
            from      rf_module
            where     exists(select from rf_module_brand where (rf_module_brand.identifier) = (($1->>'identifier')::integer) and (rf_module.brand_identifier) = (rf_module_brand.identifier) and rf_module_brand.cas_mode in('ACTIVE', 'INACTIVE')) and
                      rf_module.cas_mode in('ACTIVE', 'INACTIVE');
        when 'rf_module_type' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', rf_module.identifier,
                          'serial', rf_module.serial,
                          'cas_mode', rf_module.cas_mode,
                          'cas_version', rf_module.cas_version,
                          'location', (select jsonb_build_object('identifier', location.identifier) from location where (rf_module.location_identifier) = (location.identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'patient', (select jsonb_build_object('identifier', patient.identifier) from patient where (rf_module.patient_identifier) = (patient.identifier) and patient.cas_mode in('ACTIVE', 'INACTIVE')),
                          'rf_module_brand', (select jsonb_build_object('identifier', rf_module_brand.identifier) from rf_module_brand where (rf_module.brand_identifier) = (rf_module_brand.identifier) and rf_module_brand.cas_mode in('ACTIVE', 'INACTIVE')),
                          'rf_module_type', (select jsonb_build_object('identifier', rf_module_type.identifier) from rf_module_type where (rf_module.type_identifier) = (rf_module_type.identifier) and rf_module_type.cas_mode in('ACTIVE', 'INACTIVE')),
                          'activity_timestamp', rf_module.activity_timestamp,
                          'battery_low', rf_module.battery_low
                      )), '[]')
            from      rf_module
            where     exists(select from rf_module_type where (rf_module_type.identifier) = (($1->>'identifier')::integer) and (rf_module.type_identifier) = (rf_module_type.identifier) and rf_module_type.cas_mode in('ACTIVE', 'INACTIVE')) and
                      rf_module.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_rf_module_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_rf_module_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_rf_module_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ rf_module;
    _location location;
    _patient patient;
    _rf_module_brand rf_module_brand;
    _rf_module_type rf_module_type;
begin
    if $1?'identifier' then
        select    rf_module.*
        into      _
        from      rf_module
        where     (rf_module.identifier) = (($1->>'identifier')::integer) and
                  rf_module.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'location' then
        _location = (select location from location where (location.identifier) = (($1->'location'->>'identifier')::integer) and location.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'patient' then
        _patient = (select patient from patient where (patient.identifier) = (($1->'patient'->>'identifier')::integer) and patient.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'rf_module_brand' then
        _rf_module_brand = (select rf_module_brand from rf_module_brand where (rf_module_brand.identifier) = (($1->'rf_module_brand'->>'identifier')::integer) and rf_module_brand.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'rf_module_type' then
        _rf_module_type = (select rf_module_type from rf_module_type where (rf_module_type.identifier) = (($1->'rf_module_type'->>'identifier')::integer) and rf_module_type.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    if _.identifier is not null then
        update       rf_module
        set          (serial, cas_mode, location_identifier, patient_identifier, brand_identifier, type_identifier) =
                     (
                         select    case when $1?'serial' then ($1->>'serial')::integer else _.serial::integer end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end,
                                   case when $1?'location' then coalesce(_location.identifier, null) else _.location_identifier end,
                                   case when $1?'patient' then coalesce(_patient.identifier, null) else _.patient_identifier end,
                                   case when $1?'rf_module_brand' then coalesce(_rf_module_brand.identifier, null) else _.brand_identifier end,
                                   case when $1?'rf_module_type' then coalesce(_rf_module_type.identifier, null) else _.type_identifier end
                     )
        where        (rf_module.identifier) = (_.identifier)
        returning    rf_module.*
        into         _;
    elseif $2 then
        insert into    rf_module(identifier, serial, cas_mode, location_identifier, patient_identifier, brand_identifier, type_identifier)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_rf_module_identifier'::regclass)::integer end,
                       case when $1?'serial' then ($1->>'serial')::integer else null::integer end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end,
                       case when $1?'location' then coalesce(_location.identifier, null) else null end,
                       case when $1?'patient' then coalesce(_patient.identifier, null) else null end,
                       case when $1?'rf_module_brand' then coalesce(_rf_module_brand.identifier, null) else null end,
                       case when $1?'rf_module_type' then coalesce(_rf_module_type.identifier, null) else null end
        returning      rf_module.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_rf_module_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_rf_module_type_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_rf_module_type_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', rf_module_type.identifier,
                  'name', rf_module_type.name,
                  'cas_mode', rf_module_type.cas_mode,
                  'cas_version', rf_module_type.cas_version,
                  'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.type_identifier) = (rf_module_type.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      rf_module_type
    where     rf_module_type.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_rf_module_type_get() OWNER TO aperi;

--
-- Name: cas_api_rf_module_type_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_rf_module_type_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', rf_module_type.identifier,
                      'name', rf_module_type.name,
                      'cas_mode', rf_module_type.cas_mode,
                      'cas_version', rf_module_type.cas_version,
                      'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.type_identifier) = (rf_module_type.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      rf_module_type
        where     (rf_module_type.identifier) = (($1->>'identifier')::integer) and
                  rf_module_type.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'rf_module' then
            return    jsonb_build_object(
                          'identifier', rf_module_type.identifier,
                          'name', rf_module_type.name,
                          'cas_mode', rf_module_type.cas_mode,
                          'cas_version', rf_module_type.cas_version,
                          'rf_module', array(select jsonb_build_object('identifier', rf_module.identifier) from rf_module where (rf_module.type_identifier) = (rf_module_type.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      rf_module_type
            where     exists(select from rf_module where (rf_module.identifier) = (($1->>'identifier')::integer) and (rf_module.type_identifier) = (rf_module_type.identifier) and rf_module.cas_mode in('ACTIVE', 'INACTIVE')) and
                      rf_module_type.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_rf_module_type_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_rf_module_type_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_rf_module_type_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ rf_module_type;

begin
    if $1?'identifier' then
        select    rf_module_type.*
        into      _
        from      rf_module_type
        where     (rf_module_type.identifier) = (($1->>'identifier')::integer) and
                  rf_module_type.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       rf_module_type
        set          (name, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (rf_module_type.identifier) = (_.identifier)
        returning    rf_module_type.*
        into         _;
    elseif $2 then
        insert into    rf_module_type(identifier, name, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else null::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      rf_module_type.*
        into           _;
    else
        return null;
    end if;

    if $1?'rf_module' then
        with
        rf_module as
        (
            update       rf_module
            set          (type_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'rf_module') as q
            where        (rf_module.identifier) = ((q->>'identifier')::integer) and
                         rf_module.cas_mode in('ACTIVE', 'INACTIVE')
            returning    rf_module.identifier
        )
        update    rf_module
        set       (type_identifier) = row(null)
        where     (rf_module.type_identifier) = (_.identifier) and
                  (rf_module.identifier) not in(select (rf_module.identifier) from rf_module) and
                  rf_module.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_rf_module_type_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_role_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_role_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', role.identifier,
                  'name', role.name,
                  'cas_mode', role.cas_mode,
                  'cas_version', role.cas_version,
                  'activity', cas_api_activity_get(jsonb_build_object('identifier', role.identifier), 'role'),
                  'email', cas_api_email_get(jsonb_build_object('identifier', role.identifier), 'role'),
                  'possible_work_order', array(select jsonb_build_object('identifier', possible_work_order.identifier) from possible_work_order inner join possible_work_order_role on (possible_work_order_role.possible_work_order_identifier) = (possible_work_order.identifier) where (role.identifier) = (possible_work_order_role.role_identifier) and possible_work_order.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      role
    where     role.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_role_get() OWNER TO aperi;

--
-- Name: cas_api_role_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_role_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', role.identifier,
                      'name', role.name,
                      'cas_mode', role.cas_mode,
                      'cas_version', role.cas_version,
                      'activity', cas_api_activity_get(jsonb_build_object('identifier', role.identifier), 'role'),
                      'email', cas_api_email_get(jsonb_build_object('identifier', role.identifier), 'role'),
                      'possible_work_order', array(select jsonb_build_object('identifier', possible_work_order.identifier) from possible_work_order inner join possible_work_order_role on (possible_work_order_role.possible_work_order_identifier) = (possible_work_order.identifier) where (role.identifier) = (possible_work_order_role.role_identifier) and possible_work_order.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      role
        where     (role.identifier) = (($1->>'identifier')::integer) and
                  role.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'activity' then
            return    jsonb_build_object(
                          'identifier', role.identifier,
                          'name', role.name,
                          'cas_mode', role.cas_mode,
                          'cas_version', role.cas_version,
                          'activity', cas_api_activity_get(jsonb_build_object('identifier', role.identifier), 'role'),
                          'email', cas_api_email_get(jsonb_build_object('identifier', role.identifier), 'role'),
                          'possible_work_order', array(select jsonb_build_object('identifier', possible_work_order.identifier) from possible_work_order inner join possible_work_order_role on (possible_work_order_role.possible_work_order_identifier) = (possible_work_order.identifier) where (role.identifier) = (possible_work_order_role.role_identifier) and possible_work_order.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      role
            where     exists(select from activity where (activity.identifier) = (($1->>'identifier')::integer) and (activity.role_identifier) = (role.identifier)) and
                      role.cas_mode in('ACTIVE', 'INACTIVE');
        when 'email' then
            return    jsonb_build_object(
                          'identifier', role.identifier,
                          'name', role.name,
                          'cas_mode', role.cas_mode,
                          'cas_version', role.cas_version,
                          'activity', cas_api_activity_get(jsonb_build_object('identifier', role.identifier), 'role'),
                          'email', cas_api_email_get(jsonb_build_object('identifier', role.identifier), 'role'),
                          'possible_work_order', array(select jsonb_build_object('identifier', possible_work_order.identifier) from possible_work_order inner join possible_work_order_role on (possible_work_order_role.possible_work_order_identifier) = (possible_work_order.identifier) where (role.identifier) = (possible_work_order_role.role_identifier) and possible_work_order.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      role
            where     exists(select from email where (email.identifier) = (($1->>'identifier')::integer) and (email.role_identifier) = (role.identifier)) and
                      role.cas_mode in('ACTIVE', 'INACTIVE');
        when 'possible_work_order' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', role.identifier,
                          'name', role.name,
                          'cas_mode', role.cas_mode,
                          'cas_version', role.cas_version,
                          'activity', cas_api_activity_get(jsonb_build_object('identifier', role.identifier), 'role'),
                          'email', cas_api_email_get(jsonb_build_object('identifier', role.identifier), 'role'),
                          'possible_work_order', array(select jsonb_build_object('identifier', possible_work_order.identifier) from possible_work_order inner join possible_work_order_role on (possible_work_order_role.possible_work_order_identifier) = (possible_work_order.identifier) where (role.identifier) = (possible_work_order_role.role_identifier) and possible_work_order.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      role
            where     exists(select from possible_work_order inner join possible_work_order_role on (possible_work_order_role.possible_work_order_identifier) = (possible_work_order.identifier) where (possible_work_order.identifier) = (($1->>'identifier')::integer) and (role.identifier) = (possible_work_order_role.role_identifier) and possible_work_order.cas_mode in('ACTIVE', 'INACTIVE')) and
                      role.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_role_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_role_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_role_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ role;

begin
    if $1?'identifier' then
        select    role.*
        into      _
        from      role
        where     (role.identifier) = (($1->>'identifier')::integer) and
                  role.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       role
        set          (name, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (role.identifier) = (_.identifier)
        returning    role.*
        into         _;
    elseif $2 then
        insert into    role(identifier, name, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_role_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      role.*
        into           _;
    else
        return null;
    end if;

    if $1?'activity' then
        with
        activity as
        (
            update       activity
            set          (role_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'activity') as q
            where        (activity.identifier) = ((q->>'identifier')::integer)
            returning    activity.identifier
        )
        update    activity
        set       (role_identifier) = row(null)
        where     (activity.role_identifier) = (_.identifier) and
                  (activity.identifier) not in(select (activity.identifier) from activity);
    end if;
    if $1?'email' then
        with
        email as
        (
            update       email
            set          (role_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'email') as q
            where        (email.identifier) = ((q->>'identifier')::integer)
            returning    email.identifier
        )
        update    email
        set       (role_identifier) = row(null)
        where     (email.role_identifier) = (_.identifier) and
                  (email.identifier) not in(select (email.identifier) from email);
    end if;
    if $1?'possible_work_order' then
        with
        possible_work_order as
        (
            select    possible_work_order.*
            from      possible_work_order, jsonb_array_elements($1->'possible_work_order') as q
            where     (possible_work_order.identifier) = ((q->>'identifier')::integer) and
                      possible_work_order.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        possible_work_order_role(role_identifier, possible_work_order_identifier) as
        (
            select    _.identifier, possible_work_order.identifier
            from      possible_work_order
        ),
        possible_work_order_role_orphan as
        (
            delete from    possible_work_order_role
            where          (possible_work_order_role.role_identifier) = (_.identifier) and
                           (possible_work_order_role.possible_work_order_identifier) not in(select (possible_work_order_role.possible_work_order_identifier) from possible_work_order_role)
        )
        insert into    possible_work_order_role(role_identifier, possible_work_order_identifier)
        select         possible_work_order_role.role_identifier, possible_work_order_role.possible_work_order_identifier
        from           possible_work_order_role
        on conflict do nothing;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_role_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_shortcut_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_shortcut_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', shortcut.identifier,
                  'name', shortcut.name,
                  'icon', shortcut.icon,
                  'url', shortcut.url,
                  'type', shortcut.type,
                  'position', shortcut.position,
                  'cas_mode', shortcut.cas_mode,
                  'cas_version', shortcut.cas_version
              )), '[]')
    from      shortcut
    where     shortcut.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_shortcut_get() OWNER TO aperi;

--
-- Name: cas_api_shortcut_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_shortcut_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', shortcut.identifier,
                      'name', shortcut.name,
                      'icon', shortcut.icon,
                      'url', shortcut.url,
                      'type', shortcut.type,
                      'position', shortcut.position,
                      'cas_mode', shortcut.cas_mode,
                      'cas_version', shortcut.cas_version
                  )
        from      shortcut
        where     (shortcut.identifier) = (($1->>'identifier')::integer) and
                  shortcut.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
end
$_$;


ALTER FUNCTION public.cas_api_shortcut_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_shortcut_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_shortcut_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ shortcut;

begin
    if $1?'identifier' then
        select    shortcut.*
        into      _
        from      shortcut
        where     (shortcut.identifier) = (($1->>'identifier')::integer) and
                  shortcut.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    if _.identifier is not null then
        update       shortcut
        set          (name, icon, url, type, position, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'icon' then ($1->>'icon')::text else _.icon::text end,
                                   case when $1?'url' then ($1->>'url')::text else _.url::text end,
                                   case when $1?'type' then ($1->>'type')::text else _.type::text end,
                                   case when $1?'position' then ($1->>'position')::integer else _.position::integer end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (shortcut.identifier) = (_.identifier)
        returning    shortcut.*
        into         _;
    elseif $2 then
        insert into    shortcut(identifier, name, icon, url, type, position, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_shortcut_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'icon' then ($1->>'icon')::text else null::text end,
                       case when $1?'url' then ($1->>'url')::text else null::text end,
                       case when $1?'type' then ($1->>'type')::text else null::text end,
                       case when $1?'position' then ($1->>'position')::integer else 0::integer end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      shortcut.*
        into           _;
    else
        return null;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_shortcut_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_site_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_site_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', site.identifier,
                  'name', site.name,
                  'department', array(select jsonb_build_object('identifier', department.identifier) from department where (department.site_identifier) = (site.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      site;
end
$$;


ALTER FUNCTION public.cas_api_site_get() OWNER TO aperi;

--
-- Name: cas_api_site_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_site_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', site.identifier,
                      'name', site.name,
                      'department', array(select jsonb_build_object('identifier', department.identifier) from department where (department.site_identifier) = (site.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      site
        where     (site.identifier) = (($1->>'identifier')::integer);
    end if;

    case $2
        when 'department' then
            return    jsonb_build_object(
                          'identifier', site.identifier,
                          'name', site.name,
                          'department', array(select jsonb_build_object('identifier', department.identifier) from department where (department.site_identifier) = (site.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      site
            where     exists(select from department where (department.identifier) = (($1->>'identifier')::integer) and (department.site_identifier) = (site.identifier) and department.cas_mode in('ACTIVE', 'INACTIVE'));
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_site_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_site_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_site_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ site;

begin
    if $1?'identifier' then
        select    site.*
        into      _
        from      site
        where     (site.identifier) = (($1->>'identifier')::integer);
    end if;


    if _.identifier is not null then
        update       site
        set          (name) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end
                     )
        where        (site.identifier) = (_.identifier)
        returning    site.*
        into         _;
    elseif $2 then
        insert into    site(identifier, name)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_site_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end
        returning      site.*
        into           _;
    else
        return null;
    end if;

    if $1?'department' then
        with
        department as
        (
            update       department
            set          (site_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'department') as q
            where        (department.identifier) = ((q->>'identifier')::integer) and
                         department.cas_mode in('ACTIVE', 'INACTIVE')
            returning    department.identifier
        )
        update    department
        set       (site_identifier) = row(null)
        where     (department.site_identifier) = (_.identifier) and
                  (department.identifier) not in(select (department.identifier) from department) and
                  department.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    return jsonb_build_object('identifier', _.identifier);
end
$_$;


ALTER FUNCTION public.cas_api_site_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_spectralink_account_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_spectralink_account_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', spectralink_account.identifier,
                  'number', spectralink_account.number,
                  'name', spectralink_account.name,
                  'cas_mode', spectralink_account.cas_mode,
                  'cas_version', spectralink_account.cas_version,
                  'employee', array(select jsonb_build_object('identifier', employee.identifier) from employee where (employee.spectralink_account_identifier) = (spectralink_account.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                  'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_spectralink_account on (spectralink_group_spectralink_account.spectralink_group_identifier) = (spectralink_group.identifier) where (spectralink_account.identifier) = (spectralink_group_spectralink_account.spectralink_account_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      spectralink_account
    where     spectralink_account.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_spectralink_account_get() OWNER TO aperi;

--
-- Name: cas_api_spectralink_account_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_spectralink_account_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', spectralink_account.identifier,
                      'number', spectralink_account.number,
                      'name', spectralink_account.name,
                      'cas_mode', spectralink_account.cas_mode,
                      'cas_version', spectralink_account.cas_version,
                      'employee', array(select jsonb_build_object('identifier', employee.identifier) from employee where (employee.spectralink_account_identifier) = (spectralink_account.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                      'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_spectralink_account on (spectralink_group_spectralink_account.spectralink_group_identifier) = (spectralink_group.identifier) where (spectralink_account.identifier) = (spectralink_group_spectralink_account.spectralink_account_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      spectralink_account
        where     (spectralink_account.identifier) = (($1->>'identifier')::integer) and
                  spectralink_account.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'employee' then
            return    jsonb_build_object(
                          'identifier', spectralink_account.identifier,
                          'number', spectralink_account.number,
                          'name', spectralink_account.name,
                          'cas_mode', spectralink_account.cas_mode,
                          'cas_version', spectralink_account.cas_version,
                          'employee', array(select jsonb_build_object('identifier', employee.identifier) from employee where (employee.spectralink_account_identifier) = (spectralink_account.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_spectralink_account on (spectralink_group_spectralink_account.spectralink_group_identifier) = (spectralink_group.identifier) where (spectralink_account.identifier) = (spectralink_group_spectralink_account.spectralink_account_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE'))
                      )
            from      spectralink_account
            where     exists(select from employee where (employee.identifier) = (($1->>'identifier')::integer) and (employee.spectralink_account_identifier) = (spectralink_account.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')) and
                      spectralink_account.cas_mode in('ACTIVE', 'INACTIVE');
        when 'spectralink_group' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', spectralink_account.identifier,
                          'number', spectralink_account.number,
                          'name', spectralink_account.name,
                          'cas_mode', spectralink_account.cas_mode,
                          'cas_version', spectralink_account.cas_version,
                          'employee', array(select jsonb_build_object('identifier', employee.identifier) from employee where (employee.spectralink_account_identifier) = (spectralink_account.identifier) and employee.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_group', array(select jsonb_build_object('identifier', spectralink_group.identifier) from spectralink_group inner join spectralink_group_spectralink_account on (spectralink_group_spectralink_account.spectralink_group_identifier) = (spectralink_group.identifier) where (spectralink_account.identifier) = (spectralink_group_spectralink_account.spectralink_account_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      spectralink_account
            where     exists(select from spectralink_group inner join spectralink_group_spectralink_account on (spectralink_group_spectralink_account.spectralink_group_identifier) = (spectralink_group.identifier) where (spectralink_group.identifier) = (($1->>'identifier')::integer) and (spectralink_account.identifier) = (spectralink_group_spectralink_account.spectralink_account_identifier) and spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')) and
                      spectralink_account.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_spectralink_account_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_spectralink_account_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_spectralink_account_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ spectralink_account;

begin
    if $1?'identifier' then
        select    spectralink_account.*
        into      _
        from      spectralink_account
        where     (spectralink_account.identifier) = (($1->>'identifier')::integer) and
                  spectralink_account.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       spectralink_account
        set          (number, name, cas_mode) =
                     (
                         select    case when $1?'number' then ($1->>'number')::text else _.number::text end,
                                   case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (spectralink_account.identifier) = (_.identifier)
        returning    spectralink_account.*
        into         _;
    elseif $2 then
        insert into    spectralink_account(identifier, number, name, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_spectralink_account_identifier'::regclass)::integer end,
                       case when $1?'number' then ($1->>'number')::text else null::text end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      spectralink_account.*
        into           _;
    else
        return null;
    end if;

    if $1?'employee' then
        with
        employee as
        (
            update       employee
            set          (spectralink_account_identifier) = row(_.identifier)
            from         jsonb_array_elements($1->'employee') as q
            where        (employee.identifier) = ((q->>'identifier')::integer) and
                         employee.cas_mode in('ACTIVE', 'INACTIVE')
            returning    employee.identifier
        )
        update    employee
        set       (spectralink_account_identifier) = row(null)
        where     (employee.spectralink_account_identifier) = (_.identifier) and
                  (employee.identifier) not in(select (employee.identifier) from employee) and
                  employee.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
    if $1?'spectralink_group' then
        with
        spectralink_group as
        (
            select    spectralink_group.*
            from      spectralink_group, jsonb_array_elements($1->'spectralink_group') as q
            where     (spectralink_group.identifier) = ((q->>'identifier')::integer) and
                      spectralink_group.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        spectralink_group_spectralink_account(spectralink_account_identifier, spectralink_group_identifier) as
        (
            select    _.identifier, spectralink_group.identifier
            from      spectralink_group
        ),
        spectralink_group_spectralink_account_orphan as
        (
            delete from    spectralink_group_spectralink_account
            where          (spectralink_group_spectralink_account.spectralink_account_identifier) = (_.identifier) and
                           (spectralink_group_spectralink_account.spectralink_group_identifier) not in(select (spectralink_group_spectralink_account.spectralink_group_identifier) from spectralink_group_spectralink_account)
        )
        insert into    spectralink_group_spectralink_account(spectralink_account_identifier, spectralink_group_identifier)
        select         spectralink_group_spectralink_account.spectralink_account_identifier, spectralink_group_spectralink_account.spectralink_group_identifier
        from           spectralink_group_spectralink_account
        on conflict do nothing;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_spectralink_account_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_spectralink_group_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_spectralink_group_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', spectralink_group.identifier,
                  'name', spectralink_group.name,
                  'cas_mode', spectralink_group.cas_mode,
                  'cas_version', spectralink_group.cas_version,
                  'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join spectralink_group_location on (spectralink_group_location.location_identifier) = (location.identifier) where (spectralink_group.identifier) = (spectralink_group_location.spectralink_group_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                  'spectralink_account', array(select jsonb_build_object('identifier', spectralink_account.identifier) from spectralink_account inner join spectralink_group_spectralink_account on (spectralink_group_spectralink_account.spectralink_account_identifier) = (spectralink_account.identifier) where (spectralink_group.identifier) = (spectralink_group_spectralink_account.spectralink_group_identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE'))
              )), '[]')
    from      spectralink_group
    where     spectralink_group.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_spectralink_group_get() OWNER TO aperi;

--
-- Name: cas_api_spectralink_group_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_spectralink_group_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', spectralink_group.identifier,
                      'name', spectralink_group.name,
                      'cas_mode', spectralink_group.cas_mode,
                      'cas_version', spectralink_group.cas_version,
                      'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join spectralink_group_location on (spectralink_group_location.location_identifier) = (location.identifier) where (spectralink_group.identifier) = (spectralink_group_location.spectralink_group_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                      'spectralink_account', array(select jsonb_build_object('identifier', spectralink_account.identifier) from spectralink_account inner join spectralink_group_spectralink_account on (spectralink_group_spectralink_account.spectralink_account_identifier) = (spectralink_account.identifier) where (spectralink_group.identifier) = (spectralink_group_spectralink_account.spectralink_group_identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE'))
                  )
        from      spectralink_group
        where     (spectralink_group.identifier) = (($1->>'identifier')::integer) and
                  spectralink_group.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    case $2
        when 'location' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', spectralink_group.identifier,
                          'name', spectralink_group.name,
                          'cas_mode', spectralink_group.cas_mode,
                          'cas_version', spectralink_group.cas_version,
                          'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join spectralink_group_location on (spectralink_group_location.location_identifier) = (location.identifier) where (spectralink_group.identifier) = (spectralink_group_location.spectralink_group_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_account', array(select jsonb_build_object('identifier', spectralink_account.identifier) from spectralink_account inner join spectralink_group_spectralink_account on (spectralink_group_spectralink_account.spectralink_account_identifier) = (spectralink_account.identifier) where (spectralink_group.identifier) = (spectralink_group_spectralink_account.spectralink_group_identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      spectralink_group
            where     exists(select from location inner join spectralink_group_location on (spectralink_group_location.location_identifier) = (location.identifier) where (location.identifier) = (($1->>'identifier')::integer) and (spectralink_group.identifier) = (spectralink_group_location.spectralink_group_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')) and
                      spectralink_group.cas_mode in('ACTIVE', 'INACTIVE');
        when 'spectralink_account' then
            return    coalesce(jsonb_agg(jsonb_build_object(
                          'identifier', spectralink_group.identifier,
                          'name', spectralink_group.name,
                          'cas_mode', spectralink_group.cas_mode,
                          'cas_version', spectralink_group.cas_version,
                          'location', array(select jsonb_build_object('identifier', location.identifier) from location inner join spectralink_group_location on (spectralink_group_location.location_identifier) = (location.identifier) where (spectralink_group.identifier) = (spectralink_group_location.spectralink_group_identifier) and location.cas_mode in('ACTIVE', 'INACTIVE')),
                          'spectralink_account', array(select jsonb_build_object('identifier', spectralink_account.identifier) from spectralink_account inner join spectralink_group_spectralink_account on (spectralink_group_spectralink_account.spectralink_account_identifier) = (spectralink_account.identifier) where (spectralink_group.identifier) = (spectralink_group_spectralink_account.spectralink_group_identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE'))
                      )), '[]')
            from      spectralink_group
            where     exists(select from spectralink_account inner join spectralink_group_spectralink_account on (spectralink_group_spectralink_account.spectralink_account_identifier) = (spectralink_account.identifier) where (spectralink_account.identifier) = (($1->>'identifier')::integer) and (spectralink_group.identifier) = (spectralink_group_spectralink_account.spectralink_group_identifier) and spectralink_account.cas_mode in('ACTIVE', 'INACTIVE')) and
                      spectralink_group.cas_mode in('ACTIVE', 'INACTIVE');
    end case;
end
$_$;


ALTER FUNCTION public.cas_api_spectralink_group_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_spectralink_group_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_spectralink_group_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ spectralink_group;

begin
    if $1?'identifier' then
        select    spectralink_group.*
        into      _
        from      spectralink_group
        where     (spectralink_group.identifier) = (($1->>'identifier')::integer) and
                  spectralink_group.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       spectralink_group
        set          (name, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (spectralink_group.identifier) = (_.identifier)
        returning    spectralink_group.*
        into         _;
    elseif $2 then
        insert into    spectralink_group(identifier, name, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_spectralink_group_identifier'::regclass)::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      spectralink_group.*
        into           _;
    else
        return null;
    end if;

    if $1?'location' then
        with
        location as
        (
            select    location.*
            from      location, jsonb_array_elements($1->'location') as q
            where     (location.identifier) = ((q->>'identifier')::integer) and
                      location.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        spectralink_group_location(spectralink_group_identifier, location_identifier) as
        (
            select    _.identifier, location.identifier
            from      location
        ),
        spectralink_group_location_orphan as
        (
            delete from    spectralink_group_location
            where          (spectralink_group_location.spectralink_group_identifier) = (_.identifier) and
                           (spectralink_group_location.location_identifier) not in(select (spectralink_group_location.location_identifier) from spectralink_group_location)
        )
        insert into    spectralink_group_location(spectralink_group_identifier, location_identifier)
        select         spectralink_group_location.spectralink_group_identifier, spectralink_group_location.location_identifier
        from           spectralink_group_location
        on conflict do nothing;
    end if;
    if $1?'spectralink_account' then
        with
        spectralink_account as
        (
            select    spectralink_account.*
            from      spectralink_account, jsonb_array_elements($1->'spectralink_account') as q
            where     (spectralink_account.identifier) = ((q->>'identifier')::integer) and
                      spectralink_account.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        spectralink_group_spectralink_account(spectralink_group_identifier, spectralink_account_identifier) as
        (
            select    _.identifier, spectralink_account.identifier
            from      spectralink_account
        ),
        spectralink_group_spectralink_account_orphan as
        (
            delete from    spectralink_group_spectralink_account
            where          (spectralink_group_spectralink_account.spectralink_group_identifier) = (_.identifier) and
                           (spectralink_group_spectralink_account.spectralink_account_identifier) not in(select (spectralink_group_spectralink_account.spectralink_account_identifier) from spectralink_group_spectralink_account)
        )
        insert into    spectralink_group_spectralink_account(spectralink_group_identifier, spectralink_account_identifier)
        select         spectralink_group_spectralink_account.spectralink_group_identifier, spectralink_group_spectralink_account.spectralink_account_identifier
        from           spectralink_group_spectralink_account
        on conflict do nothing;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_spectralink_group_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_status_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_status_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', status.identifier,
                  'name', status.name,
                  'type', status.type,
                  'color', status.color,
                  'text_color', status.text_color,
                  'background_color', status.background_color,
                  'priority', status.priority,
                  'cas_mode', status.cas_mode,
                  'cas_version', status.cas_version
              )), '[]')
    from      status
    where     status.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_status_get() OWNER TO aperi;

--
-- Name: cas_api_status_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_status_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2 is null then
        return    jsonb_build_object(
                      'identifier', status.identifier,
                      'name', status.name,
                      'type', status.type,
                      'color', status.color,
                      'text_color', status.text_color,
                      'background_color', status.background_color,
                      'priority', status.priority,
                      'cas_mode', status.cas_mode,
                      'cas_version', status.cas_version
                  )
        from      status
        where     (status.identifier) = (($1->>'identifier')::integer) and
                  status.cas_mode in('ACTIVE', 'INACTIVE');
    end if;
end
$_$;


ALTER FUNCTION public.cas_api_status_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_status_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_status_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ status;

begin
    if $1?'identifier' then
        select    status.*
        into      _
        from      status
        where     (status.identifier) = (($1->>'identifier')::integer) and
                  status.cas_mode in('ACTIVE', 'INACTIVE');
    end if;


    if _.identifier is not null then
        update       status
        set          (name, type, color, text_color, background_color, priority, cas_mode) =
                     (
                         select    case when $1?'name' then ($1->>'name')::text else _.name::text end,
                                   case when $1?'type' then ($1->>'type')::text else _.type::text end,
                                   case when $1?'color' then ($1->>'color')::text else _.color::text end,
                                   case when $1?'text_color' then ($1->>'text_color')::text else _.text_color::text end,
                                   case when $1?'background_color' then ($1->>'background_color')::text else _.background_color::text end,
                                   case when $1?'priority' then ($1->>'priority')::integer else _.priority::integer end,
                                   case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode end
                     )
        where        (status.identifier) = (_.identifier)
        returning    status.*
        into         _;
    elseif $2 then
        insert into    status(identifier, name, type, color, text_color, background_color, priority, cas_mode)
        select         case when $1?'identifier' then ($1->>'identifier')::integer else null::integer end,
                       case when $1?'name' then ($1->>'name')::text else null::text end,
                       case when $1?'type' then ($1->>'type')::text else null::text end,
                       case when $1?'color' then ($1->>'color')::text else null::text end,
                       case when $1?'text_color' then ($1->>'text_color')::text else '#000000'::text::text end,
                       case when $1?'background_color' then ($1->>'background_color')::text else '#FFFFFF'::text::text end,
                       case when $1?'priority' then ($1->>'priority')::integer else null::integer end,
                       case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE' end
        returning      status.*
        into           _;
    else
        return null;
    end if;



    return jsonb_build_object('identifier', _.identifier, 'cas_version', _.cas_version);
end
$_$;


ALTER FUNCTION public.cas_api_status_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_api_svp_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_svp_get() RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
begin
    return    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', application_svp.identifier,
                  'view_in_screensaver', application_svp.view_in_screensaver,
                  'pursuit_enabled', application_svp.pursuit_enabled,
                  'device', application_svp.device_identifier,
                  'esvp_device', application_svp.esvp_device_identifier,
                  'cas_mode', application_svp.cas_mode,
                  'cas_version', application_svp.cas_version,
                  'crews', array(
					  	select jsonb_build_object('identifier', crew.identifier) 
					    from application_svp_crews 
					    join crew on application_svp_crews.crew_identifier = crew.identifier where (application_svp_crews.crew_identifier) = (application_svp_crews.crew_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE'))     
              )), '[]')
    from      application_svp
    where application_svp.cas_mode in('ACTIVE', 'INACTIVE');
end
$$;


ALTER FUNCTION public.cas_api_svp_get() OWNER TO aperi;

--
-- Name: cas_api_svp_get(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_svp_get(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
        return    jsonb_build_object(
                  'identifier', application_svp.identifier,
                  'view_in_screensaver', application_svp.view_in_screensaver,
                  'pursuit_enabled', application_svp.pursuit_enabled,
                  'device', application_svp.device_identifier,
                  'esvp_device', application_svp.esvp_device_identifier,
                  'cas_mode', application_svp.cas_mode,
                  'cas_version', application_svp.cas_version,
                  'crews', array(
					  	select jsonb_build_object('identifier', crew.identifier) 
					    from application_svp_crews 
					    join crew on application_svp_crews.crew_identifier = crew.identifier where (application_svp_crews.crew_identifier) = (application_svp_crews.crew_identifier) and crew.cas_mode in('ACTIVE', 'INACTIVE'))    
                  )
        from      application_svp   
        where     (application_svp.identifier) = (($1->>'identifier')::integer)
        and  application_svp.cas_mode in('ACTIVE', 'INACTIVE');
end
$_$;


ALTER FUNCTION public.cas_api_svp_get(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_svp_get_by_deviceidentifer(jsonb, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_svp_get_by_deviceidentifer(jsonb, text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
        return    jsonb_build_object(
                  'identifier', application_svp.identifier,
                  'viewInScreensaver', application_svp.view_in_screensaver,
                  'pursuitEnabled', application_svp.pursuit_enabled,
                  'device', application_svp.device_identifier,
                  'esvpDevice', application_svp.esvp_device_identifier,
                  'cas_mode', application_svp.cas_mode,
                  'cas_version', application_svp.cas_version,
                  'crews', array(
					  	select jsonb_build_object('identifier', crew.identifier) 
					    from application_svp_crews
					    join crew on application_svp_crews.crew_identifier = crew.identifier 
					    where 
					    (application_svp_crews.crew_identifier) = (application_svp_crews.crew_identifier) 
					  	and crew.cas_mode in('ACTIVE', 'INACTIVE') 
					    and application_svp_crews.application_svp_identifier = application_svp.identifier 
				  		)    
                  )
        from      application_svp  
        join device on device.identifier = application_svp.device_identifier
        where     (application_svp.device_identifier) = (($1->>'device')::integer)
        and  application_svp.cas_mode in('ACTIVE', 'INACTIVE');
end
$_$;


ALTER FUNCTION public.cas_api_svp_get_by_deviceidentifer(jsonb, text) OWNER TO aperi;

--
-- Name: cas_api_svp_set(jsonb, boolean); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_api_svp_set(jsonb, boolean DEFAULT false) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ application_svp;

begin
    if $1?'identifier' then
        select    application_svp.*
        into      _
        from      application_svp
        where     (application_svp.identifier) = (($1->>'identifier')::integer) and
                  application_svp.cas_mode in('ACTIVE', 'INACTIVE');
    end if;

    if _.identifier is not null then
        update       application_svp
        set          (view_in_screensaver, pursuit_enabled, device_identifier, esvp_device_identifier, cas_mode) =
                     (
                         select 	case when $1?'viewInScreensaver' then ($1->>'viewInScreensaver')::bool else _.view_in_screensaver::bool end,
						 		   	case when $1?'pursuitEnabled' then ($1->>'pursuitEnabled')::bool else _.pursuit_enabled::bool end,
                                   	case when $1?'device' then ($1->>'device')::int else _.device_identifier::int end,
									case when $1?'esvpDevice' then ($1->>'esvpDevice')::int else _.esvp_device_identifier::int end,
						 			case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else _.cas_mode::cas_mode end						 									 
                     )
        where        (identifier) = (_.identifier)
        returning    application_svp.*
        into         _;
    
	elseif $2 then
        insert into    application_svp(identifier, view_in_screensaver, pursuit_enabled, device_identifier, esvp_device_identifier, cas_mode)
        select 			case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_application_svp_identifier'::regclass)::integer end,
						case when $1?'viewInScreensaver' then ($1->>'viewInScreensaver')::bool else false end,
						case when $1?'pursuitEnabled' then ($1->>'pursuitEnabled')::bool else false end,
						(($1->>'device')::integer),
						(($1->>'esvpDevice')::integer),
						case when $1?'cas_mode' then ($1->>'cas_mode')::cas_mode else 'ACTIVE'end						 									                      
        returning      application_svp.*
        into           _;
    else
        return null;
    end if;
    if $1?'crews' then
        with
        crew as
        (
            select    crew.*
            from      crew, jsonb_array_elements($1->'crews') as q
            where     (crew.identifier) = ((q->>'identifier')::integer) and
                      crew.cas_mode in('ACTIVE', 'INACTIVE')
        ),
        application_svp_crews(application_svp_identifier, crew_identifier) as
        (
            select    _.identifier, crew.identifier
            from      crew
        ),
        application_svp_crews_orphan as
        (
            delete from    application_svp_crews
            where          (application_svp_crews.application_svp_identifier) = (_.identifier) and
                           (application_svp_crews.crew_identifier) not in(select (application_svp_crews.crew_identifier) from application_svp_crews)
        )
        insert into    application_svp_crews(application_svp_identifier, crew_identifier)
        select         application_svp_crews.application_svp_identifier, application_svp_crews.crew_identifier
        from           application_svp_crews
        on conflict do nothing;
    end if;

    return jsonb_build_object('identifier', _.identifier, 'cas_version', (select cas_version from application_svp where identifier = _.identifier));
end
$_$;


ALTER FUNCTION public.cas_api_svp_set(jsonb, boolean) OWNER TO aperi;

--
-- Name: cas_call_query(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_call_query(jsonb) RETURNS SETOF jsonb
    LANGUAGE sql STABLE
    AS $_$
    select      q.call
    from        (select * from cas_call_query_main($1) union all select * from cas_call_query_remote($1) union all select * from cas_call_query_wander($1)) as q(call)
    order by    (case when not $1?'sort_by'                   then q.call->'started_at' end) desc,
                (case when $1->>'sort_by' = 'started-at-asc'  then q.call->'started_at' end),
                (case when $1->>'sort_by' = 'started-at-desc' then q.call->'started_at' end) desc,
                (case when $1->>'sort_by' = 'ended-at-asc'    then q.call->'ended_at' end),
                (case when $1->>'sort_by' = 'ended-at-desc'   then q.call->'ended_at' end) desc;
$_$;


ALTER FUNCTION public.cas_call_query(jsonb) OWNER TO aperi;

--
-- Name: cas_call_query_main(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_call_query_main(jsonb) RETURNS SETOF jsonb
    LANGUAGE sql STABLE
    AS $_$
    with
    log_engine_context_location as
    (
        select    log_engine_context_location.*,
                  count(*) filter(where log_engine_context_location.state in('NORMAL', 'ABSENT')) over w as session
        from      log_engine_context_location
        where     log_engine_context_location.state in('NORMAL', 'ABSENT', 'WAITING', 'WAITINGLATE', 'NORESPONSE', 'SERVICE', 'VISIT', 'REMINDER', 'NURSING', 'CARING', 'ASSISTANCEBYNURSING', 'ASSISTANCEBYCARING') and
                  case when $1?'location' then log_engine_context_location.location_identifier = any(array(select q.location_identifier::integer from jsonb_array_elements_text($1->'location') as q(location_identifier))) else true end and
                  case when $1?'period' then
                      (case when $1->'period'->>0 is not null then log_engine_context_location.entered_at >= ($1->'period'->>0)::timestamptz else true end) and
                      (case when $1->'period'->>1 is not null then log_engine_context_location.entered_at < ($1->'period'->>1)::timestamptz else true end)
                  else true end
        window    w as (partition by log_engine_context_location.location_identifier order by log_engine_context_location.entered_at, log_engine_context_location.identifier rows between unbounded preceding and 1 preceding)
    ),
    log_engine_context_location_session(location_identifier, started_at, ended_at, source, types, nursing_tags) as
    (
        select      log_engine_context_location.location_identifier,
                    min(log_engine_context_location.entered_at),
                    case when bool_or(log_engine_context_location.state in('NORMAL', 'ABSENT')) then max(log_engine_context_location.entered_at) end,
                    case when char_length(first(log_engine_context_location.parameters)->>'MAIN_CAUSE_TEXT') != 0 then first(log_engine_context_location.parameters)->>'MAIN_CAUSE_TEXT' end,
                    array_remove(array
                    [
                        case when bool_or(log_engine_context_location.state in('NURSING')) then 'NURSING' end,
                        case when bool_or(log_engine_context_location.state in('CARING')) then 'CARING' end,
                        case when bool_or(log_engine_context_location.state in('WAITINGLATE')) then 'LATE' end,
                        case when bool_or(log_engine_context_location.state in('ASSISTANCEBYNURSING', 'ASSISTANCEBYCARING')) then 'ASSISTANCE' end,
                        case when bool_or(log_engine_context_location.state in('NORESPONSE')) then 'NORESPONSE' end
                    ], null),
                    array_agg(log_engine_context_location.tag order by log_engine_context_location.entered_at, log_engine_context_location.identifier) filter(where log_engine_context_location.state in ('NURSING'))
        from        log_engine_context_location
        group by    log_engine_context_location.location_identifier,
                    log_engine_context_location.session
        having      bool_or(log_engine_context_location.state not in('NORMAL', 'ABSENT'))
    )
    select        jsonb_build_object(
                      'tag',                             log_engine_context_location_session.nursing_tags[array_upper(log_engine_context_location_session.nursing_tags, 1)],
                      'department',                      department.name,
                      'location',                        location.name,
                      'patient',                         patient.name,
                      'source',                          log_engine_context_location_session.source,
                      'started_at',                      log_engine_context_location_session.started_at,
                      'ended_at',                        log_engine_context_location_session.ended_at,
                      'employees',                       employees.names,
                      'call_reason_category_identifier', call_reason.category_identifier,
                      'call_reason_comment',             call_reason.comment
                  )
    from          log_engine_context_location_session
    inner join    location
    on            location.identifier = log_engine_context_location_session.location_identifier
    left join     department
    on            department.identifier = location.department_identifier
    left join     lateral (
                      select    q.patient_identifier, q.patient_name
                      from      (
                                    select        patient.identifier, patient.name, count(*) over()
                                    from          log_location_patient
                                    inner join    patient
                                    on            log_location_patient.patient_identifier = patient.identifier
                                    inner join    log_patient_cas_mode
                                    on            log_location_patient.patient_identifier = log_patient_cas_mode.patient_identifier
                                    where         log_location_patient.location_identifier = log_engine_context_location_session.location_identifier and
                                                  log_location_patient.period @> log_engine_context_location_session.started_at and
                                                  log_patient_cas_mode.period @> log_engine_context_location_session.started_at
                                    limit         2
                                ) as q(patient_identifier, patient_name, c)
                      where     q.c = 1
                  ) as patient(identifier, name)
    on            true
    left join     lateral (
                      select        array_agg(distinct employee.identifier), string_agg(distinct employee.name, ', ')
                      from          log_care
                      inner join    employee
                      on            employee.identifier = log_care.employee_identifier
                      where         log_care.location_identifier = log_engine_context_location_session.location_identifier and
                                    log_care.period && tstzrange(log_engine_context_location_session.started_at, log_engine_context_location_session.ended_at, case when log_engine_context_location_session.started_at != log_engine_context_location_session.ended_at then '[)' else '[]' end)
                  ) as employees(identifiers, names)
    on            true
    left join     lateral (
                      select        call_reason.call_reason_category_identifier, call_reason.comment
                      from          call_reason
                      where         call_reason.tag = any(log_engine_context_location_session.nursing_tags)
                      order by      call_reason.created_at desc
                      limit         1
                  ) as call_reason(category_identifier, comment)
    on            true
    where         'NURSING' = any(log_engine_context_location_session.types) and
                  case when $1?'patient' then patient.identifier = any(array(select q.patient_identifier::integer from jsonb_array_elements_text($1->'patient') as q(patient_identifier))) else true end and
                  case when $1?'employee' then exists(select e.identifier from unnest(employees.identifiers) as e(identifier) where e.identifier = any(array(select q.employee_identifier::integer from jsonb_array_elements_text($1->'employee') as q(employee_identifier)))) else true end and
                  case when $1?'call-reason-category' then call_reason.category_identifier = any(array(select q.call_reason_category_identifier::integer from jsonb_array_elements_text($1->'call-reason-category') as q(call_reason_category_identifier))) else true end and
                  case when $1?'requires-action' and ($1->>'requires-action')::boolean then call_reason.category_identifier is null or ((select value from setting where key = 'Frontend_CallReason_CommentRequired')::boolean and call_reason.comment is null) else true end;
$_$;


ALTER FUNCTION public.cas_call_query_main(jsonb) OWNER TO aperi;

--
-- Name: cas_call_query_remote(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_call_query_remote(jsonb) RETURNS SETOF jsonb
    LANGUAGE sql STABLE
    AS $_$
    with
    log_engine_context_patient as
    (
        select    log_engine_context_patient.*,
                  count(*) filter(where log_engine_context_patient.state in('REMOTE-CALL-OFF')) over w as session
        from      log_engine_context_patient
        where     log_engine_context_patient.state in('REMOTE-CALL-OFF', 'REMOTE-CALL-ON') and
                  case when $1?'patient' then log_engine_context_patient.patient_identifier = any(array(select q.patient_identifier::integer from jsonb_array_elements_text($1->'patient') as q(patient_identifier))) else true end and
                  case when $1?'period' then
                      (case when $1->'period'->>0 is not null then log_engine_context_patient.entered_at >= ($1->'period'->>0)::timestamptz else true end) and
                      (case when $1->'period'->>1 is not null then log_engine_context_patient.entered_at < ($1->'period'->>1)::timestamptz else true end)
                  else true end
        window    w as (partition by log_engine_context_patient.patient_identifier order by log_engine_context_patient.entered_at, log_engine_context_patient.identifier rows between unbounded preceding and 1 preceding)
    ),
    log_engine_context_patient_session(patient_identifier, started_at, ended_at, location_serials, tags) as
    (
        select      log_engine_context_patient.patient_identifier,
                    min(log_engine_context_patient.entered_at),
                    case when bool_or(log_engine_context_patient.state in('REMOTE-CALL-OFF')) then max(log_engine_context_patient.entered_at) end,
                    array_agg((coalesce(log_engine_context_patient.parameters->>'REMOTE_LOCATION_SERIAL', log_engine_context_patient.parameters->>'LOCATION_SERIAL'))::int order by log_engine_context_patient.entered_at, log_engine_context_patient.identifier),
                    array_agg(log_engine_context_patient.tag order by log_engine_context_patient.entered_at, log_engine_context_patient.identifier)
        from        log_engine_context_patient
        group by    log_engine_context_patient.patient_identifier,
                    log_engine_context_patient.session
        having      -- filter: empty session
                    bool_or(log_engine_context_patient.state not in('REMOTE-CALL-OFF'))
    )
    select        jsonb_build_object
                  (
                      'tag',                             log_engine_context_patient_session.tags[array_upper(log_engine_context_patient_session.tags, 1)],
                      'department',                      locations.department_names,
                      'location',                        locations.location_names,
                      'patient',                         patient.name,
                      'started_at',                      log_engine_context_patient_session.started_at,
                      'ended_at',                        log_engine_context_patient_session.ended_at,
                      'employees',                       employees.names,
                      'call_reason_category_identifier', call_reason.category_identifier,
                      'call_reason_comment',             call_reason.comment
                  )
    from          log_engine_context_patient_session
    inner join    patient
    on            patient.identifier = log_engine_context_patient_session.patient_identifier
    left join     lateral (
                      select       array_agg(distinct location.identifier), string_agg(location.name, ', '), string_agg(department.name, ', ')
                      from         location
                      left join    department
                      on           department.identifier = location.department_identifier
                      where        location.serial = any(log_engine_context_patient_session.location_serials)
                  ) as locations(location_identifiers, location_names, department_names)
    on            true
    left join     lateral (
                      select        array_agg(distinct q.identifier), string_agg(distinct q.name, ', ')
                      from      (
                                     select        employee.identifier, employee.name
                                     from          notification
                                     inner join    employee
                                     on            employee.identifier = notification.employee_identifier
                                     where         notification.tag = any(log_engine_context_patient_session.tags)
                                     union all
                                     select        employee.identifier, employee.name
                                     from          dect_message
                                     inner join    log_employee_dect_account
                                     on            log_employee_dect_account.dect_account_identifier = dect_message.account_identifier and
                                                   log_employee_dect_account.period @> dect_message.created_at
                                     inner join    employee
                                     on            employee.identifier = log_employee_dect_account.employee_identifier
                                     where         dect_message.tag = any(log_engine_context_patient_session.tags) and
                                                   dect_message.timestamp_man_ack is not null
                                     union all
                                     select        employee.identifier, employee.name
                                     from          app_message
                                     inner join    employee
                                     on            employee.identifier = app_message.employee_identifier
                                     where         app_message.tag = any(log_engine_context_patient_session.tags) and
                                                   app_message.timestamp_man_ack is not null
                                     --  union all
                                     --  select        employee.identifier, employee.name
                                     --  from          spectralink_message
                                     --  inner join    spectralink_message_reference
                                     --  on            spectralink_message.key = spectralink_message_reference.key
                                     --  inner join    log_employee_spectralink_account
                                     --  on            log_employee_spectralink_account.spectralink_account_identifier = spectralink_message.account_identifier and
                                     --                log_employee_spectralink_account.period @> spectralink_message.created_at
                                     --  inner join    employee
                                     --  on            employee.identifier = log_employee_spectralink_account.employee_identifier
                                     --  where         spectralink_message_reference.tag = any(log_engine_context_patient_session.tags) and
                                     --                spectralink_message.??? is not null
                                     -- TODO: spectralink acks?
                                ) as q(identifier, name)
                  ) as employees(identifiers, names)
    on            true
    left join     lateral (
                      select        call_reason.call_reason_category_identifier, call_reason.comment
                      from          call_reason
                      where         call_reason.tag = any(log_engine_context_patient_session.tags)
                      order by      call_reason.created_at desc
                      limit         1
                  ) as call_reason(category_identifier, comment)
    on            true
    where         case when $1?'location' then exists(select l.identifier from unnest(locations.location_identifiers) as l(identifier) where l.identifier = any(array(select q.location_identifier::integer from jsonb_array_elements_text($1->'location') as q(location_identifier)))) else true end and
                  case when $1?'employee' then exists(select e.identifier from unnest(employees.identifiers) as e(identifier) where e.identifier = any(array(select q.employee_identifier::integer from jsonb_array_elements_text($1->'employee') as q(employee_identifier)))) else true end and
                  case when $1?'call-reason-category' then call_reason.category_identifier = any(array(select q.call_reason_category_identifier::integer from jsonb_array_elements_text($1->'call-reason-category') as q(call_reason_category_identifier))) else true end and
                  case when $1?'requires-action' and ($1->>'requires-action')::boolean then call_reason.category_identifier is null or ((select value from setting where key = 'Frontend_CallReason_CommentRequired')::boolean and call_reason.comment is null) else true end;
$_$;


ALTER FUNCTION public.cas_call_query_remote(jsonb) OWNER TO aperi;

--
-- Name: cas_call_query_wander(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_call_query_wander(jsonb) RETURNS SETOF jsonb
    LANGUAGE sql STABLE
    AS $_$
    with
    log_engine_context_patient as
    (
        select    log_engine_context_patient.*,
                  count(*) filter(where log_engine_context_patient.state in('WANDER-CALL-OFF')) over w as session
        from      log_engine_context_patient
        where     log_engine_context_patient.state in('WANDER-CALL-OFF', 'WANDER-CALL-ON') and
                  case when $1?'patient' then log_engine_context_patient.patient_identifier = any(array(select q.patient_identifier::integer from jsonb_array_elements_text($1->'patient') as q(patient_identifier))) else true end and
                  case when $1?'period' then
                      (case when $1->'period'->>0 is not null then log_engine_context_patient.entered_at >= ($1->'period'->>0)::timestamptz else true end) and
                      (case when $1->'period'->>1 is not null then log_engine_context_patient.entered_at < ($1->'period'->>1)::timestamptz else true end)
                  else true end
        window    w as (partition by log_engine_context_patient.patient_identifier order by log_engine_context_patient.entered_at, log_engine_context_patient.identifier rows between unbounded preceding and 1 preceding)
    ),
    log_engine_context_patient_session(patient_identifier, started_at, ended_at, location_serials, tags) as
    (
        select      log_engine_context_patient.patient_identifier,
                    min(log_engine_context_patient.entered_at),
                    case when bool_or(log_engine_context_patient.state in('WANDER-CALL-OFF')) then max(log_engine_context_patient.entered_at) end,
                    array_agg((coalesce(log_engine_context_patient.parameters->>'WANDER_LOCATION_SERIAL', log_engine_context_patient.parameters->>'LOCATION_SERIAL'))::int order by log_engine_context_patient.entered_at, log_engine_context_patient.identifier),
                    array_agg(log_engine_context_patient.tag order by log_engine_context_patient.entered_at, log_engine_context_patient.identifier)
        from        log_engine_context_patient
        group by    log_engine_context_patient.patient_identifier,
                    log_engine_context_patient.session
        having      -- filter: empty session
                    bool_or(log_engine_context_patient.state not in('WANDER-CALL-OFF'))
    )
    select        jsonb_build_object
                  (
                      'tag',                             log_engine_context_patient_session.tags[array_upper(log_engine_context_patient_session.tags, 1)],
                      'department',                      locations.department_names,
                      'location',                        locations.location_names,
                      'patient',                         patient.name,
                      'started_at',                      log_engine_context_patient_session.started_at,
                      'ended_at',                        log_engine_context_patient_session.ended_at,
                      'employees',                       employees.names,
                      'call_reason_category_identifier', call_reason.category_identifier,
                      'call_reason_comment',             call_reason.comment
                  )
    from          log_engine_context_patient_session
    inner join    patient
    on            patient.identifier = log_engine_context_patient_session.patient_identifier
    left join     lateral (
                      select       array_agg(distinct location.identifier), string_agg(location.name, ', '), string_agg(department.name, ', ')
                      from         location
                      left join    department
                      on           department.identifier = location.department_identifier
                      where        location.serial = any(log_engine_context_patient_session.location_serials)
                  ) as locations(location_identifiers, location_names, department_names)
    on            true
    left join     lateral (
                      select        array_agg(distinct q.identifier), string_agg(distinct q.name, ', ')
                      from      (
                                     select        employee.identifier, employee.name
                                     from          log_care
                                     inner join    employee
                                     on            employee.identifier = log_care.employee_identifier
                                     where         log_care.location_identifier = any(locations.location_identifiers) and
                                                   lower(log_care.period) <= log_engine_context_patient_session.ended_at and
                                                   upper(log_care.period) >= log_engine_context_patient_session.started_at
                                ) as q(identifier, name)
                  ) as employees(identifiers, names)
    on            true
    left join     lateral (
                      select        call_reason.call_reason_category_identifier, call_reason.comment
                      from          call_reason
                      where         call_reason.tag = any(log_engine_context_patient_session.tags)
                      order by      call_reason.created_at desc
                      limit         1
                  ) as call_reason(category_identifier, comment)
    on            true
    where         case when $1?'location' then exists(select l.identifier from unnest(locations.location_identifiers) as l(identifier) where l.identifier = any(array(select q.location_identifier::integer from jsonb_array_elements_text($1->'location') as q(location_identifier)))) else true end and
                  case when $1?'employee' then exists(select e.identifier from unnest(employees.identifiers) as e(identifier) where e.identifier = any(array(select q.employee_identifier::integer from jsonb_array_elements_text($1->'employee') as q(employee_identifier)))) else true end and
                  case when $1?'call-reason-category' then call_reason.category_identifier = any(array(select q.call_reason_category_identifier::integer from jsonb_array_elements_text($1->'call-reason-category') as q(call_reason_category_identifier))) else true end and
                  case when $1?'requires-action' and ($1->>'requires-action')::boolean then call_reason.category_identifier is null or ((select value from setting where key = 'Frontend_CallReason_CommentRequired')::boolean and call_reason.comment is null) else true end;
$_$;


ALTER FUNCTION public.cas_call_query_wander(jsonb) OWNER TO aperi;

--
-- Name: cas_call_reason_set(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_call_reason_set(jsonb) RETURNS jsonb
    LANGUAGE plpgsql
    AS $_$
declare
    _ call_reason;
    _category call_reason_category;
    _employee employee;
    _patient patient;
    _location location;

begin
    if $1?'category' then
        _category = (select call_reason_category from call_reason_category where (call_reason_category.identifier) = (($1->>'category')::integer) and call_reason_category.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'employee' then
        _employee = (select employee from employee where (employee.identifier) = (($1->>'employee')::integer) and employee.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'patient' then
        _patient = (select patient from patient where (patient.identifier) = (($1->>'patient')::integer) and patient.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;
    if $1?'location' then
        _location = (select location from location where (location.identifier) = (($1->>'location')::integer) and employee.cas_mode in('ACTIVE', 'INACTIVE'));
    end if;

    insert into    call_reason(identifier, tag, source, comment, call_reason_category_identifier, employee_identifier, patient_identifier, location_identifier)
    select         case when $1?'identifier' then ($1->>'identifier')::integer else nextval('sequence_call_reason_identifier'::regclass)::integer end,
                   case when $1?'tag' then ($1->>'tag')::text else null::text end,
                   case when $1?'source' then ($1->>'source')::text else null::text end,
                   case when $1?'comment' then ($1->>'comment')::text else null::text end,
                   case when $1?'category' then coalesce(_category.identifier, null) else null end,
                   case when $1?'employee' then coalesce(_employee.identifier, null) else null end,
                   case when $1?'patient' then coalesce(_patient.identifier, null) else null end,
                   case when $1?'location' then coalesce(_location.identifier, null) else null end
    returning      call_reason.*
    into           _;

    return jsonb_build_object('identifier', _.identifier);
end
$_$;


ALTER FUNCTION public.cas_call_reason_set(jsonb) OWNER TO aperi;

--
-- Name: cas_employee_permissions_get(integer); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_employee_permissions_get(integer) RETURNS jsonb
    LANGUAGE sql STABLE
    AS $_$
    select    employee.cas_permissions
    from      employee
    where     employee.identifier = $1;
$_$;


ALTER FUNCTION public.cas_employee_permissions_get(integer) OWNER TO aperi;

--
-- Name: cas_employee_permissions_set(integer, jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_employee_permissions_set(integer, jsonb) RETURNS jsonb
    LANGUAGE sql
    AS $_$
    update       employee
    set          cas_permissions = $2
    where        employee.identifier = $1
    returning    employee.cas_permissions;
$_$;


ALTER FUNCTION public.cas_employee_permissions_set(integer, jsonb) OWNER TO aperi;

--
-- Name: cas_execute_query(text, jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_execute_query(text, jsonb, OUT jsonb) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2?'paging' then
        execute    format('select coalesce(jsonb_agg(_.rows), ''[]'') from (select * from %I($1) limit $2 offset $3) as _(rows)', $1)
        using      (select jsonb_object_agg(_->>'key', _->'value') from jsonb_array_elements($2->'parameters') as _),
                   coalesce(($2->'paging'->>'limit')::int8, 1),
                   coalesce(($2->'paging'->>'offset')::int8, 0)
        into       $3;
    else
        execute    format('select coalesce(jsonb_agg(_.rows), ''[]'') from %I($1) as _(rows)', $1)
        using      (select jsonb_object_agg(_->>'key', _->'value') from jsonb_array_elements($2->'parameters') as _)
        into       $3;
    end if;
end
$_$;


ALTER FUNCTION public.cas_execute_query(text, jsonb, OUT jsonb) OWNER TO aperi;

--
-- Name: cas_mail_work_order_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_mail_work_order_get() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
    select    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', work_order.identifier,
                  'status', work_order.status,
                  'comment', work_order.comment,
                  'timestamp', work_order.timestamp,
                  'timestamp_solved', work_order.timestamp_solved,
                  'possible_work_order', (
                      select jsonb_build_object(
                          'identifier', possible_work_order.identifier,
                          'name', possible_work_order.name,
                          'code', possible_work_order.code,
                          'possible_work_order_top', (
                              select jsonb_build_object(
                                  'identifier', possible_work_order_top.identifier,
                                  'name', possible_work_order_top.name,
                                  'email_addresses', (select jsonb_agg(email.address) from email where email.possible_work_order_top_identifier = possible_work_order_top.identifier)
                              )
                              from possible_work_order_top
                              where possible_work_order_top.identifier = possible_work_order.possible_work_order_top_identifier
                          ),
                          'roles', (
                              select coalesce(jsonb_agg(jsonb_build_object(
                                  'identifier', role.identifier,
                                  'name', role.name
                              )), '[]')
                              from possible_work_order_role join role on possible_work_order_role.role_identifier = role.identifier
                              where possible_work_order_role.possible_work_order_identifier = possible_work_order.identifier
                          )
                      )
                      from possible_work_order
                      where possible_work_order.identifier = work_order.possible_work_order_identifier
                  ),
                  'patient', (
                      select jsonb_build_object(
                          'identifier', patient.identifier,
                          'first_name', patient.first_name,
                          'last_name', patient.last_name,
                          'code', patient.code
                      )
                      from patient
                      where patient.identifier = work_order.patient_identifier
                  ),
                  'location', (
                      select jsonb_build_object(
                          'identifier', location.identifier,
                          'name', location.name,
                          'serial', location.serial
                      )
                      from location
                      inner join location_patient
                      on location_patient.location_identifier = location.identifier
                      where location_patient.patient_identifier = work_order.patient_identifier
                  ),
                  'employee_identifier', work_order.employee_identifier,
                  'mailed_at', work_order.mailed_at
              )), '[]')
    from      work_order    
    where     work_order.mailed_at is null and work_order.timestamp > (NOW() - INTERVAL '2 hours');;
$$;


ALTER FUNCTION public.cas_mail_work_order_get() OWNER TO aperi;

--
-- Name: cas_mail_work_order_mailed(integer); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_mail_work_order_mailed(integer) RETURNS void
    LANGUAGE sql
    AS $_$
    update    work_order
    set       mailed_at = current_timestamp
    where     work_order.identifier = $1;
$_$;


ALTER FUNCTION public.cas_mail_work_order_mailed(integer) OWNER TO aperi;

--
-- Name: cas_mis_sync_connection_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_mis_sync_connection_get() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
    select    coalesce(jsonb_agg(jsonb_build_object(
                  'identifier', mis_connection.identifier,
                  'name', mis_connection.name,
                  'type', mis_connection.type,
                  'definition', mis_connection.definition,
                  'populated_at', mis_connection.populated_at
              ) order by mis_connection.name), '[]')
    from      mis_connection;
$$;


ALTER FUNCTION public.cas_mis_sync_connection_get() OWNER TO aperi;

--
-- Name: cas_mis_sync_populate(integer, jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_mis_sync_populate(integer, jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
    _input         record;
    _department    department;
    _location      location;
    _employee      employee;
    _patient       patient;
begin
    -----------
    -- input --
    -----------

    drop table if exists input_department;
    drop table if exists input_location;
    drop table if exists input_employee;
    drop table if exists input_patient;

    create temp table input_department on commit drop as
    select    department->'identification' as identification, department->'data' as data, (department->>'cas_mode')::cas_mode as cas_mode, department->>'code' as code, department->>'name' as name
    from      jsonb_array_elements($2->'departments') as department;

    create temp table input_location on commit drop as
    select    location->'identification' as identification, location->'data' as data, (location->>'cas_mode')::cas_mode as cas_mode, location->'department' as department, location->>'name' as name
    from      jsonb_array_elements($2->'locations') as location;

    create temp table input_employee on commit drop as
    select    employee->'identification' as identification, employee->'data' as data, (employee->>'cas_mode')::cas_mode as cas_mode, employee->>'code' as code, employee->>'name' as name
    from      jsonb_array_elements($2->'employees') as employee;

    create temp table input_patient on commit drop as
    select    patient->'identification' as identification, patient->'data' as data, (patient->>'cas_mode')::cas_mode as cas_mode, patient->'location' as location, patient->>'code' as code, patient->>'name' as name, patient->>'first_name' as first_name, patient->>'last_name' as last_name, patient->>'sex' as sex
    from      jsonb_array_elements($2->'patients') as patient;

    -------------
    -- patient --
    -------------

    update    mis_connection_patient
    set       mis_mode = 'ABSENT'
    where     mis_connection_patient.mis_connection_identifier = $1 and
              mis_connection_patient.identification not in(select input_patient.identification from input_patient);

    --------------
    -- employee --
    --------------

    update    mis_connection_employee
    set       mis_mode = 'ABSENT'
    where     mis_connection_employee.mis_connection_identifier = $1 and
              mis_connection_employee.identification not in(select input_employee.identification from input_employee);

    --------------
    -- location --
    --------------

    --
    -- AP-313 - Cevi does not expose the locations. Instead, we derive them from the patients. However, when a location
    --          becomes empty, we should not delete it, as we want to the corresponding devices to remain functional.
    --

    if (select mis_connection.type not in('CEVI') from mis_connection where mis_connection.identifier = $1) then
        update    mis_connection_location
        set       mis_mode = 'ABSENT'
        where     mis_connection_location.mis_connection_identifier = $1 and
                  mis_connection_location.identification not in(select input_location.identification from input_location);
    end if;

    ----------------
    -- department --
    ----------------

    update    mis_connection_department
    set       mis_mode = 'ABSENT'
    where     mis_connection_department.mis_connection_identifier = $1 and
              mis_connection_department.identification not in(select input_department.identification from input_department);

    ----------------
    -- department --
    ----------------

    for _input in
        select    input_department.*
        from      input_department
    loop
        -- department
        select        department.*
        into          _department
        from          department
        inner join    mis_connection_department
        on            department.identifier = mis_connection_department.department_identifier
        where         mis_connection_department.mis_connection_identifier = $1 and
                      mis_connection_department.identification = _input.identification;

        if _department is null then
            insert into    department(cas_mode, code, name, site_identifier)
            select         coalesce(_input.cas_mode, 'ACTIVE'), _input.code, _input.name, 1
            returning      department.*
            into           _department;

            insert into    mis_connection_department(mis_connection_identifier, department_identifier, identification, data)
            select         $1, _department.identifier, _input.identification, _input.data;
        else
            update    department
            set       cas_mode = case when department.cas_mode != 'DELETED' then coalesce(_input.cas_mode, department.cas_mode) else department.cas_mode end,
                      name = _input.name
            where     department.identifier = _department.identifier;

            update    mis_connection_department
            set       mis_mode = 'PRESENT',
                      data = _input.data
            where     mis_connection_department.mis_connection_identifier = $1 and
                      mis_connection_department.department_identifier = _department.identifier;
        end if;
    end loop;

    --------------
    -- location --
    --------------

    for _input in
        select    input_location.*
        from      input_location
    loop
        -- department (mandatory)
        select        department.*
        into          _department
        from          department
        inner join    mis_connection_department
        on            department.identifier = mis_connection_department.department_identifier
        where         department.cas_mode != 'DELETED' and
                      mis_connection_department.mis_connection_identifier = $1 and
                      mis_connection_department.identification = _input.department;

        -- location
        select        location.*
        into          _location
        from          location
        inner join    mis_connection_location
        on            location.identifier = mis_connection_location.location_identifier
        where         mis_connection_location.mis_connection_identifier = $1 and
                      mis_connection_location.identification = _input.identification;

        if _location is null then
            insert into    location(cas_mode, department_identifier, name)
            select         coalesce(_input.cas_mode, 'ACTIVE'), _department.identifier, _input.name
            returning      location.*
            into           _location;

            if _location.identifier is not null then
                insert into    mis_connection_location(mis_connection_identifier, location_identifier, identification, data)
                select         $1, _location.identifier, _input.identification, _input.data;
            end if;
        else
            update    location
            set       cas_mode = case when location.cas_mode != 'DELETED' then coalesce(_input.cas_mode, location.cas_mode) else location.cas_mode end,
                      department_identifier = _department.identifier,
                      name = _input.name
            where     location.identifier = _location.identifier;

            update    mis_connection_location
            set       mis_mode = 'PRESENT',
                      data = _input.data
            where     mis_connection_location.mis_connection_identifier = $1 and
                      mis_connection_location.location_identifier = _location.identifier;
        end if;
    end loop;

    --------------
    -- employee --
    --------------

    for _input in
        select    input_employee.*
        from      input_employee
    loop
        -- employee
        select        employee.*
        into          _employee
        from          employee
        inner join    mis_connection_employee
        on            employee.identifier = mis_connection_employee.employee_identifier
        where         mis_connection_employee.mis_connection_identifier = $1 and
                      mis_connection_employee.identification = _input.identification;

        if _employee is null then
            insert into    employee(cas_mode, code, name, cms)
            select         coalesce(_input.cas_mode, 'ACTIVE'), _input.code, _input.name, 'APERI'
            returning      employee.*
            into           _employee;

            insert into    mis_connection_employee(mis_connection_identifier, employee_identifier, identification, data)
            select         $1, _employee.identifier, _input.identification, _input.data;
        else
            update    employee
            set       cas_mode = case when employee.cas_mode != 'DELETED' then coalesce(_input.cas_mode, employee.cas_mode) else employee.cas_mode end,
                      name = _input.name
            where     employee.identifier = _employee.identifier;

            update    mis_connection_employee
            set       mis_mode = 'PRESENT',
                      data = _input.data
            where     mis_connection_employee.mis_connection_identifier = $1 and
                      mis_connection_employee.employee_identifier = _employee.identifier;
        end if;
    end loop;

    -------------
    -- patient --
    -------------

    for _input in
        select    input_patient.*
        from      input_patient
    loop
        -- location (optional)
        select        location.*
        into          _location
        from          location
        inner join    mis_connection_location
        on            location.identifier = mis_connection_location.location_identifier
        where         location.cas_mode != 'DELETED' and
                      mis_connection_location.mis_connection_identifier = $1 and
                      mis_connection_location.identification = _input.location;

        -- patient
        select        patient.*
        into          _patient
        from          patient
        inner join    mis_connection_patient
        on            patient.identifier = mis_connection_patient.patient_identifier
        where         mis_connection_patient.mis_connection_identifier = $1 and
                      mis_connection_patient.identification = _input.identification;

        if _patient is null then
            insert into    patient(cas_mode, code, first_name, last_name, sex)
            select         coalesce(_input.cas_mode, 'ACTIVE'), _input.code, _input.first_name, _input.last_name, _input.sex
            returning      patient.*
            into           _patient;

            if _location.identifier is not null then
                insert into    location_patient(location_identifier, patient_identifier)
                select         _location.identifier, _patient.identifier;
            end if;

            insert into    mis_connection_patient(mis_connection_identifier, patient_identifier, identification, data)
            select         $1, _patient.identifier, _input.identification, _input.data;
        else
            update    patient
            set       cas_mode = case when patient.cas_mode != 'DELETED' then coalesce(_input.cas_mode, patient.cas_mode) else patient.cas_mode end,
                      first_name = _input.first_name,
                      last_name = _input.last_name,
                      sex = _input.sex
            where     patient.identifier = _patient.identifier;

            update    mis_connection_patient
            set       mis_mode = 'PRESENT',
                      data = _input.data
            where     mis_connection_patient.mis_connection_identifier = $1 and
                      mis_connection_patient.patient_identifier = _patient.identifier;

            if _location.identifier is not null then
                insert into    location_patient(location_identifier, patient_identifier)
                select         _location.identifier, _patient.identifier
                on conflict
                do nothing;

                delete from    location_patient
                using          mis_connection_location
                where          location_patient.location_identifier != _location.identifier and
                               location_patient.patient_identifier = _patient.identifier and
                               location_patient.location_identifier = mis_connection_location.location_identifier and
                               mis_connection_location.mis_connection_identifier = $1;
            else
                delete from    location_patient
                using          mis_connection_location
                where          location_patient.patient_identifier = _patient.identifier and
                               location_patient.location_identifier = mis_connection_location.location_identifier and
                               mis_connection_location.mis_connection_identifier = $1;
            end if;
        end if;
    end loop;
end
$_$;


ALTER FUNCTION public.cas_mis_sync_populate(integer, jsonb) OWNER TO aperi;

--
-- Name: cas_mis_sync_populate_succeed(integer); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_mis_sync_populate_succeed(integer) RETURNS void
    LANGUAGE sql
    AS $_$
    update    mis_connection
    set       populated_at = current_timestamp
    where     mis_connection.identifier = $1;
$_$;


ALTER FUNCTION public.cas_mis_sync_populate_succeed(integer) OWNER TO aperi;

--
-- Name: cas_notification(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_notification() RETURNS jsonb
    LANGUAGE sql
    AS $$
    with
    cas_notification as
    (
        delete from cas_notification returning cas_notification.*
    )
    select    jsonb_object_agg(cas_notification.category, cas_notification.payload)
    from      (
                  select      cas_notification.category, jsonb_concat_agg(cas_notification.payload)
                  from        cas_notification
                  group by    cas_notification.category
              ) as cas_notification(category, payload);
$$;


ALTER FUNCTION public.cas_notification() OWNER TO aperi;

--
-- Name: cas_reporting(text, jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_reporting(text, jsonb, OUT jsonb) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $_$
begin
    if $2?'paging' then
        execute    format('select coalesce(jsonb_agg(_.report), ''[]'') from (select * from %I($1) limit $2 offset $3) as _(report)', 'cas_reporting_' || $1)
        using      (select jsonb_object_agg(_->>'key', _->'value') from jsonb_array_elements($2->'parameters') as _),
                   coalesce(($2->'paging'->>'limit')::int8, 1),
                   coalesce(($2->'paging'->>'offset')::int8, 0)
        into       $3;
    else
        execute    format('select coalesce(jsonb_agg(_.report), ''[]'') from %I($1) as _(report)', 'cas_reporting_' || $1)
        using      (select jsonb_object_agg(_->>'key', _->'value') from jsonb_array_elements($2->'parameters') as _)
        into       $3;
    end if;
end
$_$;


ALTER FUNCTION public.cas_reporting(text, jsonb, OUT jsonb) OWNER TO aperi;

--
-- Name: cas_reporting_call(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_reporting_call(jsonb) RETURNS SETOF jsonb
    LANGUAGE sql STABLE
    AS $_$
    select      q.call
    from        (select * from cas_reporting_call_main($1) union all select * from cas_reporting_call_remote($1) union all select * from cas_reporting_call_wander($1)) as q(call)
    order by    (case when not $1?'sort_by'                   then q.call->'started_at' end) desc,
                (case when $1->>'sort_by' = 'started-at-asc'  then q.call->'started_at' end),
                (case when $1->>'sort_by' = 'started-at-desc' then q.call->'started_at' end) desc,
                (case when $1->>'sort_by' = 'ended-at-asc'    then q.call->'ended_at' end),
                (case when $1->>'sort_by' = 'ended-at-desc'   then q.call->'ended_at' end) desc;
$_$;


ALTER FUNCTION public.cas_reporting_call(jsonb) OWNER TO aperi;

--
-- Name: cas_reporting_call_detail(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_reporting_call_detail(jsonb) RETURNS SETOF jsonb
    LANGUAGE sql STABLE
    AS $_$
    with
    context(tag, state, entered_at, location_identifier, source, ordinal) as
    (
        select       coalesce(log_engine_context_location.tag, log_engine_context_device.tag, log_engine_context_patient.tag),
                     coalesce(log_engine_context_location.state, log_engine_context_device.state, log_engine_context_patient.state),
                     coalesce(log_engine_context_location.entered_at, log_engine_context_device.entered_at, log_engine_context_patient.entered_at),
                     coalesce(log_engine_context_location.location_identifier, remote_location.identifier, wander_location.identifier),
                     coalesce(log_engine_context_location.parameters->>'MAIN_CAUSE_TEXT', log_engine_context_device.parameters->>'MAIN_CAUSE_TEXT', log_engine_context_patient.parameters->>'MAIN_CAUSE_TEXT'),
                     q.ordinal
        from         jsonb_array_elements_text($1->'tags') with ordinality q(tag, ordinal)
        left join    log_engine_context_location
        on           log_engine_context_location.tag = q.tag
        left join    log_engine_context_device
        on           log_engine_context_device.tag = q.tag
        left join    log_engine_context_patient
        on           log_engine_context_patient.tag = q.tag
        left join    location as remote_location
        on           remote_location.serial = (coalesce(log_engine_context_patient.parameters->>'REMOTE_LOCATION_SERIAL', log_engine_context_patient.parameters->>'LOCATION_SERIAL'))::int
        left join    location as wander_location
        on           wander_location.serial = (coalesce(log_engine_context_patient.parameters->>'WANDER_LOCATION_SERIAL', log_engine_context_patient.parameters->>'LOCATION_SERIAL'))::int
    )
    select                jsonb_build_object('transitions', q2.transitions, 'cares', q3.cares, 'duties', q4.duties, 'messages', q5.messages, 'notifications', q6.notifications, 'call_reason', q7.call_reason)
    from                  (
                              select    tstzrange(min(context.entered_at), max(context.entered_at), case when min(context.entered_at) != max(context.entered_at) then '[)' else '[]' end)
                              from      context
                          ) as q1(period)
    cross join lateral    (
                              select       array_agg(jsonb_build_object('state', context.state, 'timestamp', context.entered_at, 'location', location.name, 'source', context.source) order by context.ordinal)
                              from         context
                              left join    location
                              on           context.location_identifier = location.identifier
                          ) as q2(transitions)
    cross join lateral    (
                              select        array_agg(jsonb_build_object('employee', employee.name, 'entered_at', lower(log_care.period), 'left_at', nullif(upper(log_care.period), 'infinity')) order by log_care.period, employee.name)
                              from          log_care
                              inner join    employee
                              on            employee.identifier = log_care.employee_identifier
                              where         log_care.location_identifier in(select context.location_identifier from context) and
                                            log_care.period && q1.period
                          ) as q3(cares)
    cross join lateral    (
                              select        array_agg(jsonb_build_object('crew', crew.name, 'employee', employee.name, 'role', role.name) order by log_duty.period, crew.name, employee.name, role.name)
                              from          log_duty
                              inner join    crew
                              on            crew.identifier = log_duty.crew_identifier
                              inner join    employee
                              on            employee.identifier = log_duty.employee_identifier
                              inner join    role
                              on            role.identifier = log_duty.role_identifier
                              inner join    crew_location
                              on            crew_location.crew_identifier = crew.identifier
                              where         log_duty.period && q1.period and
                                            crew_location.location_identifier in(select context.location_identifier from context)
                          ) as q4(duties)
    cross join lateral    (
                              select    array_agg(jsonb_build_object('type', message.type, 'account', message.number, 'employees', message.employees, 'message', message.message, 'created_at', message.created_at, 'delivered_at', message.delivered_at, 'acknowledged_at', message.acknowledged_at) order by message.created_at, message.type, message.identifier)
                              from      (
                                            select        'DECT', dect_message.identifier, dect_account.number::text, q.employees, dect_message.message, dect_message.created_at, coalesce(dect_message.timestamp_delivered, dect_message.timestamp_sent), dect_message.timestamp_man_ack
                                            from          dect_message
                                            inner join    dect_account
                                            on            dect_message.account_identifier = dect_account.identifier
                                            cross join    lateral (
                                                              select        string_agg(employee.name, ', ' order by employee.name)
                                                              from          log_employee_dect_account
                                                              inner join    employee
                                                              on            employee.identifier = log_employee_dect_account.employee_identifier
                                                              where         log_employee_dect_account.dect_account_identifier = dect_message.account_identifier and
                                                                            log_employee_dect_account.period @> dect_message.created_at
                                                          ) as q(employees)
                                            where         dect_message.tag in(select context.tag from context)
                                            union all
                                            select        'APP', app_message.identifier, null, employee.name, app_message.message, app_message.timestamp_sent, app_message.timestamp_delivered, app_message.timestamp_man_ack
                                            from          app_message
                                            inner join    employee
                                            on            employee.identifier = app_message.employee_identifier
                                            where         app_message.tag in(select context.tag from context)
                                            union all
                                            select        'SPECTRALINK', spectralink_message.identifier, spectralink_account.number, q.employees, spectralink_message.parameters->>'display', spectralink_message.created_at, spectralink_message.sent_at, null
                                            from          spectralink_message
                                            inner join    spectralink_message_reference
                                            on            spectralink_message.key = spectralink_message_reference.key
                                            inner join    spectralink_account
                                            on            spectralink_message.account_identifier = spectralink_account.identifier
                                            cross join    lateral (
                                                              select        string_agg(employee.name, ', ' order by employee.name)
                                                              from          log_employee_spectralink_account
                                                              inner join    employee
                                                              on            employee.identifier = log_employee_spectralink_account.employee_identifier
                                                              where         log_employee_spectralink_account.spectralink_account_identifier = spectralink_message.account_identifier and
                                                                            log_employee_spectralink_account.period @> spectralink_message.created_at
                                                          ) as q(employees)
                                            where         spectralink_message_reference.tag in(select context.tag from context)
                                        ) as message(type, identifier, number, employees, message, created_at, delivered_at, acknowledged_at)
                          ) as q5(messages)
    cross join lateral    (
                              select        array_agg(jsonb_build_object('status', status.type, 'message', notification.message, 'created_at', notification.timestamp, 'acknowledged_at', notification.acknowledged_at, 'employee', employee.name))
                              from          notification
                              inner join    status
                              on            status.identifier = notification.status_identifier
                              left join     employee
                              on            employee.identifier = notification.employee_identifier
                              where         notification.tag in(select context.tag from context)
                          ) as q6(notifications)
    cross join lateral    (
                              select    array_agg(jsonb_build_object('category', call_reason.category, 'timestamp', call_reason.timestamp, 'location', call_reason.location, 'employee', call_reason.employee, 'source', call_reason.source, 'comment', call_reason.comment))
                              from      (
                                            select        concat(call_reason_category.prefix, ' - ', call_reason_category.name), call_reason.created_at, location.name, employee.name, call_reason.source, call_reason.comment
                                            from          call_reason
                                            inner join    call_reason_category
                                            on            call_reason.call_reason_category_identifier = call_reason_category.identifier
                                            left join     location
                                            on            call_reason.location_identifier = location.identifier
                                            left join     employee
                                            on            call_reason.employee_identifier = employee.identifier
                                            where         call_reason.tag in(select context.tag from context)
                                            order by      call_reason.created_at desc
                                            limit         1
                                        ) as call_reason(category, timestamp, location, employee, source, comment)
                          ) as q7(call_reason);
$_$;


ALTER FUNCTION public.cas_reporting_call_detail(jsonb) OWNER TO aperi;

--
-- Name: cas_reporting_call_main(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_reporting_call_main(jsonb) RETURNS SETOF jsonb
    LANGUAGE sql STABLE
    AS $_$
    with
    log_engine_context_location as
    (
        select    log_engine_context_location.*,
                  count(*) filter(where log_engine_context_location.state in('NORMAL', 'ABSENT')) over w as session
        from      log_engine_context_location
        where     log_engine_context_location.state in('NORMAL', 'ABSENT', 'WAITING', 'WAITINGLATE', 'NORESPONSE', 'SERVICE', 'VISIT', 'REMINDER', 'NURSING', 'CARING', 'ASSISTANCEBYNURSING', 'ASSISTANCEBYCARING') and
                  case when $1?'location' then log_engine_context_location.location_identifier = any(array(select q.location_identifier::integer from jsonb_array_elements_text($1->'location') as q(location_identifier))) else true end and
                  case when $1?'period' then log_engine_context_location.entered_at >= ($1->'period'->>0)::timestamptz and log_engine_context_location.entered_at < ($1->'period'->>1)::timestamptz else true end
        window    w as (partition by log_engine_context_location.location_identifier order by log_engine_context_location.entered_at, log_engine_context_location.identifier rows between unbounded preceding and 1 preceding)
    ),
    log_engine_context_location_session(location_identifier, started_at, ended_at, response_time, resolution_time, source, types, tags) as
    (
        select      log_engine_context_location.location_identifier,
                    min(log_engine_context_location.entered_at),
                    case when bool_or(log_engine_context_location.state in('NORMAL', 'ABSENT')) then max(log_engine_context_location.entered_at) end,
                    case when bool_or(log_engine_context_location.state in('NURSING')) then extract(epoch from min(log_engine_context_location.entered_at) filter(where log_engine_context_location.state in('NURSING')) - min(log_engine_context_location.entered_at)) end,
                    case when bool_or(log_engine_context_location.state in('NORMAL', 'ABSENT')) then case when bool_or(log_engine_context_location.state in('NURSING')) then extract(epoch from max(log_engine_context_location.entered_at) - min(log_engine_context_location.entered_at) filter(where log_engine_context_location.state in('NURSING'))) else extract(epoch from max(log_engine_context_location.entered_at) - min(log_engine_context_location.entered_at)) end end,
                    case when char_length(first(log_engine_context_location.parameters)->>'MAIN_CAUSE_TEXT') != 0 then first(log_engine_context_location.parameters)->>'MAIN_CAUSE_TEXT' end,
                    array_remove(array
                    [
                        case when bool_or(log_engine_context_location.state in('NURSING')) then 'NURSING' end,
                        case when bool_or(log_engine_context_location.state in('CARING')) then 'CARING' end,
                        case when bool_or(log_engine_context_location.state in('WAITING')) then 'WAITING' end,
                        case when bool_or(log_engine_context_location.state in('WAITINGLATE')) then 'LATE' end,
                        case when bool_or(log_engine_context_location.state in('ASSISTANCEBYNURSING', 'ASSISTANCEBYCARING')) then 'ASSISTANCE' end,
                        case when bool_or(log_engine_context_location.state in('NORESPONSE')) then 'NORESPONSE' end
                    ], null),
                    array_agg(log_engine_context_location.tag order by log_engine_context_location.entered_at, log_engine_context_location.identifier)
        from        log_engine_context_location
        group by    log_engine_context_location.location_identifier,
                    log_engine_context_location.session
        having      bool_or(log_engine_context_location.state not in('NORMAL', 'ABSENT'))
    )
    select        jsonb_build_object
                  (
                      'department',      department.name,
                      'location',        location.name,
                      'patient',         patient.name,
                      'types',           array_to_string(log_engine_context_location_session.types, ', '),
                      'source',          log_engine_context_location_session.source,
                      'started_at',      log_engine_context_location_session.started_at,
                      'ended_at',        log_engine_context_location_session.ended_at,
                      'response_time',   log_engine_context_location_session.response_time,
                      'resolution_time', log_engine_context_location_session.resolution_time,
                      'employees',       employees.names,
                      'call_reason',     call_reason.category_name,
                      '_link',           jsonb_build_object('report', 'call_detail', 'data', jsonb_build_object('tags', log_engine_context_location_session.tags))
                  )
    from          log_engine_context_location_session
    inner join    location
    on            location.identifier = log_engine_context_location_session.location_identifier
    left join     department
    on            department.identifier = location.department_identifier
    left join     lateral (
                      select    q.patient_identifier, q.patient_name
                      from      (
                                    select        patient.identifier, patient.name, count(*) over()
                                    from          log_location_patient
                                    inner join    patient
                                    on            log_location_patient.patient_identifier = patient.identifier
                                    inner join    log_patient_cas_mode
                                    on            log_location_patient.patient_identifier = log_patient_cas_mode.patient_identifier
                                    where         log_location_patient.location_identifier = log_engine_context_location_session.location_identifier and
                                                  log_location_patient.period @> log_engine_context_location_session.started_at and
                                                  log_patient_cas_mode.period @> log_engine_context_location_session.started_at
                                    limit         2
                                ) as q(patient_identifier, patient_name, c)
                      where     q.c = 1
                  ) as patient(identifier, name)
    on            true
    left join     lateral (
                      select        array_agg(distinct employee.identifier), string_agg(distinct employee.name, ', ')
                      from          log_care
                      inner join    employee
                      on            employee.identifier = log_care.employee_identifier
                      where         log_care.location_identifier = log_engine_context_location_session.location_identifier and
                                    log_care.period && tstzrange(log_engine_context_location_session.started_at, log_engine_context_location_session.ended_at, case when log_engine_context_location_session.started_at != log_engine_context_location_session.ended_at then '[)' else '[]' end)
                  ) as employees(identifiers, names)
    on            true
    left join     lateral (
                      select        call_reason_category.identifier, concat(call_reason_category.prefix, ' - ', call_reason_category.name)
                      from          call_reason
                      inner join    call_reason_category
                      on            call_reason.call_reason_category_identifier = call_reason_category.identifier
                      where         call_reason.tag = any(log_engine_context_location_session.tags)
                      order by      call_reason.created_at desc
                      limit         1
                  ) as call_reason(category_identifier, category_name)
    on            true
    where         case when $1?'patient' then patient.identifier = any(array(select q.patient_identifier::integer from jsonb_array_elements_text($1->'patient') as q(patient_identifier))) else true end and
                  case when $1?'types' then log_engine_context_location_session.types @> any(select array[q.type] from jsonb_array_elements_text($1->'types') as q(type)) or ($1->'types' ? '/' and array_length(log_engine_context_location_session.types, 1) is null) else true end and
                  case when $1?'employee' then exists(select e.identifier from unnest(employees.identifiers) as e(identifier) where e.identifier = any(array(select q.employee_identifier::integer from jsonb_array_elements_text($1->'employee') as q(employee_identifier)))) else true end and
                  case when $1?'call_reason_category' then call_reason.category_identifier = any(array(select q.call_reason_category_identifier::integer from jsonb_array_elements_text($1->'call_reason_category') as q(call_reason_category_identifier))) else true end;
$_$;


ALTER FUNCTION public.cas_reporting_call_main(jsonb) OWNER TO aperi;

--
-- Name: cas_reporting_call_remote(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_reporting_call_remote(jsonb) RETURNS SETOF jsonb
    LANGUAGE sql STABLE
    AS $_$
    with
    log_engine_context_patient as
    (
        select    log_engine_context_patient.*,
                  count(*) filter(where log_engine_context_patient.state in('REMOTE-CALL-OFF')) over w as session
        from      log_engine_context_patient
        where     log_engine_context_patient.state in('REMOTE-CALL-OFF', 'REMOTE-CALL-ON') and
                  case when $1?'patient' then log_engine_context_patient.patient_identifier = any(array(select q.patient_identifier::integer from jsonb_array_elements_text($1->'patient') as q(patient_identifier))) else true end and
                  case when $1?'period' then log_engine_context_patient.entered_at >= ($1->'period'->>0)::timestamptz and log_engine_context_patient.entered_at < ($1->'period'->>1)::timestamptz else true end
        window    w as (partition by log_engine_context_patient.patient_identifier order by log_engine_context_patient.entered_at, log_engine_context_patient.identifier rows between unbounded preceding and 1 preceding)
    ),
    log_engine_context_patient_session(patient_identifier, started_at, ended_at, response_time, location_serials, tags) as
    (
        select      log_engine_context_patient.patient_identifier,
                    min(log_engine_context_patient.entered_at),
                    case when bool_or(log_engine_context_patient.state in('REMOTE-CALL-OFF')) then max(log_engine_context_patient.entered_at) end,
                    case when bool_or(log_engine_context_patient.state in('REMOTE-CALL-OFF')) then extract(epoch from max(log_engine_context_patient.entered_at) - min(log_engine_context_patient.entered_at)) end,
                    array_agg((coalesce(log_engine_context_patient.parameters->>'REMOTE_LOCATION_SERIAL', log_engine_context_patient.parameters->>'LOCATION_SERIAL'))::int order by log_engine_context_patient.entered_at, log_engine_context_patient.identifier),
                    array_agg(log_engine_context_patient.tag order by log_engine_context_patient.entered_at, log_engine_context_patient.identifier)
        from        log_engine_context_patient
        group by    log_engine_context_patient.patient_identifier,
                    log_engine_context_patient.session
        having      -- filter: empty session
                    bool_or(log_engine_context_patient.state not in('REMOTE-CALL-OFF'))
    )
    select        jsonb_build_object
                  (
                      'department',    locations.department_names,
                      'location',      locations.location_names,
                      'patient',       patient.name,
                      'types',         'REMOTE',
                      'started_at',    log_engine_context_patient_session.started_at,
                      'ended_at',      log_engine_context_patient_session.ended_at,
                      'response_time', log_engine_context_patient_session.response_time,
                      'employees',     employees.names,
                      'call_reason',   call_reason.category_name,
                      '_link',         jsonb_build_object('report', 'call_detail', 'data', jsonb_build_object('tags', log_engine_context_patient_session.tags))
                  )
    from          log_engine_context_patient_session
    inner join    patient
    on            patient.identifier = log_engine_context_patient_session.patient_identifier
    left join     lateral (
                      select       array_agg(distinct location.identifier), string_agg(location.name, ', '), string_agg(department.name, ', ')
                      from         location
                      left join    department
                      on           department.identifier = location.department_identifier
                      where        location.serial = any(log_engine_context_patient_session.location_serials)
                  ) as locations(location_identifiers, location_names, department_names)
    on            true
    left join     lateral (
                      select        array_agg(distinct q.identifier), string_agg(distinct q.name, ', ')
                      from      (
                                     select        employee.identifier, employee.name
                                     from          notification
                                     inner join    employee
                                     on            employee.identifier = notification.employee_identifier
                                     where         notification.tag = any(log_engine_context_patient_session.tags)
                                     union all
                                     select        employee.identifier, employee.name
                                     from          dect_message
                                     inner join    log_employee_dect_account
                                     on            log_employee_dect_account.dect_account_identifier = dect_message.account_identifier and
                                                   log_employee_dect_account.period @> dect_message.created_at
                                     inner join    employee
                                     on            employee.identifier = log_employee_dect_account.employee_identifier
                                     where         dect_message.tag = any(log_engine_context_patient_session.tags) and
                                                   dect_message.timestamp_man_ack is not null
                                     union all
                                     select        employee.identifier, employee.name
                                     from          app_message
                                     inner join    employee
                                     on            employee.identifier = app_message.employee_identifier
                                     where         app_message.tag = any(log_engine_context_patient_session.tags) and
                                                   app_message.timestamp_man_ack is not null
                                     --  union all
                                     --  select        employee.identifier, employee.name
                                     --  from          spectralink_message
                                     --  inner join    spectralink_message_reference
                                     --  on            spectralink_message.key = spectralink_message_reference.key
                                     --  inner join    log_employee_spectralink_account
                                     --  on            log_employee_spectralink_account.spectralink_account_identifier = spectralink_message.account_identifier and
                                     --                log_employee_spectralink_account.period @> spectralink_message.created_at
                                     --  inner join    employee
                                     --  on            employee.identifier = log_employee_spectralink_account.employee_identifier
                                     --  where         spectralink_message_reference.tag = any(log_engine_context_patient_session.tags) and
                                     --                spectralink_message.??? is not null
                                     -- TODO: spectralink acks?
                                ) as q(identifier, name)
                  ) as employees(identifiers, names)
    on            true
    left join     lateral (
                      select        call_reason.call_reason_category_identifier, concat(call_reason_category.prefix, ' - ', call_reason_category.name)
                      from          call_reason
                      inner join    call_reason_category
                      on            call_reason.call_reason_category_identifier = call_reason_category.identifier
                      where         call_reason.tag = any(log_engine_context_patient_session.tags)
                      order by      call_reason.created_at desc
                      limit         1
                  ) as call_reason(category_identifier, category_name)
    on            true
    where         case when $1?'types' then array['REMOTE'] @> any(select array[q.type] from jsonb_array_elements_text($1->'types') as q(type)) else true end and
                  case when $1?'location' then exists(select l.identifier from unnest(locations.location_identifiers) as l(identifier) where l.identifier = any(array(select q.location_identifier::integer from jsonb_array_elements_text($1->'location') as q(location_identifier)))) else true end and
                  case when $1?'employee' then exists(select e.identifier from unnest(employees.identifiers) as e(identifier) where e.identifier = any(array(select q.employee_identifier::integer from jsonb_array_elements_text($1->'employee') as q(employee_identifier)))) else true end and
                  case when $1?'call-reason-category' then call_reason.category_identifier = any(array(select q.call_reason_category_identifier::integer from jsonb_array_elements_text($1->'call-reason-category') as q(call_reason_category_identifier))) else true end;
$_$;


ALTER FUNCTION public.cas_reporting_call_remote(jsonb) OWNER TO aperi;

--
-- Name: cas_reporting_call_wander(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_reporting_call_wander(jsonb) RETURNS SETOF jsonb
    LANGUAGE sql STABLE
    AS $_$
    with
    log_engine_context_patient as
    (
        select    log_engine_context_patient.*,
                  count(*) filter(where log_engine_context_patient.state in('WANDER-CALL-OFF')) over w as session
        from      log_engine_context_patient
        where     log_engine_context_patient.state in('WANDER-CALL-OFF', 'WANDER-CALL-ON') and
                  case when $1?'patient' then log_engine_context_patient.patient_identifier = any(array(select q.patient_identifier::integer from jsonb_array_elements_text($1->'patient') as q(patient_identifier))) else true end and
                  case when $1?'period' then log_engine_context_patient.entered_at >= ($1->'period'->>0)::timestamptz and log_engine_context_patient.entered_at < ($1->'period'->>1)::timestamptz else true end
        window    w as (partition by log_engine_context_patient.patient_identifier order by log_engine_context_patient.entered_at, log_engine_context_patient.identifier rows between unbounded preceding and 1 preceding)
    ),
    log_engine_context_patient_session(patient_identifier, started_at, ended_at, resolution_time, location_serials, tags) as
    (
        select      log_engine_context_patient.patient_identifier,
                    min(log_engine_context_patient.entered_at),
                    case when bool_or(log_engine_context_patient.state in('WANDER-CALL-OFF')) then max(log_engine_context_patient.entered_at) end,
                    case when bool_or(log_engine_context_patient.state in('WANDER-CALL-OFF')) then extract(epoch from max(log_engine_context_patient.entered_at) - min(log_engine_context_patient.entered_at)) end,
                    array_agg((coalesce(log_engine_context_patient.parameters->>'WANDER_LOCATION_SERIAL', log_engine_context_patient.parameters->>'LOCATION_SERIAL'))::int order by log_engine_context_patient.entered_at, log_engine_context_patient.identifier),
                    array_agg(log_engine_context_patient.tag order by log_engine_context_patient.entered_at, log_engine_context_patient.identifier)
        from        log_engine_context_patient
        group by    log_engine_context_patient.patient_identifier,
                    log_engine_context_patient.session
        having      -- filter: empty session
                    bool_or(log_engine_context_patient.state not in('WANDER-CALL-OFF'))
    )
    select        jsonb_build_object
                  (
                      'department',      locations.department_names,
                      'location',        locations.location_names,
                      'patient',         patient.name,
                      'types',           'WANDER',
                      'started_at',      log_engine_context_patient_session.started_at,
                      'ended_at',        log_engine_context_patient_session.ended_at,
                      'resolution_time', log_engine_context_patient_session.resolution_time,
                      'employees',       employees.names,
                      'call_reason',     call_reason.category_name,
                      '_link',           jsonb_build_object('report', 'call_detail', 'data', jsonb_build_object('tags', log_engine_context_patient_session.tags))
                  )
    from          log_engine_context_patient_session
    inner join    patient
    on            patient.identifier = log_engine_context_patient_session.patient_identifier
    left join     lateral (
                      select       array_agg(distinct location.identifier), string_agg(location.name, ', '), string_agg(department.name, ', ')
                      from         location
                      left join    department
                      on           department.identifier = location.department_identifier
                      where        location.serial = any(log_engine_context_patient_session.location_serials)
                  ) as locations(location_identifiers, location_names, department_names)
    on            true
    left join     lateral (
                      select        array_agg(distinct q.identifier), string_agg(distinct q.name, ', ')
                      from      (
                                     select        employee.identifier, employee.name
                                     from          log_care
                                     inner join    employee
                                     on            employee.identifier = log_care.employee_identifier
                                     where         log_care.location_identifier = any(locations.location_identifiers) and
                                                   lower(log_care.period) <= log_engine_context_patient_session.ended_at and
                                                   upper(log_care.period) >= log_engine_context_patient_session.started_at
                                ) as q(identifier, name)
                  ) as employees(identifiers, names)
    on            true
    left join     lateral (
                      select        call_reason.call_reason_category_identifier, concat(call_reason_category.prefix, ' - ', call_reason_category.name)
                      from          call_reason
                      inner join    call_reason_category
                      on            call_reason.call_reason_category_identifier = call_reason_category.identifier
                      where         call_reason.tag = any(log_engine_context_patient_session.tags)
                      order by      call_reason.created_at desc
                      limit         1
                  ) as call_reason(category_identifier, category_name)
    on            true
    where         case when $1?'types' then array['WANDER'] @> any(select array[q.type] from jsonb_array_elements_text($1->'types') as q(type)) else true end and
                  case when $1?'location' then exists(select l.identifier from unnest(locations.location_identifiers) as l(identifier) where l.identifier = any(array(select q.location_identifier::integer from jsonb_array_elements_text($1->'location') as q(location_identifier)))) else true end and
                  case when $1?'employee' then exists(select e.identifier from unnest(employees.identifiers) as e(identifier) where e.identifier = any(array(select q.employee_identifier::integer from jsonb_array_elements_text($1->'employee') as q(employee_identifier)))) else true end and
                  case when $1?'call-reason-category' then call_reason.category_identifier = any(array(select q.call_reason_category_identifier::integer from jsonb_array_elements_text($1->'call-reason-category') as q(call_reason_category_identifier))) else true end;
$_$;


ALTER FUNCTION public.cas_reporting_call_wander(jsonb) OWNER TO aperi;

--
-- Name: cas_reporting_duties(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_reporting_duties(jsonb) RETURNS SETOF jsonb
    LANGUAGE sql STABLE
    AS $_$
    select        jsonb_build_object(
                                        'started_at', lower(log_duty.period),
                                        'stopped_at', nullif(upper(log_duty.period), 'infinity'),
                                        'duration', extract(epoch from nullif(upper(log_duty.period), 'infinity') - lower(log_duty.period)),
                                        'employee', employee.name,
                                        'role', role.name,
                                        'dect', string_agg(distinct dect_account.name, ', '),
                                        'spectralink', string_agg(distinct spectralink_account.name, ', '),
                                        'crews', string_agg(distinct crew.name, ', '),
                                        'started_location', started_location.name,
                                        'stopped_location', stopped_location.name
                                    )
    from          log_duty
    inner join    crew
    on            log_duty.crew_identifier = crew.identifier
    inner join    employee
    on            log_duty.employee_identifier = employee.identifier
    inner join    role
    on            log_duty.role_identifier = role.identifier
    left join     log_employee_dect_account
    on            employee.identifier = log_employee_dect_account.employee_identifier and
                  log_employee_dect_account.period && log_duty.period
    left join     dect_account
    on            log_employee_dect_account.dect_account_identifier = dect_account.identifier
    left join     log_employee_spectralink_account
    on            employee.identifier = log_employee_spectralink_account.employee_identifier and
                  log_employee_spectralink_account.period && log_duty.period
    left join     spectralink_account
    on            log_employee_spectralink_account.spectralink_account_identifier = spectralink_account.identifier
    left join     lateral (
                              select        location.name
                              from          log_care
                              inner join    location
                              on            log_care.location_identifier = location.identifier
                              where         log_care.employee_identifier = log_duty.employee_identifier and
                                            log_care.period @> lower(log_duty.period)
                              order by      log_care.period desc
                              limit 1
                  ) as started_location(name)
    on            true
    left join     lateral (
                              select        location.name
                              from          log_care
                              inner join    location
                              on            log_care.location_identifier = location.identifier
                              where         log_care.employee_identifier = log_duty.employee_identifier and
                                            upper(log_duty.period) < 'infinity' and
                                            log_care.period @> upper(log_duty.period)
                              order by      log_care.period asc
                              limit 1
                  ) as stopped_location(name)
    on            true
    where         case when $1?'employee' then employee.identifier in (select q.employee_identifier::integer from jsonb_array_elements_text($1->'employee') as q(employee_identifier)) else true end and
                  case when $1?'role' then role.name in (select q.role_name from jsonb_array_elements_text($1->'role') as q(role_name)) else true end and
                  case when $1?'period' then log_duty.period && tstzrange(($1->'period'->>0)::timestamptz, ($1->'period'->>1)::timestamptz) else true end
    group by      employee.identifier, role.name, log_duty.period, started_location.name, stopped_location.name
    having        case when $1?'dect' then exists(select q.dect_number::integer from jsonb_array_elements_text($1->'dect') as q(dect_number) where q.dect_number::integer = any(array_agg(dect_account.number)) limit 1) else true end and
                  case when $1?'spectralink' then exists(select q.spectralink_number::text from jsonb_array_elements_text($1->'spectralink') as q(spectralink_number) where q.spectralink_number::text = any(array_agg(spectralink_account.number)) limit 1) else true end and
                  case when $1?'crew' then exists(select q.crew_identifier::integer from jsonb_array_elements_text($1->'crew') as q(crew_identifier) where q.crew_identifier::integer = any(array_agg(crew.identifier)) limit 1) else true end
    order by      (case when not $1?'sort_by'                   then lower(log_duty.period) end) desc,
                  (case when $1->>'sort_by' = 'started-at-asc'  then lower(log_duty.period) end),
                  (case when $1->>'sort_by' = 'started-at-desc' then lower(log_duty.period) end) desc,
                  (case when $1->>'sort_by' = 'stopped-at-asc'  then upper(log_duty.period) end),
                  (case when $1->>'sort_by' = 'stopped-at-desc' then upper(log_duty.period) end) desc;
$_$;


ALTER FUNCTION public.cas_reporting_duties(jsonb) OWNER TO aperi;

--
-- Name: cas_reporting_presence(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_reporting_presence(jsonb) RETURNS SETOF jsonb
    LANGUAGE sql STABLE
    AS $_$
    select      jsonb_build_object('type', q.type, 'department', q.department_name, 'location', q.location_name, 'door', q.door_name, 'employee', q.employee_name, 'patient', q.patient_name, 'entered_at', q.entered_at, 'left_at', q.left_at, 'duration', q.duration)
    from        (
                    select        'CARE', department.name, location.name, null, employee.name, null, lower(log_care.period), nullif(upper(log_care.period), 'infinity'), extract(epoch from nullif(upper(log_care.period), 'infinity') - lower(log_care.period))
                    from          log_care
                    inner join    location
                    on            log_care.location_identifier = location.identifier
                    inner join    department
                    on            location.department_identifier = department.identifier
                    inner join    employee
                    on            log_care.employee_identifier = employee.identifier
                    where         case when $1?'location' then location.identifier in(select q.location_identifier::integer from jsonb_array_elements_text($1->'location') as q(location_identifier)) else true end and
                                  case when $1?'period' then log_care.period && tstzrange(($1->'period'->>0)::timestamptz, ($1->'period'->>1)::timestamptz) else true end
                    union all
                    select        'DOOR', department.name, location.name, access_door.name, employee.name, patient.name, log_door.timestamp, null, null
                    from          log_door
                    inner join    access_door
                    on            log_door.access_door_identifier = access_door.identifier
                    inner join    device
                    on            access_door.device_identifier = device.identifier
                    inner join    location
                    on            device.location_identifier = location.identifier
                    inner join    department
                    on            location.department_identifier = department.identifier
                    left join     employee
                    on            log_door.employee_identifier = employee.identifier
                    left join     patient
                    on            log_door.patient_identifier = patient.identifier
                    where         case when $1?'location' then location.identifier in(select q.location_identifier::integer from jsonb_array_elements_text($1->'location') as q(location_identifier)) else true end and
                                  case when $1?'period' then log_door.timestamp >= ($1->'period'->>0)::timestamptz and log_door.timestamp < ($1->'period'->>1)::timestamptz else true end
                ) as q(type, department_name, location_name, door_name, employee_name, patient_name, entered_at, left_at, duration)
    order by    q.entered_at desc, q.department_name, q.location_name;
$_$;


ALTER FUNCTION public.cas_reporting_presence(jsonb) OWNER TO aperi;

--
-- Name: cas_session_create(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_session_create(jsonb) RETURNS jsonb
    LANGUAGE sql
    AS $_$
    insert into    cas_session(employee_identifier)
    select         employee.identifier
    from           employee
    where          employee.cas_user = $1->>'user' and
                   employee.cas_password = crypt($1->>'password', employee.cas_password) and
                   employee.cas_mode = 'ACTIVE'
    returning      jsonb_build_object('identifier', cas_session.identifier, 'employee', cas_session.employee_identifier);
$_$;


ALTER FUNCTION public.cas_session_create(jsonb) OWNER TO aperi;

--
-- Name: cas_session_delete(uuid); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_session_delete(uuid) RETURNS jsonb
    LANGUAGE sql
    AS $_$
    delete from    cas_session
    where          cas_session.identifier = $1
    returning      jsonb_build_object('identifier', cas_session.identifier, 'employee', cas_session.employee_identifier);
$_$;


ALTER FUNCTION public.cas_session_delete(uuid) OWNER TO aperi;

--
-- Name: cas_session_get(uuid); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_session_get(uuid) RETURNS jsonb
    LANGUAGE sql
    AS $_$
    update       cas_session
    set          refreshed_at = current_timestamp
    where        cas_session.identifier = $1
    returning    jsonb_build_object('identifier', cas_session.identifier, 'employee', cas_session.employee_identifier);
$_$;


ALTER FUNCTION public.cas_session_get(uuid) OWNER TO aperi;

--
-- Name: cas_setting_get(jsonb); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.cas_setting_get(jsonb) RETURNS jsonb
    LANGUAGE sql STABLE
    AS $_$
    select    jsonb_build_object(
                  'identifier', setting.identifier,
                  'key', setting.key,
                  'value', setting.value,
                  'description', setting.description,
                  'site_identifier', setting.site_identifier,
                  'process_identifier', setting.process_identifier
              )
    from      setting
    where     setting.key = $1->>'key';
$_$;


ALTER FUNCTION public.cas_setting_get(jsonb) OWNER TO aperi;

--
-- Name: jsonb_diff(jsonb, jsonb, text[]); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.jsonb_diff(jsonb, jsonb, text[]) RETURNS jsonb
    LANGUAGE sql STABLE STRICT PARALLEL SAFE
    AS $_$
    select    jsonb_object_agg(key, jsonb_build_object('old', $1->key, 'new', $2->key))
    from      unnest($3) as key
    where     $1->key is distinct from $2->key;
$_$;


ALTER FUNCTION public.jsonb_diff(jsonb, jsonb, text[]) OWNER TO aperi;

--
-- Name: location_call_end_call(integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.location_call_end_call(location_call_identifier integer, enddtime timestamp with time zone) RETURNS integer
    LANGUAGE plpgsql
    AS $_$    
	DECLARE _location_call_identifier integer := $1;
	DECLARE _normal_status_identifier integer := (select identifier from status where type = 'NORMAL' limit 1);
	DECLARE _time timestamp with time zone := $2;	
	BEGIN        				
		
		--Create the location_call_state_change
		if (_location_call_identifier is not null) then
			RAISE NOTICE '-> Creating call_state_change call id  %', _location_call_identifier;   
			insert into location_call_state_change(location_call_identifier, status_identifier, timestamp, source)
			select _location_call_identifier, _normal_status_identifier, _time, 'module';
		end if;		
		
				--End the Location_Call
        if (_location_call_identifier is not null) then
			RAISE NOTICE '-> Ending call with identifier %', _location_call_identifier;   
		    update location_call set 
				ended = _time, 
				current_status_identifier = null
			where identifier = _location_call_identifier;
        end if;		
     		
		return _location_call_identifier;
   	END
   $_$;


ALTER FUNCTION public.location_call_end_call(location_call_identifier integer, enddtime timestamp with time zone) OWNER TO aperi;

--
-- Name: location_call_find_identifier(integer); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.location_call_find_identifier(location_identifier integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
	DECLARE _locid integer := $1;
    DECLARE _call_identifier integer;
	BEGIN        
		select lc.identifier 
		into _call_identifier
		from location_call lc
		where lc.location_identifier = _locid 			
		and ended is null
		order by started desc
		limit 1;        			
		
		return _call_identifier;
   	END
   $_$;


ALTER FUNCTION public.location_call_find_identifier(location_identifier integer) OWNER TO aperi;

--
-- Name: location_call_raise_call(integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.location_call_raise_call(location_identifer integer, starttime timestamp with time zone) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
    DECLARE _locid integer := $1;
	DECLARE _location_call_identifier integer := 0;
	DECLARE _waiting_status_identifier integer := (select identifier from status where type = 'WAITING' limit 1);
	DECLARE _time timestamp with time zone := $2;
	BEGIN        		
		--If call exisits, we close and create a new one.
		_location_call_identifier := location_call_find_identifier(_locid);
		if (_location_call_identifier is not null) then
			--Close call. --> Refactor to correct proc!!!!!
			perform location_call_end_call(_location_call_identifier, _time);
			RAISE NOTICE 'Logging: closing existing call with ID %', _location_call_identifier;   
		end if;
		--Create the Location_Call
        if (_locid is not null) then			
		    insert into location_call(location_identifier, started, current_status_identifier)
            select _locid, _time,  _waiting_status_identifier           
			returning identifier into _location_call_identifier;			
			RAISE NOTICE 'Logging: created new call with id %', _location_call_identifier;   
        end if;		
		
		--Create the location_call_state_change
		if (_location_call_identifier is not null) then			
			insert into location_call_state_change(location_call_identifier, status_identifier, timestamp, source)
			select _location_call_identifier, _waiting_status_identifier, _time, 'module';
		end if;		
		
		--Create the location_call_patient_in_location
		if (_location_call_identifier is not null) then			
			insert into location_call_patient_in_location(location_call_identifier,patient_identifier)
			select _location_call_identifier, patient_identifier from location_patient lp 
			join patient p on p.identifier = lp.patient_identifier and p.cas_mode = 'ACTIVE' 
			where lp.location_identifier = _locid;
		end if;
		return _location_call_identifier;
   	END
   $_$;


ALTER FUNCTION public.location_call_raise_call(location_identifer integer, starttime timestamp with time zone) OWNER TO aperi;

--
-- Name: location_call_set_employee_presence(integer, integer, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.location_call_set_employee_presence(location_call_identifier integer, employee_identifier integer, timestamp_enter timestamp with time zone, timestamp_leave timestamp with time zone) RETURNS integer
    LANGUAGE plpgsql
    AS $_$    
	DECLARE _location_call_identifier integer := $1;
	DECLARE _employee_identifier integer := $2;	
	DECLARE _timestamp_enter timestamptz := $3;	
	DECLARE _timestamp_leave timestamptz := $4;	
	DECLARE _presence_identifier integer;
	BEGIN        				
		_presence_identifier := (select identifier from location_call_employee_presence lcep 
								 where lcep.employee_identifier = _employee_identifier 
								 and lcep.location_call_identifier = _location_call_identifier 
								 and lcep.timestamp_leave is null and lcep.timestamp_enter = _timestamp_enter limit 1);
		-- if no record exists where leave is null for employee
		if (_presence_identifier is null) then			
			RAISE NOTICE '-> Creating location_call_employee_presence record for location_call  %', _location_call_identifier;   
			insert into location_call_employee_presence(location_call_identifier, employee_identifier, timestamp_enter, timestamp_leave)
			select _location_call_identifier, _employee_identifier, _timestamp_enter, _timestamp_leave
			returning identifier into _presence_identifier;			
		else
			update location_call_employee_presence
			set timestamp_leave = _timestamp_leave
			where identifier = _presence_identifier;			
		end if;		
	
		return _presence_identifier;
   	END
   $_$;


ALTER FUNCTION public.location_call_set_employee_presence(location_call_identifier integer, employee_identifier integer, timestamp_enter timestamp with time zone, timestamp_leave timestamp with time zone) OWNER TO aperi;

--
-- Name: location_call_update_status(integer, integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.location_call_update_status(location_call_identifier integer, new_state integer, updatetime timestamp with time zone) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
    DECLARE _location_call_identifier integer := $1;	
	DECLARE _new_state_identifier integer := $2;	
	DECLARE _time timestamp with time zone := $3;
	DECLARE _location_call_state_change_identifier integer;	
	BEGIN   	
		--Update the Location_Call
        if (_location_call_identifier is not null) then		
		    update location_call
			set current_status_identifier = _new_state_identifier
			where identifier = _location_call_identifier;
			
		--Create the location_call_state_change		
			insert into location_call_state_change(location_call_identifier, status_identifier, timestamp, source)
			select _location_call_identifier, _new_state_identifier, _time, 'module'
			returning identifier into _location_call_state_change_identifier;				
		end if;		
		return _location_call_identifier;
   	END
	$_$;


ALTER FUNCTION public.location_call_update_status(location_call_identifier integer, new_state integer, updatetime timestamp with time zone) OWNER TO aperi;

--
-- Name: notify_location_call_updated(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.notify_location_call_updated() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin	
  if tg_op = 'UPDATE' then				
		if (old) is distinct from (new) then	
	        PERFORM pg_notify('location_call_changes', new.identifier::text );       						
		end if;		
	end if;
  return null;
end
$$;


ALTER FUNCTION public.notify_location_call_updated() OWNER TO aperi;

--
-- Name: patient_lifeline_message_pending_add(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.patient_lifeline_message_pending_add() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    insert into patient_lifeline_message_pending(patient_identifier, lifeline_message_identifier)
    select      new.patient_identifier, message.lifeline_message_identifier
    from        message
    where       message.identifier = new.message_identifier and
                message.lifeline_message_identifier is not null;

    return null;
end;
$$;


ALTER FUNCTION public.patient_lifeline_message_pending_add() OWNER TO aperi;

--
-- Name: patient_lifeline_message_pending_remove(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.patient_lifeline_message_pending_remove() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    delete from patient_lifeline_message_pending
    where       patient_lifeline_message_pending.patient_identifier = new.patient_identifier and
                patient_lifeline_message_pending.lifeline_message_identifier = new.lifeline_message_identifier;

    return null;
end;
$$;


ALTER FUNCTION public.patient_lifeline_message_pending_remove() OWNER TO aperi;

--
-- Name: prune(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.prune() RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
delete from fcm_account where not exists(select from employee where (employee.fcm_account_identifier) = (fcm_account.identifier));
delete from patient_administration_information where not exists(select from patient where (patient.patient_administration_information_identifier) = (patient_administration_information.identifier));
delete from administration_contact where not exists(select from organization where (organization.administration_contact_identifier) = (administration_contact.identifier));
delete from administration_contact where not exists(select from general_practitioner where (general_practitioner.administration_contact_identifier) = (administration_contact.identifier));
delete from patient_social_information where not exists(select from patient where (patient.patient_social_information_identifier) = (patient_social_information.identifier));
delete from patient_medical_information where not exists(select from patient where (patient.patient_medical_information_identifier) = (patient_medical_information.identifier));
delete from engine_call_action_viewpoint_notification where not exists(select from engine_call_action where (engine_call_action.engine_call_action_viewpoint_notification_identifier) = (engine_call_action_viewpoint_notification.identifier));
delete from engine_call_action_viewpoint_status where not exists(select from engine_call_action where (engine_call_action.engine_call_action_viewpoint_status_identifier) = (engine_call_action_viewpoint_status.identifier));
delete from engine_call_action_message where not exists(select from engine_call_action where (engine_call_action.engine_call_action_message_identifier) = (engine_call_action_message.identifier));
delete from engine_call_action_message_email where not exists(select from engine_call_action_message_destination_employee where (engine_call_action_message_destination_employee.settings_email_identifier) = (engine_call_action_message_email.identifier));
delete from engine_call_action_message_app where not exists(select from engine_call_action_message_destination_employee where (engine_call_action_message_destination_employee.settings_app_identifier) = (engine_call_action_message_app.identifier));
delete from engine_call_action_message_email where not exists(select from engine_call_action_message_destination_email where (engine_call_action_message_destination_email.settings_identifier) = (engine_call_action_message_email.identifier));
delete from engine_call_action_message_dect where not exists(select from engine_call_action_message_destination_dect where (engine_call_action_message_destination_dect.settings_identifier) = (engine_call_action_message_dect.identifier));
delete from engine_call_action_message_dect where not exists(select from engine_call_action_message_destination_employee where (engine_call_action_message_destination_employee.settings_dect_identifier) = (engine_call_action_message_dect.identifier));
delete from engine_call_action_message_spectralink where not exists(select from engine_call_action_message_destination_employee where (engine_call_action_message_destination_employee.settings_spectralink_identifier) = (engine_call_action_message_spectralink.identifier));
delete from engine_call_action_message_spectralink where not exists(select from engine_call_action_message_destination_spectralink where (engine_call_action_message_destination_spectralink.settings_identifier) = (engine_call_action_message_spectralink.identifier));
delete from device where not exists(select from application_global where (application_global.device_identifier) = (device.identifier));
delete from engine_event_badge_provided where not exists(select from engine_event where (engine_event.badge_provided_identifier) = (engine_event_badge_provided.identifier));
delete from engine_event_badge_provisioned where not exists(select from engine_event where (engine_event.badge_provisioned_identifier) = (engine_event_badge_provisioned.identifier));
delete from engine_event_rf_module_provided where not exists(select from engine_event where (engine_event.rf_module_provided_identifier) = (engine_event_rf_module_provided.identifier));
delete from engine_event_access_entered where not exists(select from engine_event where (engine_event.access_entered_identifier) = (engine_event_access_entered.identifier));
delete from engine_event_access_left where not exists(select from engine_event where (engine_event.access_left_identifier) = (engine_event_access_left.identifier));
delete from engine_event_access_denied where not exists(select from engine_event where (engine_event.access_denied_identifier) = (engine_event_access_denied.identifier));
delete from engine_event_viewpoint_state_changed where not exists(select from engine_event where (engine_event.viewpoint_state_changed_identifier) = (engine_event_viewpoint_state_changed.identifier));
delete from camera where not exists(select from webrtc_account where (webrtc_account.camera_identifier) = (camera.identifier));
delete from status_dect where not exists(select from status where (status.dect_identifier) = (status_dect.identifier));
delete from status_app where not exists(select from status where (status.app_identifier) = (status_app.identifier));
delete from care where not exists(select from location where (location.care_identifier) = (care.identifier));
delete from lifeline_message where not exists(select from message where (message.lifeline_message_identifier) = (lifeline_message.identifier));
delete from patient where not exists(select from sui_patient_info where (sui_patient_info.patient_identifier) = (patient.identifier));
end;
$$;


ALTER FUNCTION public.prune() OWNER TO aperi;

--
-- Name: prune(interval); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.prune(interval) RETURNS void
    LANGUAGE plpgsql
    AS $_$
begin
    delete from engine_call where timestamp_executed < now() - $1;
    delete from engine_event where timestamp < now() - $1;
    delete from care_session where timestamp_leave < now() - $1;
    delete from patient_session where timestamp_leave < now() - $1;
    delete from api_token where end_time < now() - $1;
end;
$_$;


ALTER FUNCTION public.prune(interval) OWNER TO aperi;

--
-- Name: r700_gettopsite(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.r700_gettopsite() RETURNS integer
    LANGUAGE sql IMMUTABLE
    AS $$select identifier from site order by identifier desc limit 1$$;


ALTER FUNCTION public.r700_gettopsite() OWNER TO aperi;

--
-- Name: simple_notify(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.simple_notify() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
  BEGIN
    PERFORM pg_notify(TG_ARGV[0], '');
    RETURN NEW;
  END;
$$;


ALTER FUNCTION public.simple_notify() OWNER TO aperi;

--
-- Name: spectralink_message_work(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.spectralink_message_work() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
select    coalesce(jsonb_agg(q.work), '[]')
    from      (
                  select        to_jsonb(spectralink_message) || jsonb_build_object('account', to_jsonb(spectralink_account))
                  from          spectralink_message
                  inner join    spectralink_account
                  on            spectralink_account.identifier = spectralink_message.account_identifier
                  where         (spectralink_message.action is null or spectralink_message.action != 136) and
                                spectralink_message.scheduled_at <= current_timestamp and
                                spectralink_message.expired_at > current_timestamp
                  order by      spectralink_message.scheduled_at,
                                spectralink_message.identifier                  
              ) as q(work);
$$;


ALTER FUNCTION public.spectralink_message_work() OWNER TO aperi;

--
-- Name: translation_get(character varying, character varying); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.translation_get(key character varying, languagecode character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
declare
begin
	return
	case  
		when languagecode = 'en' then en
		when languagecode = 'nl' then nl
		when languagecode = 'fr' then fr
        when languagecode = 'ru' then ru
        when languagecode = 'de' then de
		else null end as translated_text		
	from
	translation
	where translation_key = key;
end
$$;


ALTER FUNCTION public.translation_get(key character varying, languagecode character varying) OWNER TO aperi;

--
-- Name: translation_set(character varying, text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.translation_set(key character varying, en text, nl text, fr text, ru text, de text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare
begin
   insert into translation (translation_key, en,nl,fr,ru,de) values (key, en,nl,fr,ru,de) ON CONFLICT (translation_key) DO 
   update
		set 
			en = excluded.en, 
			nl = excluded.nl, 
			fr = excluded.fr,
            ru = excluded.ru,
            de = excluded.de
		where translation.translation_key = key;
	
    return identifier from translation where translation.translation_key = key;
end
$$;


ALTER FUNCTION public.translation_set(key character varying, en text, nl text, fr text, ru text, de text) OWNER TO aperi;

--
-- Name: trigger_api_login(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_api_login() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    case tg_relname
        when 'employee' then
            if new.cas_user is not null and new.cas_password is not null then
                insert into    api_login(employee_identifier, login_identifier, password)
                select         new.identifier, new.cas_user, new.cas_password
                on conflict    (employee_identifier)
                do update
                set            (login_identifier, password) = (excluded.login_identifier, excluded.password);
            else
                delete from    api_login
                where          api_login.employee_identifier = new.identifier;
            end if;
        when 'patient' then
            insert into    api_login(patient_identifier, login_identifier, password)
            select         new.identifier, 'patient_' || new.identifier, crypt(gen_random_uuid()::text, gen_salt('bf', 12))
            on conflict    (patient_identifier)
            do update
            set            (login_identifier, password) = (excluded.login_identifier, excluded.password);
        when 'device' then
            case tg_op
                when 'INSERT' then
                    insert into    api_login(device_identifier, login_identifier, password)
                    select         new.identifier, 'device_' || new.serial, crypt('device', gen_salt('bf', 12))
                    on conflict    (device_identifier)
                    do update
                    set            (login_identifier, password) = (excluded.login_identifier, excluded.password);
                when 'UPDATE' then
                    update    api_login
                    set       login_identifier = 'device_' || new.serial
                    where     api_login.device_identifier = new.identifier;
            end case;
    end case;

    return null;
end
$$;


ALTER FUNCTION public.trigger_api_login() OWNER TO aperi;

--
-- Name: trigger_care_location_call(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_care_location_call() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE _location_call_identifier integer;
DECLARE _location_identifier integer;
DECLARE _normal_status_identifier integer;
DECLARE _waiting_status_identifier integer;
begin	
  case tg_op
	when 'UPDATE' then				
		if (old) is distinct from (new) then		
			_location_identifier := (select identifier from location where care_identifier = new.identifier limit 1);
			_location_call_identifier := (select location_call_find_identifier(_location_identifier));			
			_normal_status_identifier := (select identifier from status where type = 'NORMAL' );
			_waiting_status_identifier := (select identifier from status where type = 'WAITING');
			
		   --Create a new call		   		   
		   if 	(new.status_identifier = _waiting_status_identifier) 
		   		and (_location_call_identifier is null)  then --We go from Normal To Waiting!
				RAISE NOTICE 'Logging: currently creating a new call for location %', _location_identifier;   
				perform location_call_raise_call(_location_identifier, now());				
			end if;                        
			
			--Update status
			if (old.status_identifier <> _normal_status_identifier) and (_location_call_identifier is not null) 
			and (new.status_identifier <> _normal_status_identifier)  then --We go update status!				
				RAISE NOTICE 'Logging: Setting call to status %', new.status_identifier;   
				perform location_call_update_status(_location_call_identifier, new.status_identifier, now());				
			end if;     
			
			--End call
			if (old.status_identifier <> _normal_status_identifier) and (new.status_identifier = _normal_status_identifier) 
				and  (_location_call_identifier is not null) then --We go close the call status!						
				RAISE NOTICE 'Logging: Ending call %', _location_call_identifier;   
				perform location_call_end_call(_location_call_identifier, now());				
			end if;     
		end if;	
	end case;
  return null;
end
$$;


ALTER FUNCTION public.trigger_care_location_call() OWNER TO aperi;

--
-- Name: trigger_care_session_location_call(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_care_session_location_call() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE _location_identifier integer := (select identifier from location where care_identifier = new.care_identifier limit 1);
DECLARE _location_call_identifier integer  := (select location_call_find_identifier(_location_identifier));
DECLARE _normal_status_identifier integer;
DECLARE _waiting_status_identifier integer;
begin	  
  case tg_op 
  	when 'INSERT' then
		--Create location_call_presence
	   if (_location_call_identifier is not null) then 
			--Call in progress, we create a record in the location_call_employee_presence table.
			RAISE NOTICE 'Logging: currently creating a new presence for location call %', _location_call_identifier;   
			perform location_call_set_employee_presence(_location_call_identifier, new.employee_identifier, new.timestamp_enter, new.timestamp_leave);				
	   end if;                           
	when 'UPDATE' then
		--update location_call_presence
		if ((old) is distinct from (new)) and (_location_call_identifier is not null) then
		RAISE NOTICE 'Logging: currently updating presence for location call %', _location_call_identifier;   
			perform location_call_set_employee_presence(_location_call_identifier, new.employee_identifier, new.timestamp_enter, new.timestamp_leave);				
		end if;
	end case;
  return null;
end
$$;


ALTER FUNCTION public.trigger_care_session_location_call() OWNER TO aperi;

--
-- Name: trigger_cas_audit_log(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_cas_audit_log() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
    _source text = current_setting('aperi.cas_audit_log_source', true);
begin
    if _source is not null then
        case tg_op
            when 'INSERT' then
                insert into cas_audit_log(relation, operation, old, new, source) select tg_relname, tg_op, null, to_jsonb(new), _source;
            when 'UPDATE' then
                if old is distinct from new then
                    insert into cas_audit_log(relation, operation, old, new, source) select tg_relname, tg_op, to_jsonb(old), to_jsonb(new), _source;
                end if;
            when 'DELETE' then
                insert into cas_audit_log(relation, operation, old, new, source) select tg_relname, tg_op, to_jsonb(old), null, _source;
        end case;
    end if;

    return null;
end
$$;


ALTER FUNCTION public.trigger_cas_audit_log() OWNER TO aperi;

--
-- Name: trigger_cas_mis_connection_notification(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_cas_mis_connection_notification() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    insert into    cas_notification(category, payload)
    select         'mis-connection', jsonb_build_object('identifier', coalesce(new.identifier, old.identifier))
    on conflict do nothing;

    if found then
        perform pg_notify('cas', null);
    end if;

    return null;
end
$$;


ALTER FUNCTION public.trigger_cas_mis_connection_notification() OWNER TO aperi;

--
-- Name: trigger_cas_notification(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_cas_notification() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    case tg_relname
        when 'access_door' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'access-door', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'access-door', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'access_group' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'access-group', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'access-group', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'badge' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'badge', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'badge', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'call_reason_category' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'call-reason-category', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'call-reason-category', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'camera' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'camera', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'camera', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'crew' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'crew', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'crew', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'dect_account' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'dect-account', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'dect-account', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'dect_group' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'dect-group', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'dect-group', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'department' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'department', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'department', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'device' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'device', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'device', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'device_status' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'device-status', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'device-status', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'door_procedure' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'door-procedure', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'door-procedure', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'employee' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'employee', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'employee', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'location' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'location', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'location', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'patient' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'patient', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'patient', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'possible_work_order' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'possible-work-order', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'possible-work-order', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'possible_work_order_top' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'possible-work-order-top', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'possible-work-order-top', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'rf_module' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'rf-module', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'rf-module', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'rf_module_brand' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'rf-module-brand', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'rf-module-brand', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'rf_module_type' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'rf-module-type', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'rf-module-type', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'role' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'role', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'role', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'spectralink_account' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'spectralink-account', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'spectralink-account', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'spectralink_group' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'spectralink-group', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'spectralink-group', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
        when 'status' then
            if tg_op in('INSERT', 'UPDATE') then
                insert into cas_notification(category, payload) select 'status', jsonb_build_object('identifier', new.identifier, 'version', new.cas_version::text)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            else
                insert into cas_notification(category, payload) select 'status', jsonb_build_object('identifier', old.identifier, 'version', null)
                on conflict (category, (payload - 'version')) do update set payload = excluded.payload;
            end if;
    end case;

    if found then
        perform pg_notify('cas', null);
    end if;

    return null;
end
$$;


ALTER FUNCTION public.trigger_cas_notification() OWNER TO aperi;

--
-- Name: trigger_cas_version_after(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_cas_version_after() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    case tg_relname
        when 'access_door' then
            case tg_op
                when 'INSERT' then
                    if new.device_identifier is not null then
                        update device set cas_version = extract(epoch from current_timestamp) * 1000000 where (device.identifier) = (new.device_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.device_identifier) is distinct from (new.device_identifier) then
                        if old.device_identifier is not null then
                            update device set cas_version = extract(epoch from current_timestamp) * 1000000 where (device.identifier) = (old.device_identifier);
                        end if;
                        if new.device_identifier is not null then
                            update device set cas_version = extract(epoch from current_timestamp) * 1000000 where (device.identifier) = (new.device_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.device_identifier is not null then
                        update device set cas_version = extract(epoch from current_timestamp) * 1000000 where (device.identifier) = (old.device_identifier);
                    end if;
            end case;
        when 'access_door_access_group' then
            case tg_op
                when 'INSERT' then
                    if new.access_door_identifier is not null then
                        update access_door set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_door.identifier) = (new.access_door_identifier);
                    end if;
                    if new.access_group_identifier is not null then
                        update access_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_group.identifier) = (new.access_group_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.access_door_identifier) is distinct from (new.access_door_identifier) then
                        if old.access_door_identifier is not null then
                            update access_door set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_door.identifier) = (old.access_door_identifier);
                        end if;
                        if new.access_door_identifier is not null then
                            update access_door set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_door.identifier) = (new.access_door_identifier);
                        end if;
                    end if;
                    if (old.access_group_identifier) is distinct from (new.access_group_identifier) then
                        if old.access_group_identifier is not null then
                            update access_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_group.identifier) = (old.access_group_identifier);
                        end if;
                        if new.access_group_identifier is not null then
                            update access_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_group.identifier) = (new.access_group_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.access_door_identifier is not null then
                        update access_door set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_door.identifier) = (old.access_door_identifier);
                    end if;
                    if old.access_group_identifier is not null then
                        update access_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_group.identifier) = (old.access_group_identifier);
                    end if;
            end case;
        when 'access_door_door_procedure' then
            case tg_op
                when 'INSERT' then
                    if new.access_door_identifier is not null then
                        update access_door set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_door.identifier) = (new.access_door_identifier);
                    end if;
                    if new.door_procedure_identifier is not null then
                        update door_procedure set cas_version = extract(epoch from current_timestamp) * 1000000 where (door_procedure.identifier) = (new.door_procedure_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.access_door_identifier) is distinct from (new.access_door_identifier) then
                        if old.access_door_identifier is not null then
                            update access_door set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_door.identifier) = (old.access_door_identifier);
                        end if;
                        if new.access_door_identifier is not null then
                            update access_door set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_door.identifier) = (new.access_door_identifier);
                        end if;
                    end if;
                    if (old.door_procedure_identifier) is distinct from (new.door_procedure_identifier) then
                        if old.door_procedure_identifier is not null then
                            update door_procedure set cas_version = extract(epoch from current_timestamp) * 1000000 where (door_procedure.identifier) = (old.door_procedure_identifier);
                        end if;
                        if new.door_procedure_identifier is not null then
                            update door_procedure set cas_version = extract(epoch from current_timestamp) * 1000000 where (door_procedure.identifier) = (new.door_procedure_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.access_door_identifier is not null then
                        update access_door set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_door.identifier) = (old.access_door_identifier);
                    end if;
                    if old.door_procedure_identifier is not null then
                        update door_procedure set cas_version = extract(epoch from current_timestamp) * 1000000 where (door_procedure.identifier) = (old.door_procedure_identifier);
                    end if;
            end case;
        when 'access_group' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'access_group_badge' then
            case tg_op
                when 'INSERT' then
                    if new.access_group_identifier is not null then
                        update access_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_group.identifier) = (new.access_group_identifier);
                    end if;
                    if new.badge_identifier is not null then
                        update badge set cas_version = extract(epoch from current_timestamp) * 1000000 where (badge.identifier) = (new.badge_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.access_group_identifier) is distinct from (new.access_group_identifier) then
                        if old.access_group_identifier is not null then
                            update access_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_group.identifier) = (old.access_group_identifier);
                        end if;
                        if new.access_group_identifier is not null then
                            update access_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_group.identifier) = (new.access_group_identifier);
                        end if;
                    end if;
                    if (old.badge_identifier) is distinct from (new.badge_identifier) then
                        if old.badge_identifier is not null then
                            update badge set cas_version = extract(epoch from current_timestamp) * 1000000 where (badge.identifier) = (old.badge_identifier);
                        end if;
                        if new.badge_identifier is not null then
                            update badge set cas_version = extract(epoch from current_timestamp) * 1000000 where (badge.identifier) = (new.badge_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.access_group_identifier is not null then
                        update access_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (access_group.identifier) = (old.access_group_identifier);
                    end if;
                    if old.badge_identifier is not null then
                        update badge set cas_version = extract(epoch from current_timestamp) * 1000000 where (badge.identifier) = (old.badge_identifier);
                    end if;
            end case;
            when 'application_svp_crews' then
            case tg_op
                when 'INSERT' then
                    if new.application_svp_identifier is not null then
                        update application_svp set cas_version = extract(epoch from current_timestamp) * 1000000 where (application_svp.identifier) = (new.application_svp_identifier);
                    end if;                                    
                when 'DELETE' then
                    if old.application_svp_identifier is not null then
                        update application_svp set cas_version = extract(epoch from current_timestamp) * 1000000 where (application_svp.identifier) = (old.application_svp_identifier);
                    end if;
            end case;
            when 'badge' then
            case tg_op
                when 'INSERT' then
                    if new.employee_identifier is not null then
                        update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (new.employee_identifier);
                    end if;
                    if new.patient_identifier is not null then
                        update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (new.patient_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.employee_identifier) is distinct from (new.employee_identifier) then
                        if old.employee_identifier is not null then
                            update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (old.employee_identifier);
                        end if;
                        if new.employee_identifier is not null then
                            update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (new.employee_identifier);
                        end if;
                    end if;
                    if (old.patient_identifier) is distinct from (new.patient_identifier) then
                        if old.patient_identifier is not null then
                            update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (old.patient_identifier);
                        end if;
                        if new.patient_identifier is not null then
                            update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (new.patient_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.employee_identifier is not null then
                        update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (old.employee_identifier);
                    end if;
                    if old.patient_identifier is not null then
                        update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (old.patient_identifier);
                    end if;
            end case;
        when 'call_reason_category' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'camera' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'cas_report' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'crew' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'crew_location' then
            case tg_op
                when 'INSERT' then
                    if new.crew_identifier is not null then
                        update crew set cas_version = extract(epoch from current_timestamp) * 1000000 where (crew.identifier) = (new.crew_identifier);
                    end if;
                    if new.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.crew_identifier) is distinct from (new.crew_identifier) then
                        if old.crew_identifier is not null then
                            update crew set cas_version = extract(epoch from current_timestamp) * 1000000 where (crew.identifier) = (old.crew_identifier);
                        end if;
                        if new.crew_identifier is not null then
                            update crew set cas_version = extract(epoch from current_timestamp) * 1000000 where (crew.identifier) = (new.crew_identifier);
                        end if;
                    end if;
                    if (old.location_identifier) is distinct from (new.location_identifier) then
                        if old.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                        end if;
                        if new.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.crew_identifier is not null then
                        update crew set cas_version = extract(epoch from current_timestamp) * 1000000 where (crew.identifier) = (old.crew_identifier);
                    end if;
                    if old.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                    end if;
            end case;
        when 'dect_account' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'dect_group' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'dect_group_dect_account' then
            case tg_op
                when 'INSERT' then
                    if new.dect_account_identifier is not null then
                        update dect_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_account.identifier) = (new.dect_account_identifier);
                    end if;
                    if new.dect_group_identifier is not null then
                        update dect_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_group.identifier) = (new.dect_group_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.dect_account_identifier) is distinct from (new.dect_account_identifier) then
                        if old.dect_account_identifier is not null then
                            update dect_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_account.identifier) = (old.dect_account_identifier);
                        end if;
                        if new.dect_account_identifier is not null then
                            update dect_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_account.identifier) = (new.dect_account_identifier);
                        end if;
                    end if;
                    if (old.dect_group_identifier) is distinct from (new.dect_group_identifier) then
                        if old.dect_group_identifier is not null then
                            update dect_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_group.identifier) = (old.dect_group_identifier);
                        end if;
                        if new.dect_group_identifier is not null then
                            update dect_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_group.identifier) = (new.dect_group_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.dect_account_identifier is not null then
                        update dect_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_account.identifier) = (old.dect_account_identifier);
                    end if;
                    if old.dect_group_identifier is not null then
                        update dect_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_group.identifier) = (old.dect_group_identifier);
                    end if;
            end case;
        when 'dect_group_location' then
            case tg_op
                when 'INSERT' then
                    if new.dect_group_identifier is not null then
                        update dect_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_group.identifier) = (new.dect_group_identifier);
                    end if;
                    if new.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.dect_group_identifier) is distinct from (new.dect_group_identifier) then
                        if old.dect_group_identifier is not null then
                            update dect_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_group.identifier) = (old.dect_group_identifier);
                        end if;
                        if new.dect_group_identifier is not null then
                            update dect_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_group.identifier) = (new.dect_group_identifier);
                        end if;
                    end if;
                    if (old.location_identifier) is distinct from (new.location_identifier) then
                        if old.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                        end if;
                        if new.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.dect_group_identifier is not null then
                        update dect_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_group.identifier) = (old.dect_group_identifier);
                    end if;
                    if old.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                    end if;
            end case;
        when 'department' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'device' then
            case tg_op
                when 'INSERT' then
                    if new.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.location_identifier) is distinct from (new.location_identifier) then
                        if old.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                        end if;
                        if new.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                    end if;
            end case;
        when 'device_status' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'door_procedure' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'employee' then
            case tg_op
                when 'INSERT' then
                    if new.dect_account_identifier is not null then
                        update dect_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_account.identifier) = (new.dect_account_identifier);
                    end if;
                    if new.spectralink_account_identifier is not null then
                        update spectralink_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_account.identifier) = (new.spectralink_account_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.dect_account_identifier) is distinct from (new.dect_account_identifier) then
                        if old.dect_account_identifier is not null then
                            update dect_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_account.identifier) = (old.dect_account_identifier);
                        end if;
                        if new.dect_account_identifier is not null then
                            update dect_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_account.identifier) = (new.dect_account_identifier);
                        end if;
                    end if;
                    if (old.spectralink_account_identifier) is distinct from (new.spectralink_account_identifier) then
                        if old.spectralink_account_identifier is not null then
                            update spectralink_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_account.identifier) = (old.spectralink_account_identifier);
                        end if;
                        if new.spectralink_account_identifier is not null then
                            update spectralink_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_account.identifier) = (new.spectralink_account_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.dect_account_identifier is not null then
                        update dect_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (dect_account.identifier) = (old.dect_account_identifier);
                    end if;
                    if old.spectralink_account_identifier is not null then
                        update spectralink_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_account.identifier) = (old.spectralink_account_identifier);
                    end if;
            end case;
        when 'location' then
            case tg_op
                when 'INSERT' then
                    if new.department_identifier is not null then
                        update department set cas_version = extract(epoch from current_timestamp) * 1000000 where (department.identifier) = (new.department_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.department_identifier) is distinct from (new.department_identifier) then
                        if old.department_identifier is not null then
                            update department set cas_version = extract(epoch from current_timestamp) * 1000000 where (department.identifier) = (old.department_identifier);
                        end if;
                        if new.department_identifier is not null then
                            update department set cas_version = extract(epoch from current_timestamp) * 1000000 where (department.identifier) = (new.department_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.department_identifier is not null then
                        update department set cas_version = extract(epoch from current_timestamp) * 1000000 where (department.identifier) = (old.department_identifier);
                    end if;
            end case;
        when 'location_gateway_device_gateway' then
            case tg_op
                when 'INSERT' then
                    if new.device_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                    end if;
                    if new.location_identifier is not null then
                        update device set cas_version = extract(epoch from current_timestamp) * 1000000 where (device.identifier) = (new.device_identifier);
                    end if;                 
                when 'DELETE' then
                    if old.device_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                    end if;
                    if old.location_identifier is not null then
                        update device set cas_version = extract(epoch from current_timestamp) * 1000000 where (device.identifier) = (old.device_identifier);
                    end if;
            end case;
        when 'location_patient' then
            case tg_op
                when 'INSERT' then
                    if new.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                    end if;
                    if new.patient_identifier is not null then
                        update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (new.patient_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.location_identifier) is distinct from (new.location_identifier) then
                        if old.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                        end if;
                        if new.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                        end if;
                    end if;
                    if (old.patient_identifier) is distinct from (new.patient_identifier) then
                        if old.patient_identifier is not null then
                            update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (old.patient_identifier);
                        end if;
                        if new.patient_identifier is not null then
                            update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (new.patient_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                    end if;
                    if old.patient_identifier is not null then
                        update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (old.patient_identifier);
                    end if;
            end case;
        when 'patient' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'possible_work_order' then
            case tg_op
                when 'INSERT' then
                    if new.possible_work_order_top_identifier is not null then
                        update possible_work_order_top set cas_version = extract(epoch from current_timestamp) * 1000000 where (possible_work_order_top.identifier) = (new.possible_work_order_top_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.possible_work_order_top_identifier) is distinct from (new.possible_work_order_top_identifier) then
                        if old.possible_work_order_top_identifier is not null then
                            update possible_work_order_top set cas_version = extract(epoch from current_timestamp) * 1000000 where (possible_work_order_top.identifier) = (old.possible_work_order_top_identifier);
                        end if;
                        if new.possible_work_order_top_identifier is not null then
                            update possible_work_order_top set cas_version = extract(epoch from current_timestamp) * 1000000 where (possible_work_order_top.identifier) = (new.possible_work_order_top_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.possible_work_order_top_identifier is not null then
                        update possible_work_order_top set cas_version = extract(epoch from current_timestamp) * 1000000 where (possible_work_order_top.identifier) = (old.possible_work_order_top_identifier);
                    end if;
            end case;
        when 'possible_work_order_role' then
            case tg_op
                when 'INSERT' then
                    if new.possible_work_order_identifier is not null then
                        update possible_work_order set cas_version = extract(epoch from current_timestamp) * 1000000 where (possible_work_order.identifier) = (new.possible_work_order_identifier);
                    end if;
                    if new.role_identifier is not null then
                        update role set cas_version = extract(epoch from current_timestamp) * 1000000 where (role.identifier) = (new.role_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.possible_work_order_identifier) is distinct from (new.possible_work_order_identifier) then
                        if old.possible_work_order_identifier is not null then
                            update possible_work_order set cas_version = extract(epoch from current_timestamp) * 1000000 where (possible_work_order.identifier) = (old.possible_work_order_identifier);
                        end if;
                        if new.possible_work_order_identifier is not null then
                            update possible_work_order set cas_version = extract(epoch from current_timestamp) * 1000000 where (possible_work_order.identifier) = (new.possible_work_order_identifier);
                        end if;
                    end if;
                    if (old.role_identifier) is distinct from (new.role_identifier) then
                        if old.role_identifier is not null then
                            update role set cas_version = extract(epoch from current_timestamp) * 1000000 where (role.identifier) = (old.role_identifier);
                        end if;
                        if new.role_identifier is not null then
                            update role set cas_version = extract(epoch from current_timestamp) * 1000000 where (role.identifier) = (new.role_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.possible_work_order_identifier is not null then
                        update possible_work_order set cas_version = extract(epoch from current_timestamp) * 1000000 where (possible_work_order.identifier) = (old.possible_work_order_identifier);
                    end if;
                    if old.role_identifier is not null then
                        update role set cas_version = extract(epoch from current_timestamp) * 1000000 where (role.identifier) = (old.role_identifier);
                    end if;
            end case;
        when 'possible_work_order_top' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'rf_module' then
            case tg_op
                when 'INSERT' then
                    if new.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                    end if;
                    if new.patient_identifier is not null then
                        update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (new.patient_identifier);
                    end if;
                    if new.brand_identifier is not null then
                        update rf_module_brand set cas_version = extract(epoch from current_timestamp) * 1000000 where (rf_module_brand.identifier) = (new.brand_identifier);
                    end if;
                    if new.type_identifier is not null then
                        update rf_module_type set cas_version = extract(epoch from current_timestamp) * 1000000 where (rf_module_type.identifier) = (new.type_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.location_identifier) is distinct from (new.location_identifier) then
                        if old.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                        end if;
                        if new.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                        end if;
                    end if;
                    if (old.patient_identifier) is distinct from (new.patient_identifier) then
                        if old.patient_identifier is not null then
                            update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (old.patient_identifier);
                        end if;
                        if new.patient_identifier is not null then
                            update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (new.patient_identifier);
                        end if;
                    end if;
                    if (old.brand_identifier) is distinct from (new.brand_identifier) then
                        if old.brand_identifier is not null then
                            update rf_module_brand set cas_version = extract(epoch from current_timestamp) * 1000000 where (rf_module_brand.identifier) = (old.brand_identifier);
                        end if;
                        if new.brand_identifier is not null then
                            update rf_module_brand set cas_version = extract(epoch from current_timestamp) * 1000000 where (rf_module_brand.identifier) = (new.brand_identifier);
                        end if;
                    end if;
                    if (old.type_identifier) is distinct from (new.type_identifier) then
                        if old.type_identifier is not null then
                            update rf_module_type set cas_version = extract(epoch from current_timestamp) * 1000000 where (rf_module_type.identifier) = (old.type_identifier);
                        end if;
                        if new.type_identifier is not null then
                            update rf_module_type set cas_version = extract(epoch from current_timestamp) * 1000000 where (rf_module_type.identifier) = (new.type_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                    end if;
                    if old.patient_identifier is not null then
                        update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (old.patient_identifier);
                    end if;
                    if old.brand_identifier is not null then
                        update rf_module_brand set cas_version = extract(epoch from current_timestamp) * 1000000 where (rf_module_brand.identifier) = (old.brand_identifier);
                    end if;
                    if old.type_identifier is not null then
                        update rf_module_type set cas_version = extract(epoch from current_timestamp) * 1000000 where (rf_module_type.identifier) = (old.type_identifier);
                    end if;
            end case;
        when 'rf_module_brand' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'rf_module_type' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'role' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'site' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'spectralink_account' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'spectralink_group' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'spectralink_group_location' then
            case tg_op
                when 'INSERT' then
                    if new.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                    end if;
                    if new.spectralink_group_identifier is not null then
                        update spectralink_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_group.identifier) = (new.spectralink_group_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.location_identifier) is distinct from (new.location_identifier) then
                        if old.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                        end if;
                        if new.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                        end if;
                    end if;
                    if (old.spectralink_group_identifier) is distinct from (new.spectralink_group_identifier) then
                        if old.spectralink_group_identifier is not null then
                            update spectralink_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_group.identifier) = (old.spectralink_group_identifier);
                        end if;
                        if new.spectralink_group_identifier is not null then
                            update spectralink_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_group.identifier) = (new.spectralink_group_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                    end if;
                    if old.spectralink_group_identifier is not null then
                        update spectralink_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_group.identifier) = (old.spectralink_group_identifier);
                    end if;
            end case;
        when 'spectralink_group_spectralink_account' then
            case tg_op
                when 'INSERT' then
                    if new.spectralink_account_identifier is not null then
                        update spectralink_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_account.identifier) = (new.spectralink_account_identifier);
                    end if;
                    if new.spectralink_group_identifier is not null then
                        update spectralink_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_group.identifier) = (new.spectralink_group_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.spectralink_account_identifier) is distinct from (new.spectralink_account_identifier) then
                        if old.spectralink_account_identifier is not null then
                            update spectralink_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_account.identifier) = (old.spectralink_account_identifier);
                        end if;
                        if new.spectralink_account_identifier is not null then
                            update spectralink_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_account.identifier) = (new.spectralink_account_identifier);
                        end if;
                    end if;
                    if (old.spectralink_group_identifier) is distinct from (new.spectralink_group_identifier) then
                        if old.spectralink_group_identifier is not null then
                            update spectralink_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_group.identifier) = (old.spectralink_group_identifier);
                        end if;
                        if new.spectralink_group_identifier is not null then
                            update spectralink_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_group.identifier) = (new.spectralink_group_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.spectralink_account_identifier is not null then
                        update spectralink_account set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_account.identifier) = (old.spectralink_account_identifier);
                    end if;
                    if old.spectralink_group_identifier is not null then
                        update spectralink_group set cas_version = extract(epoch from current_timestamp) * 1000000 where (spectralink_group.identifier) = (old.spectralink_group_identifier);
                    end if;
            end case;
        when 'status' then
            case tg_op
                when 'INSERT' then

                when 'UPDATE' then

                when 'DELETE' then

            end case;
        when 'activity' then
            case tg_op
                when 'INSERT' then
                    if new.crew_identifier is not null then
                        update crew set cas_version = extract(epoch from current_timestamp) * 1000000 where (crew.identifier) = (new.crew_identifier);
                    end if;
                    if new.employee_identifier is not null then
                        update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (new.employee_identifier);
                    end if;
                    if new.role_identifier is not null then
                        update role set cas_version = extract(epoch from current_timestamp) * 1000000 where (role.identifier) = (new.role_identifier);
                    end if;
                when 'UPDATE' then
                    if old.cas_version != new.cas_version then
                        if old.crew_identifier is not null then
                            update crew set cas_version = extract(epoch from current_timestamp) * 1000000 where (crew.identifier) = (old.crew_identifier);
                        end if;
                        if new.crew_identifier is not null and (old.crew_identifier) is distinct from (new.crew_identifier) then
                            update crew set cas_version = extract(epoch from current_timestamp) * 1000000 where (crew.identifier) = (new.crew_identifier);
                        end if;
                        if old.employee_identifier is not null then
                            update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (old.employee_identifier);
                        end if;
                        if new.employee_identifier is not null and (old.employee_identifier) is distinct from (new.employee_identifier) then
                            update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (new.employee_identifier);
                        end if;
                        if old.role_identifier is not null then
                            update role set cas_version = extract(epoch from current_timestamp) * 1000000 where (role.identifier) = (old.role_identifier);
                        end if;
                        if new.role_identifier is not null and (old.role_identifier) is distinct from (new.role_identifier) then
                            update role set cas_version = extract(epoch from current_timestamp) * 1000000 where (role.identifier) = (new.role_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.crew_identifier is not null then
                        update crew set cas_version = extract(epoch from current_timestamp) * 1000000 where (crew.identifier) = (old.crew_identifier);
                    end if;
                    if old.employee_identifier is not null then
                        update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (old.employee_identifier);
                    end if;
                    if old.role_identifier is not null then
                        update role set cas_version = extract(epoch from current_timestamp) * 1000000 where (role.identifier) = (old.role_identifier);
                    end if;
            end case;
        when 'email' then
            case tg_op
                when 'INSERT' then
                    if new.crew_identifier is not null then
                        update crew set cas_version = extract(epoch from current_timestamp) * 1000000 where (crew.identifier) = (new.crew_identifier);
                    end if;
                    if new.employee_identifier is not null then
                        update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (new.employee_identifier);
                    end if;
                    if new.patient_identifier is not null then
                        update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (new.patient_identifier);
                    end if;
                    if new.possible_work_order_top_identifier is not null then
                        update possible_work_order_top set cas_version = extract(epoch from current_timestamp) * 1000000 where (possible_work_order_top.identifier) = (new.possible_work_order_top_identifier);
                    end if;
                    if new.role_identifier is not null then
                        update role set cas_version = extract(epoch from current_timestamp) * 1000000 where (role.identifier) = (new.role_identifier);
                    end if;
                when 'UPDATE' then
                    if old.cas_version != new.cas_version then
                        if old.crew_identifier is not null then
                            update crew set cas_version = extract(epoch from current_timestamp) * 1000000 where (crew.identifier) = (old.crew_identifier);
                        end if;
                        if new.crew_identifier is not null and (old.crew_identifier) is distinct from (new.crew_identifier) then
                            update crew set cas_version = extract(epoch from current_timestamp) * 1000000 where (crew.identifier) = (new.crew_identifier);
                        end if;
                        if old.employee_identifier is not null then
                            update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (old.employee_identifier);
                        end if;
                        if new.employee_identifier is not null and (old.employee_identifier) is distinct from (new.employee_identifier) then
                            update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (new.employee_identifier);
                        end if;
                        if old.patient_identifier is not null then
                            update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (old.patient_identifier);
                        end if;
                        if new.patient_identifier is not null and (old.patient_identifier) is distinct from (new.patient_identifier) then
                            update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (new.patient_identifier);
                        end if;
                        if old.possible_work_order_top_identifier is not null then
                            update possible_work_order_top set cas_version = extract(epoch from current_timestamp) * 1000000 where (possible_work_order_top.identifier) = (old.possible_work_order_top_identifier);
                        end if;
                        if new.possible_work_order_top_identifier is not null and (old.possible_work_order_top_identifier) is distinct from (new.possible_work_order_top_identifier) then
                            update possible_work_order_top set cas_version = extract(epoch from current_timestamp) * 1000000 where (possible_work_order_top.identifier) = (new.possible_work_order_top_identifier);
                        end if;
                        if old.role_identifier is not null then
                            update role set cas_version = extract(epoch from current_timestamp) * 1000000 where (role.identifier) = (old.role_identifier);
                        end if;
                        if new.role_identifier is not null and (old.role_identifier) is distinct from (new.role_identifier) then
                            update role set cas_version = extract(epoch from current_timestamp) * 1000000 where (role.identifier) = (new.role_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.crew_identifier is not null then
                        update crew set cas_version = extract(epoch from current_timestamp) * 1000000 where (crew.identifier) = (old.crew_identifier);
                    end if;
                    if old.employee_identifier is not null then
                        update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (old.employee_identifier);
                    end if;
                    if old.patient_identifier is not null then
                        update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (old.patient_identifier);
                    end if;
                    if old.possible_work_order_top_identifier is not null then
                        update possible_work_order_top set cas_version = extract(epoch from current_timestamp) * 1000000 where (possible_work_order_top.identifier) = (old.possible_work_order_top_identifier);
                    end if;
                    if old.role_identifier is not null then
                        update role set cas_version = extract(epoch from current_timestamp) * 1000000 where (role.identifier) = (old.role_identifier);
                    end if;
            end case;
        when 'mis_connection_department' then
            case tg_op
                when 'INSERT' then
                    if new.department_identifier is not null then
                        update department set cas_version = extract(epoch from current_timestamp) * 1000000 where (department.identifier) = (new.department_identifier);
                    end if;
                when 'UPDATE' then
                    if old.cas_version != new.cas_version then
                        if old.department_identifier is not null then
                            update department set cas_version = extract(epoch from current_timestamp) * 1000000 where (department.identifier) = (old.department_identifier);
                        end if;
                        if new.department_identifier is not null and (old.department_identifier) is distinct from (new.department_identifier) then
                            update department set cas_version = extract(epoch from current_timestamp) * 1000000 where (department.identifier) = (new.department_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.department_identifier is not null then
                        update department set cas_version = extract(epoch from current_timestamp) * 1000000 where (department.identifier) = (old.department_identifier);
                    end if;
            end case;
        when 'mis_connection_employee' then
            case tg_op
                when 'INSERT' then
                    if new.employee_identifier is not null then
                        update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (new.employee_identifier);
                    end if;
                when 'UPDATE' then
                    if old.cas_version != new.cas_version then
                        if old.employee_identifier is not null then
                            update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (old.employee_identifier);
                        end if;
                        if new.employee_identifier is not null and (old.employee_identifier) is distinct from (new.employee_identifier) then
                            update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (new.employee_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.employee_identifier is not null then
                        update employee set cas_version = extract(epoch from current_timestamp) * 1000000 where (employee.identifier) = (old.employee_identifier);
                    end if;
            end case;
        when 'mis_connection_location' then
            case tg_op
                when 'INSERT' then
                    if new.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                    end if;
                when 'UPDATE' then
                    if old.cas_version != new.cas_version then
                        if old.location_identifier is not null then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                        end if;
                        if new.location_identifier is not null and (old.location_identifier) is distinct from (new.location_identifier) then
                            update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (new.location_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.location_identifier is not null then
                        update location set cas_version = extract(epoch from current_timestamp) * 1000000 where (location.identifier) = (old.location_identifier);
                    end if;
            end case;
        when 'mis_connection_patient' then
            case tg_op
                when 'INSERT' then
                    if new.patient_identifier is not null then
                        update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (new.patient_identifier);
                    end if;
                when 'UPDATE' then
                    if old.cas_version != new.cas_version then
                        if old.patient_identifier is not null then
                            update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (old.patient_identifier);
                        end if;
                        if new.patient_identifier is not null and (old.patient_identifier) is distinct from (new.patient_identifier) then
                            update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (new.patient_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.patient_identifier is not null then
                        update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (old.patient_identifier);
                    end if;
            end case;
        when 'patient_identification' then
            case tg_op
                when 'INSERT' then
                    if new.patient_identifier is not null then
                        update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (new.patient_identifier);
                    end if;
                when 'UPDATE' then
                    if old.cas_version != new.cas_version then
                        if old.patient_identifier is not null then
                            update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (old.patient_identifier);
                        end if;
                        if new.patient_identifier is not null and (old.patient_identifier) is distinct from (new.patient_identifier) then
                            update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (new.patient_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.patient_identifier is not null then
                        update patient set cas_version = extract(epoch from current_timestamp) * 1000000 where (patient.identifier) = (old.patient_identifier);
                    end if;
            end case;
		when 'application_global' then
            case tg_op
                when 'INSERT' then
                    if new.device_identifier is not null then
                        update device set cas_version = extract(epoch from current_timestamp) * 1000000 where (device.identifier) = (new.device_identifier);
                    end if;
                when 'UPDATE' then
                    if (old.embezzlement_time != new.embezzlement_time) or (old.comfort_during_night != new.comfort_during_night)  then
                        if old.device_identifier is not null then
                           update device set cas_version = extract(epoch from current_timestamp) * 1000000 where (device.identifier) = (new.device_identifier);
                        end if;
                        if new.device_identifier is not null and (old.device_identifier) is distinct from (new.device_identifier) then
                            update device set cas_version = extract(epoch from current_timestamp) * 1000000 where (device.identifier) = (new.device_identifier);
                        end if;
                    end if;
                when 'DELETE' then
                    if old.device_identifier is not null then
                        update device set cas_version = extract(epoch from current_timestamp) * 1000000 where (device.identifier) = (old.device_identifier);
                    end if;
            end case;
    end case;

    return null;
end
$$;


ALTER FUNCTION public.trigger_cas_version_after() OWNER TO aperi;

--
-- Name: trigger_cas_version_before(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_cas_version_before() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    case tg_relname
        when 'access_door' then
            if (old.identifier, old.name, old.device_identifier) is distinct from (new.identifier, new.name, new.device_identifier) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'access_group' then
            if (old.identifier, old.name) is distinct from (new.identifier, new.name) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'activity' then
            if (old.identifier, old.crew_identifier, old.employee_identifier, old.role_identifier, old.position, old.active) is distinct from (new.identifier, new.crew_identifier, new.employee_identifier, new.role_identifier, new.position, new.active) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'application_svp' then		
            if (old.identifier, old.view_in_screensaver, old.pursuit_enabled, old.device_identifier, old.esvp_device_identifier) is distinct from (new.identifier, new.view_in_screensaver, new.pursuit_enabled, new.device_identifier,new.esvp_device_identifier) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'badge' then
            if (old.identifier, old.serial, old.timestamp, old.employee_identifier, old.patient_identifier, old.priority) is distinct from (new.identifier, new.serial, new.timestamp, new.employee_identifier, new.patient_identifier, new.priority) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'call_reason_category' then
            if (old.identifier, old.prefix, old.name) is distinct from (new.identifier, new.prefix, new.name) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'camera' then
            if (old.identifier, old.location) is distinct from (new.identifier, new.location) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'crew' then
            if (old.identifier, old.name) is distinct from (new.identifier, new.name) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'dect_account' then
            if (old.identifier, old.name, old.number) is distinct from (new.identifier, new.name, new.number) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'dect_group' then
            if (old.identifier, old.name) is distinct from (new.identifier, new.name) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'department' then
            if (old.identifier, old.name, old.code, old.site_identifier) is distinct from (new.identifier, new.name, new.code, new.site_identifier) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'device' then
            if (old.identifier, old.serial, old.name, old.verklizan_location_identifier, old.location_identifier, old.verklizan_identifier, old.viedome_identifier, old.application, old.application_parameters) is distinct from (new.identifier, new.serial, new.name, new.verklizan_location_identifier, new.location_identifier, new.verklizan_identifier, new.viedome_identifier, new.application, new.application_parameters) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'device_status' then
            if (old.identifier, old.name, old.state_machine, old.state_identifier, old.device_only) is distinct from (new.identifier, new.name, new.state_machine, new.state_identifier, new.device_only) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'door_procedure' then
            if (old.identifier, old.name, old.functionality) is distinct from (new.identifier, new.name, new.functionality) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'email' then
            if (old.identifier, old.address, old.patient_identifier, old.employee_identifier, old.role_identifier, old.crew_identifier, old.possible_work_order_top_identifier) is distinct from (new.identifier, new.address, new.patient_identifier, new.employee_identifier, new.role_identifier, new.crew_identifier, new.possible_work_order_top_identifier) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'employee' then
            if (old.identifier, old.name, old.dect_account_identifier, old.spectralink_account_identifier, old.cas_language, old.cas_user, old.cas_password, old.cas_permissions) is distinct from (new.identifier, new.name, new.dect_account_identifier, new.spectralink_account_identifier, new.cas_language, new.cas_user, new.cas_password, new.cas_permissions) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'location' then
            if (old.identifier, old.name, old.department_identifier) is distinct from (new.identifier, new.name, new.department_identifier) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'mis_connection_department' then
            if (old.identifier, old.mis_connection_identifier, old.department_identifier, old.identification, old.mis_mode) is distinct from (new.identifier, new.mis_connection_identifier, new.department_identifier, new.identification, new.mis_mode) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'mis_connection_employee' then
            if (old.identifier, old.mis_connection_identifier, old.employee_identifier, old.identification, old.mis_mode) is distinct from (new.identifier, new.mis_connection_identifier, new.employee_identifier, new.identification, new.mis_mode) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'mis_connection_location' then
            if (old.identifier, old.mis_connection_identifier, old.location_identifier, old.identification, old.mis_mode) is distinct from (new.identifier, new.mis_connection_identifier, new.location_identifier, new.identification, new.mis_mode) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'mis_connection_patient' then
            if (old.identifier, old.mis_connection_identifier, old.patient_identifier, old.identification, old.mis_mode) is distinct from (new.identifier, new.mis_connection_identifier, new.patient_identifier, new.identification, new.mis_mode) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'patient' then
            if (old.identifier, old.first_name, old.last_name, old.sex, old.middle_name) is distinct from (new.identifier, new.first_name, new.last_name, new.sex, new.middle_name) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'patient_identification' then
            if (old.identifier, old.key, old.value, old.patient_identifier) is distinct from (new.identifier, new.key, new.value, new.patient_identifier) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'possible_work_order' then
            if (old.identifier, old.name, old.code, old.possible_work_order_top_identifier) is distinct from (new.identifier, new.name, new.code, new.possible_work_order_top_identifier) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'possible_work_order_top' then
            if (old.identifier, old.name) is distinct from (new.identifier, new.name) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'rf_module' then
            if (old.identifier, old.serial, old.brand_identifier, old.type_identifier, old.patient_identifier, old.location_identifier, old.activity_timestamp, old.battery_low) is distinct from (new.identifier, new.serial, new.brand_identifier, new.type_identifier, new.patient_identifier, new.location_identifier, new.activity_timestamp, new.battery_low) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'rf_module_brand' then
            if (old.identifier, old.name) is distinct from (new.identifier, new.name) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'rf_module_type' then
            if (old.identifier, old.name) is distinct from (new.identifier, new.name) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'role' then
            if (old.identifier, old.name) is distinct from (new.identifier, new.name) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'shortcut' then
            if (old.identifier, old.name, old.picture_identifier, old.url, old.type, old.position) is distinct from (new.identifier, new.name, new.picture_identifier, new.url, new.type, new.position) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'spectralink_account' then
            if (old.identifier, old.number, old.name) is distinct from (new.identifier, new.number, new.name) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'spectralink_group' then
            if (old.identifier, old.name) is distinct from (new.identifier, new.name) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
        when 'status' then
            if (old.identifier, old.name, old.type, old.color, old.text_color, old.background_color, old.priority) is distinct from (new.identifier, new.name, new.type, new.color, new.text_color, new.background_color, new.priority) then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            elseif old.cas_mode != new.cas_mode then
                new.cas_version = extract(epoch from current_timestamp) * 1000000;
            end if;
    end case;

    return new;
end
$$;


ALTER FUNCTION public.trigger_cas_version_before() OWNER TO aperi;

--
-- Name: trigger_employee_authorization(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_employee_authorization() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    -- INSERT: Add Care record if not exists
    insert into employee_authorization(employee_identifier, authorization_type) values(new.identifier, 'caring') ON conflict do nothing;
    insert into employee_authorization(employee_identifier, authorization_type) values(new.identifier, 'caringplus') ON conflict do nothing;
    insert into employee_authorization(employee_identifier, authorization_type) values(new.identifier, 'nursing') ON conflict do nothing;
    insert into employee_authorization(employee_identifier, authorization_type) values(new.identifier, 'medication') ON conflict do nothing;    
    return new;
end
$$;


ALTER FUNCTION public.trigger_employee_authorization() OWNER TO aperi;

--
-- Name: trigger_employee_not_active_after(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_employee_not_active_after() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    update    activity
    set       active = false
    where     activity.employee_identifier = new.identifier and
              activity.active;

    return null;
end
$$;


ALTER FUNCTION public.trigger_employee_not_active_after() OWNER TO aperi;

--
-- Name: trigger_employee_not_active_before(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_employee_not_active_before() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    new.dect_account_identifier = null;
    new.spectralink_account_identifier = null;

    return new;
end
$$;


ALTER FUNCTION public.trigger_employee_not_active_before() OWNER TO aperi;

--
-- Name: trigger_location_care(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_location_care() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    -- INSERT: Add Care record if not exists
	if new.care_identifier is null then
        insert into    care(status_identifier)
        select         status.identifier
        from           status
        where          status.identifier = 0
        returning      care.identifier
        into           new.care_identifier;

        if not found then
            RAISE EXCEPTION 'trigger_location_care: Failed to insert care record (probably missing status record)';
            return null;
        end if;
    end if;
    return new;
end
$$;


ALTER FUNCTION public.trigger_location_care() OWNER TO aperi;

--
-- Name: trigger_location_room(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_location_room() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    if tg_relname = 'location' then
        if tg_op = 'INSERT' then
            insert into room(name, code, location_identifier) select new.name, new.name, new.identifier;
        elseif tg_op = 'UPDATE' then
            if (old.name) is distinct from (new.name) then
                update room set name = new.name, code = new.name where room.location_identifier = new.identifier;
			end if;
			if (old.cas_mode) is distinct from (new.cas_mode) and (new.cas_mode = 'DELETED') then				
				delete from location_patient where location_identifier = new.identifier;				
            end if;				
        end if;
    elseif tg_relname = 'location_patient' then
        if tg_op = 'INSERT' then
            update patient set room_identifier = (select room.identifier from room where room.location_identifier = new.location_identifier) where patient.identifier = new.patient_identifier;
        elseif tg_op = 'DELETE' then
            update patient set room_identifier = null where patient.identifier = old.patient_identifier and patient.room_identifier = (select room.identifier from room where room.location_identifier = old.location_identifier);						
        end if;
    end if;

    return null;
end
$$;


ALTER FUNCTION public.trigger_location_room() OWNER TO aperi;

--
-- Name: trigger_log_care(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_log_care() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
    _location_identifier log_care.location_identifier%type = (select identifier from location where care_identifier = new.care_identifier);
    _employee_identifier log_care.employee_identifier%type = new.employee_identifier;
    _period              log_care.period%type              = tstzrange(new.timestamp_enter, coalesce(new.timestamp_leave, 'infinity'));
begin
    delete from    log_care
    where          (location_identifier, employee_identifier) = (_location_identifier, _employee_identifier) and
                   period && _period;

    insert into    log_care(location_identifier, employee_identifier, period)
    select         _location_identifier, _employee_identifier, _period;

    return null;
end
$$;


ALTER FUNCTION public.trigger_log_care() OWNER TO aperi;

--
-- Name: trigger_log_duty(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_log_duty() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
    _crew_identifier     log_duty.crew_identifier%type     = coalesce(old.crew_identifier, new.crew_identifier);
    _employee_identifier log_duty.employee_identifier%type = coalesce(old.employee_identifier, new.employee_identifier);
    _role_identifier     log_duty.role_identifier%type     = coalesce(old.role_identifier, new.role_identifier);
    _period              log_duty.period%type              = tstzrange(current_timestamp, 'infinity');
begin
    if tg_op = 'INSERT' or (tg_op = 'UPDATE' and new.active) then
        insert into    log_duty(crew_identifier, employee_identifier, role_identifier, period)
        select         _crew_identifier, _employee_identifier, _role_identifier, _period;
    else
        update    log_duty
        set       period = period - _period
        where     (crew_identifier, employee_identifier, role_identifier) = (_crew_identifier, _employee_identifier, _role_identifier) and
                  period && _period;
    end if;

    return null;
end
$$;


ALTER FUNCTION public.trigger_log_duty() OWNER TO aperi;

--
-- Name: trigger_log_employee_dect_account(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_log_employee_dect_account() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
    _employee_identifier log_employee_dect_account.employee_identifier%type = coalesce(old.identifier, new.identifier);
    _period              log_employee_dect_account.period%type              = tstzrange(current_timestamp, 'infinity');
begin
    if tg_op = 'INSERT' or (tg_op = 'UPDATE' and new.dect_account_identifier is not null) then
        insert into    log_employee_dect_account(employee_identifier, dect_account_identifier, period)
        select         _employee_identifier, new.dect_account_identifier, _period;
    end if;
    if (tg_op = 'UPDATE' and old.dect_account_identifier is not null) or tg_op = 'DELETE' then
        update    log_employee_dect_account
        set       period = period - _period
        where     (employee_identifier, dect_account_identifier) = (_employee_identifier, old.dect_account_identifier) and
                  period && _period;
    end if;

    return null;
end
$$;


ALTER FUNCTION public.trigger_log_employee_dect_account() OWNER TO aperi;

--
-- Name: trigger_log_employee_spectralink_account(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_log_employee_spectralink_account() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
    _employee_identifier log_employee_spectralink_account.employee_identifier%type = coalesce(old.identifier, new.identifier);
    _period              log_employee_spectralink_account.period%type              = tstzrange(current_timestamp, 'infinity');
begin
    if tg_op = 'INSERT' or (tg_op = 'UPDATE' and new.spectralink_account_identifier is not null) then
        insert into    log_employee_spectralink_account(employee_identifier, spectralink_account_identifier, period)
        select         _employee_identifier, new.spectralink_account_identifier, _period;
    end if;
    if (tg_op = 'UPDATE' and old.spectralink_account_identifier is not null) or tg_op = 'DELETE' then
        update    log_employee_spectralink_account
        set       period = period - _period
        where     (employee_identifier, spectralink_account_identifier) = (_employee_identifier, old.spectralink_account_identifier) and
                  period && _period;
    end if;

    return null;
end
$$;


ALTER FUNCTION public.trigger_log_employee_spectralink_account() OWNER TO aperi;

--
-- Name: trigger_log_location_patient(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_log_location_patient() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
    _location_identifier log_location_patient.location_identifier%type = coalesce(old.location_identifier, new.location_identifier);
    _patient_identifier  log_location_patient.patient_identifier%type  = coalesce(old.patient_identifier, new.patient_identifier);
    _period              log_location_patient.period%type              = tstzrange(current_timestamp, 'infinity');
begin
    case tg_op
        when 'INSERT' then
            insert into    log_location_patient(location_identifier, patient_identifier, period)
            select         _location_identifier, _patient_identifier, _period;
        when 'DELETE' then
            update    log_location_patient
            set       period = period - _period
            where     (location_identifier, patient_identifier) = (_location_identifier, _patient_identifier) and
                      period && _period;
    end case;

    return null;
end
$$;


ALTER FUNCTION public.trigger_log_location_patient() OWNER TO aperi;

--
-- Name: trigger_log_patient_cas_mode(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_log_patient_cas_mode() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
    _patient_identifier log_patient_cas_mode.patient_identifier%type  = coalesce(old.identifier, new.identifier);
    _period             log_patient_cas_mode.period%type              = tstzrange(current_timestamp, 'infinity');
begin
    if tg_op = 'INSERT' or (tg_op = 'UPDATE' and new.cas_mode = 'ACTIVE') then
        insert into    log_patient_cas_mode(patient_identifier, period)
        select         _patient_identifier, _period;
    else
        update    log_patient_cas_mode
        set       period = period - _period
        where     patient_identifier = _patient_identifier and
                  period && _period;
    end if;

    return null;
end
$$;


ALTER FUNCTION public.trigger_log_patient_cas_mode() OWNER TO aperi;

--
-- Name: trigger_log_status(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_log_status() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    case tg_relname
        when 'location' then
            insert into    log_status(location_identifier, status_identifier)
            select         new.identifier, care.status_identifier
            from           care
            where          care.identifier = new.care_identifier;
        when 'care' then
            insert into    log_status(location_identifier, status_identifier)
            select         identifier, new.status_identifier
            from           location
            where          care_identifier = new.identifier;
    end case;

    return null;
end
$$;


ALTER FUNCTION public.trigger_log_status() OWNER TO aperi;

--
-- Name: trigger_mis_legacy(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_mis_legacy() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
    _type text = (select mis_connection.type from mis_connection where mis_connection.identifier = new.mis_connection_identifier);
begin
    case tg_relname
        when 'mis_connection_employee' then
            case _type
                when 'CEVI' then
                    update    employee
                    set       cms = 'CEVI',
                              cms_code_one = new.data->>'login'
                    where     employee.identifier = new.employee_identifier;
                when 'CARE_SOLUTIONS' then
                    update    employee
                    set       cms = 'CARESOLUTIONS',
                              cms_code_one = coalesce(new.data->>'externalIdentifier', employee.cms_code_one),
                              cms_code_two = new.identification#>>'{}'
                    where     employee.identifier = new.employee_identifier;
                when 'GERACC' then
                    update    employee
                    set       cms = 'GERACC',
                              cms_code_one = new.identification#>>'{}'
                    where     employee.identifier = new.employee_identifier;
				else 
					update employee
					set cms = _type,
						cms_code_one = new.identification#>>'{}'
					where     employee.identifier = new.employee_identifier;
            end case;
        when 'mis_connection_patient' then
            case _type
                when 'CEVI' then
                    update    patient
                    set       code = new.identification#>>'{}'
                    where     patient.identifier = new.patient_identifier;
                when 'CARE_SOLUTIONS' then
                    update    patient
                    set       code = new.identification#>>'{}'
                    where     patient.identifier = new.patient_identifier;
                when 'GERACC' then
                    update    patient
                    set       code = new.identification#>>'{}'
                    where     patient.identifier = new.patient_identifier;
				else 					
					update    patient
                    set       code = new.identification#>>'{}'
                    where     patient.identifier = new.patient_identifier;					
            end case;
    end case;

    return null;
end
$$;


ALTER FUNCTION public.trigger_mis_legacy() OWNER TO aperi;

--
-- Name: trigger_mis_sync(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_mis_sync() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    -- remove orphaned departments/locations/employees/patients
    perform cas_mis_sync_populate(old.identifier, jsonb_build_object('departments', jsonb_build_array(), 'locations', jsonb_build_array(), 'employees', jsonb_build_array(), 'patients', jsonb_build_array()));

    return old;
end
$$;


ALTER FUNCTION public.trigger_mis_sync() OWNER TO aperi;

--
-- Name: trigger_patient_name(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_patient_name() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    if tg_op = 'INSERT' then
        new.name = new.last_name || ' ' || new.first_name;
    elseif tg_op = 'UPDATE' then
        if (old.last_name, old.first_name) != (new.last_name, new.first_name) then
            new.name = new.last_name || ' ' || new.first_name;
        end if;
    end if;

    return new;
end
$$;


ALTER FUNCTION public.trigger_patient_name() OWNER TO aperi;

--
-- Name: trigger_prune_application_global_device(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_application_global_device() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from device where (device.identifier) = (old.device_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_application_global_device() OWNER TO aperi;

--
-- Name: trigger_prune_camera_webrtc_account(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_camera_webrtc_account() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from camera where (camera.identifier) = (old.camera_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_camera_webrtc_account() OWNER TO aperi;

--
-- Name: trigger_prune_e_c_a_m_d_employee_engine_call_action_message_app(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_e_c_a_m_d_employee_engine_call_action_message_app() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_call_action_message_app where (engine_call_action_message_app.identifier) = (old.settings_app_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_e_c_a_m_d_employee_engine_call_action_message_app() OWNER TO aperi;

--
-- Name: trigger_prune_e_c_a_m_d_employee_engine_call_action_message_emp(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_e_c_a_m_d_employee_engine_call_action_message_emp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_call_action_message_email where (engine_call_action_message_email.identifier) = (old.settings_email_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_e_c_a_m_d_employee_engine_call_action_message_emp() OWNER TO aperi;

--
-- Name: trigger_prune_employee_fcm_account(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_employee_fcm_account() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from fcm_account where (fcm_account.identifier) = (old.fcm_account_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_employee_fcm_account() OWNER TO aperi;

--
-- Name: trigger_prune_engine_call_action_engine_call_action_message(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_call_action_engine_call_action_message() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_call_action_message where (engine_call_action_message.identifier) = (old.engine_call_action_message_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_call_action_engine_call_action_message() OWNER TO aperi;

--
-- Name: trigger_prune_engine_call_action_engine_call_action_viewpoint_n(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_call_action_engine_call_action_viewpoint_n() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_call_action_viewpoint_notification where (engine_call_action_viewpoint_notification.identifier) = (old.engine_call_action_viewpoint_notification_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_call_action_engine_call_action_viewpoint_n() OWNER TO aperi;

--
-- Name: trigger_prune_engine_call_action_engine_call_action_viewpoint_s(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_call_action_engine_call_action_viewpoint_s() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_call_action_viewpoint_status where (engine_call_action_viewpoint_status.identifier) = (old.engine_call_action_viewpoint_status_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_call_action_engine_call_action_viewpoint_s() OWNER TO aperi;

--
-- Name: trigger_prune_engine_call_action_message_dect_engine_call_actio(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_call_action_message_dect_engine_call_actio() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_call_action_message_dect where (engine_call_action_message_dect.identifier) = (old.settings_dect_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_call_action_message_dect_engine_call_actio() OWNER TO aperi;

--
-- Name: trigger_prune_engine_call_action_message_destination_dect_engin(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_call_action_message_destination_dect_engin() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_call_action_message_dect where (engine_call_action_message_dect.identifier) = (old.settings_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_call_action_message_destination_dect_engin() OWNER TO aperi;

--
-- Name: trigger_prune_engine_call_action_message_destination_email_engi(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_call_action_message_destination_email_engi() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_call_action_message_email where (engine_call_action_message_email.identifier) = (old.settings_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_call_action_message_destination_email_engi() OWNER TO aperi;

--
-- Name: trigger_prune_engine_call_action_message_destination_spectralin(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_call_action_message_destination_spectralin() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_call_action_message_spectralink where (engine_call_action_message_spectralink.identifier) = (old.settings_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_call_action_message_destination_spectralin() OWNER TO aperi;

--
-- Name: trigger_prune_engine_call_action_message_spectralink_engine_cal(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_call_action_message_spectralink_engine_cal() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_call_action_message_spectralink where (engine_call_action_message_spectralink.identifier) = (old.settings_spectralink_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_call_action_message_spectralink_engine_cal() OWNER TO aperi;

--
-- Name: trigger_prune_engine_event_badge_engine_event_badge_provided(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_event_badge_engine_event_badge_provided() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_event_badge_provided where (engine_event_badge_provided.identifier) = (old.badge_provided_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_event_badge_engine_event_badge_provided() OWNER TO aperi;

--
-- Name: trigger_prune_engine_event_badge_engine_event_badge_provisioned(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_event_badge_engine_event_badge_provisioned() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_event_badge_provisioned where (engine_event_badge_provisioned.identifier) = (old.badge_provisioned_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_event_badge_engine_event_badge_provisioned() OWNER TO aperi;

--
-- Name: trigger_prune_engine_event_badge_rf_module_event_rf_module_prov(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_event_badge_rf_module_event_rf_module_prov() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_event_rf_module_provided where (engine_event_rf_module_provided.identifier) = (old.rf_module_provided_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_event_badge_rf_module_event_rf_module_prov() OWNER TO aperi;

--
-- Name: trigger_prune_engine_event_engine_event_access_denied(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_event_engine_event_access_denied() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_event_access_denied where (engine_event_access_denied.identifier) = (old.access_denied_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_event_engine_event_access_denied() OWNER TO aperi;

--
-- Name: trigger_prune_engine_event_engine_event_access_entered(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_event_engine_event_access_entered() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_event_access_entered where (engine_event_access_entered.identifier) = (old.access_entered_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_event_engine_event_access_entered() OWNER TO aperi;

--
-- Name: trigger_prune_engine_event_engine_event_access_left(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_event_engine_event_access_left() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_event_access_left where (engine_event_access_left.identifier) = (old.access_left_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_event_engine_event_access_left() OWNER TO aperi;

--
-- Name: trigger_prune_engine_event_engine_event_viewpoint_state_changed(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_engine_event_engine_event_viewpoint_state_changed() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from engine_event_viewpoint_state_changed where (engine_event_viewpoint_state_changed.identifier) = (old.viewpoint_state_changed_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_engine_event_engine_event_viewpoint_state_changed() OWNER TO aperi;

--
-- Name: trigger_prune_general_practitioner_administration_contact(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_general_practitioner_administration_contact() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from administration_contact where (administration_contact.identifier) = (old.administration_contact_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_general_practitioner_administration_contact() OWNER TO aperi;

--
-- Name: trigger_prune_location_care(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_location_care() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from care where (care.identifier) = (old.care_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_location_care() OWNER TO aperi;

--
-- Name: trigger_prune_message_lifeline_message(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_message_lifeline_message() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from lifeline_message where (lifeline_message.identifier) = (old.lifeline_message_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_message_lifeline_message() OWNER TO aperi;

--
-- Name: trigger_prune_organization_administration_contact(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_organization_administration_contact() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from administration_contact where (administration_contact.identifier) = (old.administration_contact_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_organization_administration_contact() OWNER TO aperi;

--
-- Name: trigger_prune_patient_patient_administration_information(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_patient_patient_administration_information() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from patient_administration_information where (patient_administration_information.identifier) = (old.patient_administration_information_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_patient_patient_administration_information() OWNER TO aperi;

--
-- Name: trigger_prune_patient_patient_medical_information(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_patient_patient_medical_information() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from patient_medical_information where (patient_medical_information.identifier) = (old.patient_medical_information_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_patient_patient_medical_information() OWNER TO aperi;

--
-- Name: trigger_prune_patient_patient_social_information(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_patient_patient_social_information() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from patient_social_information where (patient_social_information.identifier) = (old.patient_social_information_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_patient_patient_social_information() OWNER TO aperi;

--
-- Name: trigger_prune_status_status_app(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_status_status_app() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from status_app where (status_app.identifier) = (old.app_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_status_status_app() OWNER TO aperi;

--
-- Name: trigger_prune_status_status_dect(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_status_status_dect() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from status_dect where (status_dect.identifier) = (old.dect_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_status_status_dect() OWNER TO aperi;

--
-- Name: trigger_prune_sui_patient_info_patient(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_prune_sui_patient_info_patient() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
delete from patient where (patient.identifier) = (old.patient_identifier);
return null;
end;
$$;


ALTER FUNCTION public.trigger_prune_sui_patient_info_patient() OWNER TO aperi;

--
-- Name: trigger_spectralink_message_external_identifier(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_spectralink_message_external_identifier() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    if new.external_identifier is null then
        new.external_identifier = nextval('sequence_spectralink_message_external_identifier');
    end if;

    -- delete orphaned message
    delete from spectralink_message where spectralink_message.external_identifier = new.external_identifier;

    return new;
end;
$$;


ALTER FUNCTION public.trigger_spectralink_message_external_identifier() OWNER TO aperi;

--
-- Name: trigger_sui_patient_info(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.trigger_sui_patient_info() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    insert into    sui_patient_info(patient_identifier)
    select         new.identifier;

    return null;
end
$$;


ALTER FUNCTION public.trigger_sui_patient_info() OWNER TO aperi;

--
-- Name: update_updatedtimestamp(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.update_updatedtimestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
   NEW.utc_timestamp_lastupdate = now(); 
   RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_updatedtimestamp() OWNER TO aperi;

--
-- Name: version_current_get(); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.version_current_get() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$    
BEGIN
   	RETURN installed_version from version_history order by identifier desc limit 1;
END
$$;


ALTER FUNCTION public.version_current_get() OWNER TO aperi;

--
-- Name: version_history_set(text); Type: FUNCTION; Schema: public; Owner: aperi
--

CREATE FUNCTION public.version_history_set(version text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
	BEGIN
		insert into version_history (installed_version)
		select $1 
		where not exists (select identifier from version_history where installed_version = $1);
		return (select identifier from version_history where installed_version = $1);
   	END	
   $_$;


ALTER FUNCTION public.version_history_set(version text) OWNER TO aperi;

--
-- Name: first(anyelement); Type: AGGREGATE; Schema: public; Owner: aperi
--

CREATE AGGREGATE public.first(anyelement) (
    SFUNC = public._coalesce,
    STYPE = anyelement
);


ALTER AGGREGATE public.first(anyelement) OWNER TO aperi;

--
-- Name: jsonb_concat_agg(jsonb); Type: AGGREGATE; Schema: public; Owner: aperi
--

CREATE AGGREGATE public.jsonb_concat_agg(jsonb) (
    SFUNC = jsonb_concat,
    STYPE = jsonb,
    INITCOND = '[]'
);


ALTER AGGREGATE public.jsonb_concat_agg(jsonb) OWNER TO aperi;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: access_control_access_door_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.access_control_access_door_group (
    access_control_identifier integer NOT NULL,
    access_door_group_identifier integer NOT NULL
);


ALTER TABLE public.access_control_access_door_group OWNER TO aperi;

--
-- Name: access_door; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.access_door (
    identifier integer NOT NULL,
    name text NOT NULL,
    device_identifier integer NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.access_door OWNER TO aperi;

--
-- Name: access_door_access_control; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.access_door_access_control (
    access_door_identifier integer NOT NULL,
    access_control_identifier integer NOT NULL
);


ALTER TABLE public.access_door_access_control OWNER TO aperi;

--
-- Name: access_door_access_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.access_door_access_group (
    access_door_identifier integer NOT NULL,
    access_group_identifier integer NOT NULL
);


ALTER TABLE public.access_door_access_group OWNER TO aperi;

--
-- Name: access_door_door_procedure; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.access_door_door_procedure (
    access_door_identifier integer NOT NULL,
    door_procedure_identifier integer NOT NULL
);


ALTER TABLE public.access_door_door_procedure OWNER TO aperi;

--
-- Name: access_door_group_access_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.access_door_group_access_group (
    access_door_group_identifier integer NOT NULL,
    access_group_identifier integer NOT NULL
);


ALTER TABLE public.access_door_group_access_group OWNER TO aperi;

--
-- Name: access_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.access_group (
    identifier integer NOT NULL,
    name text NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.access_group OWNER TO aperi;

--
-- Name: access_group_badge; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.access_group_badge (
    access_group_identifier integer NOT NULL,
    badge_identifier integer NOT NULL
);


ALTER TABLE public.access_group_badge OWNER TO aperi;

--
-- Name: action_config; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.action_config (
    identifier integer NOT NULL
);


ALTER TABLE public.action_config OWNER TO aperi;

--
-- Name: action_config_dect_to_crews_of_location; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.action_config_dect_to_crews_of_location (
    identifier integer NOT NULL,
    dect_type integer NOT NULL,
    dect_beep integer NOT NULL,
    dect_priority integer NOT NULL,
    message text NOT NULL,
    action_config_identifier integer NOT NULL,
    only_to_employees_on_duty boolean NOT NULL
);


ALTER TABLE public.action_config_dect_to_crews_of_location OWNER TO aperi;

--
-- Name: action_config_dect_to_crews_of_location_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.action_config_dect_to_crews_of_location_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.action_config_dect_to_crews_of_location_identifier_seq OWNER TO aperi;

--
-- Name: action_config_dect_to_crews_of_location_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.action_config_dect_to_crews_of_location_identifier_seq OWNED BY public.action_config_dect_to_crews_of_location.identifier;


--
-- Name: action_config_dect_to_crews_of_location_role; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.action_config_dect_to_crews_of_location_role (
    identifier integer NOT NULL,
    action_config_dect_to_crews_of_location_identifier integer NOT NULL,
    role_identifier integer NOT NULL
);


ALTER TABLE public.action_config_dect_to_crews_of_location_role OWNER TO aperi;

--
-- Name: action_config_dect_to_crews_of_location_role_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.action_config_dect_to_crews_of_location_role_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.action_config_dect_to_crews_of_location_role_identifier_seq OWNER TO aperi;

--
-- Name: action_config_dect_to_crews_of_location_role_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.action_config_dect_to_crews_of_location_role_identifier_seq OWNED BY public.action_config_dect_to_crews_of_location_role.identifier;


--
-- Name: action_config_dect_to_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.action_config_dect_to_group (
    identifier integer NOT NULL,
    dect_type integer NOT NULL,
    dect_beep integer NOT NULL,
    dect_priority integer NOT NULL,
    message text NOT NULL,
    action_config_identifier integer NOT NULL
);


ALTER TABLE public.action_config_dect_to_group OWNER TO aperi;

--
-- Name: action_config_dect_to_group_dect_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.action_config_dect_to_group_dect_group (
    identifier integer NOT NULL,
    action_config_dect_to_group_identifier integer NOT NULL,
    dect_group_identifier integer NOT NULL
);


ALTER TABLE public.action_config_dect_to_group_dect_group OWNER TO aperi;

--
-- Name: action_config_dect_to_group_dect_group_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.action_config_dect_to_group_dect_group_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.action_config_dect_to_group_dect_group_identifier_seq OWNER TO aperi;

--
-- Name: action_config_dect_to_group_dect_group_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.action_config_dect_to_group_dect_group_identifier_seq OWNED BY public.action_config_dect_to_group_dect_group.identifier;


--
-- Name: action_config_dect_to_group_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.action_config_dect_to_group_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.action_config_dect_to_group_identifier_seq OWNER TO aperi;

--
-- Name: action_config_dect_to_group_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.action_config_dect_to_group_identifier_seq OWNED BY public.action_config_dect_to_group.identifier;


--
-- Name: action_config_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.action_config_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.action_config_identifier_seq OWNER TO aperi;

--
-- Name: action_config_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.action_config_identifier_seq OWNED BY public.action_config.identifier;


--
-- Name: action_config_spectralink_to_crews_of_location; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.action_config_spectralink_to_crews_of_location (
    identifier integer NOT NULL,
    message text NOT NULL,
    spectralink_action integer NOT NULL,
    spectralink_response integer NOT NULL,
    spectralink_color integer NOT NULL,
    spectralink_alerttone integer NOT NULL,
    spectralink_alertvolume integer NOT NULL,
    spectralink_alerttimeout integer NOT NULL,
    spectralink_callback integer NOT NULL,
    action_config_identifier integer NOT NULL,
    only_to_employees_on_duty boolean NOT NULL
);


ALTER TABLE public.action_config_spectralink_to_crews_of_location OWNER TO aperi;

--
-- Name: action_config_spectralink_to_crews_of_location_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.action_config_spectralink_to_crews_of_location_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.action_config_spectralink_to_crews_of_location_identifier_seq OWNER TO aperi;

--
-- Name: action_config_spectralink_to_crews_of_location_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.action_config_spectralink_to_crews_of_location_identifier_seq OWNED BY public.action_config_spectralink_to_crews_of_location.identifier;


--
-- Name: action_config_spectralink_to_crews_of_location_role; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.action_config_spectralink_to_crews_of_location_role (
    identifier integer NOT NULL,
    action_config_spectralink_to_crews_of_location_identifier integer NOT NULL,
    role_identifier integer NOT NULL
);


ALTER TABLE public.action_config_spectralink_to_crews_of_location_role OWNER TO aperi;

--
-- Name: action_config_spectralink_to_crews_of_location_r_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.action_config_spectralink_to_crews_of_location_r_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.action_config_spectralink_to_crews_of_location_r_identifier_seq OWNER TO aperi;

--
-- Name: action_config_spectralink_to_crews_of_location_r_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.action_config_spectralink_to_crews_of_location_r_identifier_seq OWNED BY public.action_config_spectralink_to_crews_of_location_role.identifier;


--
-- Name: action_config_spectralink_to_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.action_config_spectralink_to_group (
    identifier integer NOT NULL,
    message text NOT NULL,
    spectralink_action integer NOT NULL,
    spectralink_response integer NOT NULL,
    spectralink_color integer NOT NULL,
    spectralink_alerttone integer NOT NULL,
    spectralink_alertvolume integer NOT NULL,
    spectralink_alerttimeout integer NOT NULL,
    spectralink_callback integer NOT NULL,
    action_config_identifier integer NOT NULL
);


ALTER TABLE public.action_config_spectralink_to_group OWNER TO aperi;

--
-- Name: action_config_spectralink_to_group_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.action_config_spectralink_to_group_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.action_config_spectralink_to_group_identifier_seq OWNER TO aperi;

--
-- Name: action_config_spectralink_to_group_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.action_config_spectralink_to_group_identifier_seq OWNED BY public.action_config_spectralink_to_group.identifier;


--
-- Name: action_config_spectralink_to_group_spectralink_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.action_config_spectralink_to_group_spectralink_group (
    identifier integer NOT NULL,
    action_config_spectralink_to_group_identifier integer NOT NULL,
    spectralink_group_identifier integer NOT NULL
);


ALTER TABLE public.action_config_spectralink_to_group_spectralink_group OWNER TO aperi;

--
-- Name: action_config_spectralink_to_group_spectralink_g_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.action_config_spectralink_to_group_spectralink_g_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.action_config_spectralink_to_group_spectralink_g_identifier_seq OWNER TO aperi;

--
-- Name: action_config_spectralink_to_group_spectralink_g_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.action_config_spectralink_to_group_spectralink_g_identifier_seq OWNED BY public.action_config_spectralink_to_group_spectralink_group.identifier;


--
-- Name: activity; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.activity (
    identifier integer NOT NULL,
    active boolean DEFAULT false NOT NULL,
    crew_identifier integer NOT NULL,
    employee_identifier integer NOT NULL,
    role_identifier integer NOT NULL,
    "position" integer DEFAULT 0 NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.activity OWNER TO aperi;

--
-- Name: address; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.address (
    identifier integer NOT NULL,
    address text NOT NULL,
    street_number text NOT NULL,
    city text NOT NULL,
    zip_code text NOT NULL,
    country text,
    contact_identifier integer
);


ALTER TABLE public.address OWNER TO aperi;

--
-- Name: administration_contact; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.administration_contact (
    identifier integer NOT NULL,
    name text,
    first_name text,
    telephone text,
    telephone2 text,
    gsm text,
    fax text,
    email text,
    website text
);


ALTER TABLE public.administration_contact OWNER TO aperi;

--
-- Name: allergy; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.allergy (
    identifier integer NOT NULL,
    name text NOT NULL
);


ALTER TABLE public.allergy OWNER TO aperi;

--
-- Name: api_login; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.api_login (
    identifier integer NOT NULL,
    login_identifier text NOT NULL,
    password text NOT NULL,
    employee_identifier integer,
    process_identifier integer,
    management_account_identifier integer,
    patient_identifier integer,
    device_identifier integer
);


ALTER TABLE public.api_login OWNER TO aperi;

--
-- Name: api_token; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.api_token (
    identifier integer NOT NULL,
    token text NOT NULL,
    profile text NOT NULL,
    start_time timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    end_time timestamp with time zone DEFAULT '9999-12-31 00:00:00+00'::timestamp with time zone NOT NULL,
    api_login_identifier integer NOT NULL
);


ALTER TABLE public.api_token OWNER TO aperi;

--
-- Name: app_message; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.app_message (
    identifier integer NOT NULL,
    message text NOT NULL,
    status integer DEFAULT 1 NOT NULL,
    type integer NOT NULL,
    delete_status integer DEFAULT 0 NOT NULL,
    timestamp_sent timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    timestamp_delivered timestamp with time zone,
    timestamp_man_ack timestamp with time zone,
    engine_call_action_message_identifier integer,
    employee_identifier integer NOT NULL,
    context_location_identifier integer,
    tag text
);


ALTER TABLE public.app_message OWNER TO aperi;

--
-- Name: application_global; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.application_global (
    identifier integer NOT NULL,
    comfort_during_night boolean DEFAULT true NOT NULL,
    embezzlement_time integer DEFAULT 3600 NOT NULL,
    device_identifier integer NOT NULL
);


ALTER TABLE public.application_global OWNER TO aperi;

--
-- Name: application_svp; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.application_svp (
    identifier integer NOT NULL,
    view_in_screensaver boolean DEFAULT false NOT NULL,
    pursuit_enabled boolean DEFAULT false NOT NULL,
    device_identifier integer NOT NULL,
    esvp_device_identifier integer NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT 0 NOT NULL
);


ALTER TABLE public.application_svp OWNER TO aperi;

--
-- Name: application_svp_crews; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.application_svp_crews (
    application_svp_identifier integer NOT NULL,
    crew_identifier integer NOT NULL
);


ALTER TABLE public.application_svp_crews OWNER TO aperi;

--
-- Name: application_svp_status; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.application_svp_status (
    application_svp_identifier integer NOT NULL,
    status_identifier integer NOT NULL
);


ALTER TABLE public.application_svp_status OWNER TO aperi;

--
-- Name: appointment; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.appointment (
    identifier integer NOT NULL,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone NOT NULL,
    description text NOT NULL,
    location text NOT NULL,
    patient_identifier integer NOT NULL,
    employee_identifier integer
);


ALTER TABLE public.appointment OWNER TO aperi;

--
-- Name: badge; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.badge (
    identifier integer NOT NULL,
    serial text NOT NULL,
    "timestamp" timestamp with time zone DEFAULT '9999-12-31 00:00:00+00'::timestamp with time zone NOT NULL,
    updated timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    employee_identifier integer,
    patient_identifier integer,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL,
    priority boolean DEFAULT false NOT NULL
);


ALTER TABLE public.badge OWNER TO aperi;

--
-- Name: blood_type; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.blood_type (
    identifier integer NOT NULL,
    name text NOT NULL,
    rhesus text NOT NULL
);


ALTER TABLE public.blood_type OWNER TO aperi;

--
-- Name: bluetooth_device; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.bluetooth_device (
    identifier integer NOT NULL,
    code text NOT NULL,
    name text NOT NULL,
    type integer NOT NULL
);


ALTER TABLE public.bluetooth_device OWNER TO aperi;

--
-- Name: broadcast_call; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.broadcast_call (
    identifier integer NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    sound text NOT NULL,
    employee_identifier integer
);


ALTER TABLE public.broadcast_call OWNER TO aperi;

--
-- Name: broadcast_call_broadcast_call_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.broadcast_call_broadcast_call_group (
    broadcast_call_identifier integer NOT NULL,
    broadcast_call_group_identifier integer NOT NULL
);


ALTER TABLE public.broadcast_call_broadcast_call_group OWNER TO aperi;

--
-- Name: broadcast_call_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.broadcast_call_group (
    identifier integer NOT NULL,
    name text NOT NULL
);


ALTER TABLE public.broadcast_call_group OWNER TO aperi;

--
-- Name: broadcast_call_group_device; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.broadcast_call_group_device (
    broadcast_call_group_identifier integer NOT NULL,
    device_identifier integer NOT NULL
);


ALTER TABLE public.broadcast_call_group_device OWNER TO aperi;

--
-- Name: call_reason; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.call_reason (
    identifier integer NOT NULL,
    tag text NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    source text NOT NULL,
    comment text,
    call_reason_category_identifier integer NOT NULL,
    employee_identifier integer NOT NULL,
    patient_identifier integer,
    location_identifier integer
);


ALTER TABLE public.call_reason OWNER TO aperi;

--
-- Name: call_reason_category; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.call_reason_category (
    identifier integer NOT NULL,
    prefix text,
    name text NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL,
    type public.call_reason_category_type DEFAULT 'other'::public.call_reason_category_type NOT NULL
);


ALTER TABLE public.call_reason_category OWNER TO aperi;

--
-- Name: callback_queue; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.callback_queue (
    identifier integer NOT NULL,
    callback_category public.callback_category,
    location_call_callback_identifier integer NOT NULL,
    url text NOT NULL,
    headers jsonb,
    body jsonb,
    last_send timestamp with time zone,
    tries integer DEFAULT 0 NOT NULL,
    status public.callback_status DEFAULT 'NEW'::public.callback_status NOT NULL
);


ALTER TABLE public.callback_queue OWNER TO aperi;

--
-- Name: callback_queue_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.callback_queue_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.callback_queue_identifier_seq OWNER TO aperi;

--
-- Name: callback_queue_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.callback_queue_identifier_seq OWNED BY public.callback_queue.identifier;


--
-- Name: camera; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.camera (
    identifier integer NOT NULL,
    location text NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.camera OWNER TO aperi;

--
-- Name: care; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.care (
    identifier integer NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    state integer DEFAULT 0 NOT NULL,
    state_cause_identifier integer,
    status_identifier integer NOT NULL
);


ALTER TABLE public.care OWNER TO aperi;

--
-- Name: care_action; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.care_action (
    identifier integer NOT NULL,
    groupname text,
    name text NOT NULL,
    plannedonly boolean NOT NULL,
    authorization_type public.authorization_type DEFAULT 'caring'::public.authorization_type NOT NULL
);


ALTER TABLE public.care_action OWNER TO aperi;

--
-- Name: care_action_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.care_action_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.care_action_identifier_seq OWNER TO aperi;

--
-- Name: care_action_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.care_action_identifier_seq OWNED BY public.care_action.identifier;


--
-- Name: care_action_signature; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.care_action_signature (
    identifier integer NOT NULL,
    utc_timestamp timestamp with time zone NOT NULL,
    care_action_identifier integer NOT NULL,
    patient_identifier integer NOT NULL,
    employee_identifier integer NOT NULL,
    done boolean NOT NULL,
    reason_notdone text,
    planned_care_action_identifier integer,
    remarks text,
    synced_on timestamp with time zone
);


ALTER TABLE public.care_action_signature OWNER TO aperi;

--
-- Name: care_action_signature_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.care_action_signature_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.care_action_signature_identifier_seq OWNER TO aperi;

--
-- Name: care_action_signature_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.care_action_signature_identifier_seq OWNED BY public.care_action_signature.identifier;


--
-- Name: care_session; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.care_session (
    identifier integer NOT NULL,
    endpoint integer DEFAULT 0 NOT NULL,
    timestamp_enter timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    timestamp_leave timestamp with time zone,
    locked boolean DEFAULT false NOT NULL,
    care_identifier integer NOT NULL,
    employee_identifier integer NOT NULL
);


ALTER TABLE public.care_session OWNER TO aperi;

--
-- Name: cas_audit_log; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.cas_audit_log (
    transaction bigint DEFAULT txid_current() NOT NULL,
    relation text NOT NULL,
    operation text NOT NULL,
    old jsonb,
    new jsonb,
    source text,
    executed_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.cas_audit_log OWNER TO aperi;

--
-- Name: cas_notification; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.cas_notification (
    category text NOT NULL,
    payload jsonb NOT NULL
);


ALTER TABLE public.cas_notification OWNER TO aperi;

--
-- Name: cas_report; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.cas_report (
    key text NOT NULL,
    meta json NOT NULL,
    visible boolean DEFAULT true NOT NULL
);


ALTER TABLE public.cas_report OWNER TO aperi;

--
-- Name: cas_session; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.cas_session (
    identifier uuid DEFAULT public.gen_random_uuid() NOT NULL,
    employee_identifier integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    refreshed_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.cas_session OWNER TO aperi;

--
-- Name: com_port; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.com_port (
    identifier integer NOT NULL,
    port text NOT NULL,
    baudrate integer NOT NULL,
    parity integer NOT NULL,
    databits integer NOT NULL,
    stopbits integer NOT NULL,
    active boolean NOT NULL,
    control_station boolean NOT NULL,
    local_address integer NOT NULL,
    remote_address integer NOT NULL,
    support_sync_for_poll boolean NOT NULL,
    support_remote_management boolean NOT NULL,
    support_message_identifier boolean NOT NULL,
    support_running_number boolean NOT NULL,
    distributed_messaging_delay integer NOT NULL,
    expire_message_after integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.com_port OWNER TO aperi;

--
-- Name: contact; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.contact (
    identifier integer NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    webrtc_account_identifier integer NOT NULL,
    contact_list_identifier integer NOT NULL
);


ALTER TABLE public.contact OWNER TO aperi;

--
-- Name: contact_list; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.contact_list (
    identifier integer NOT NULL,
    type integer NOT NULL,
    employee_identifier integer,
    crew_identifier integer
);


ALTER TABLE public.contact_list OWNER TO aperi;

--
-- Name: crew; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.crew (
    identifier integer NOT NULL,
    name text NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.crew OWNER TO aperi;

--
-- Name: crew_location; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.crew_location (
    crew_identifier integer NOT NULL,
    location_identifier integer NOT NULL
);


ALTER TABLE public.crew_location OWNER TO aperi;

--
-- Name: day_night; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.day_night (
    identifier integer NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    description text NOT NULL,
    remarks text NOT NULL,
    patient_identifier integer NOT NULL,
    employee_identifier integer NOT NULL,
    period_identifier integer
);


ALTER TABLE public.day_night OWNER TO aperi;

--
-- Name: dect_account; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.dect_account (
    identifier integer NOT NULL,
    name text NOT NULL,
    number integer NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.dect_account OWNER TO aperi;

--
-- Name: dect_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.dect_group (
    identifier integer NOT NULL,
    name text NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.dect_group OWNER TO aperi;

--
-- Name: dect_group_dect_account; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.dect_group_dect_account (
    dect_group_identifier integer NOT NULL,
    dect_account_identifier integer NOT NULL
);


ALTER TABLE public.dect_group_dect_account OWNER TO aperi;

--
-- Name: dect_group_location; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.dect_group_location (
    dect_group_identifier integer NOT NULL,
    location_identifier integer NOT NULL
);


ALTER TABLE public.dect_group_location OWNER TO aperi;

--
-- Name: dect_message; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.dect_message (
    identifier integer NOT NULL,
    message text NOT NULL,
    beep integer NOT NULL,
    type integer NOT NULL,
    priority integer NOT NULL,
    status integer DEFAULT 1 NOT NULL,
    delete_status integer DEFAULT 0 NOT NULL,
    timestamp_sent timestamp with time zone,
    timestamp_delivered timestamp with time zone,
    timestamp_man_ack timestamp with time zone,
    engine_call_action_message_identifier integer,
    account_identifier integer NOT NULL,
    callback_account_identifier integer,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    scheduled_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    expired_at timestamp with time zone,
    context_location_identifier integer,
    tag text
);


ALTER TABLE public.dect_message OWNER TO aperi;

--
-- Name: dect_message_queue; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.dect_message_queue (
    identifier integer NOT NULL,
    guid text NOT NULL,
    engine_event_identifier integer NOT NULL,
    message text NOT NULL,
    beep integer NOT NULL,
    type integer NOT NULL,
    priority integer NOT NULL,
    number integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    sent_at timestamp with time zone,
    delivered_at timestamp with time zone,
    man_ack_at timestamp with time zone,
    deleted boolean NOT NULL,
    deletion_sent_at timestamp with time zone,
    deletion_confirmed_at timestamp with time zone
);


ALTER TABLE public.dect_message_queue OWNER TO aperi;

--
-- Name: dect_message_queue_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.dect_message_queue_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dect_message_queue_identifier_seq OWNER TO aperi;

--
-- Name: dect_message_queue_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.dect_message_queue_identifier_seq OWNED BY public.dect_message_queue.identifier;


--
-- Name: default_text; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.default_text (
    identifier integer NOT NULL,
    description text NOT NULL
);


ALTER TABLE public.default_text OWNER TO aperi;

--
-- Name: dementia; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.dementia (
    identifier integer NOT NULL,
    name text NOT NULL
);


ALTER TABLE public.dementia OWNER TO aperi;

--
-- Name: department; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.department (
    identifier integer NOT NULL,
    name text NOT NULL,
    code text DEFAULT public.gen_random_uuid() NOT NULL,
    site_identifier integer NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.department OWNER TO aperi;

--
-- Name: device; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.device (
    identifier integer NOT NULL,
    serial integer NOT NULL,
    name text NOT NULL,
    verklizan_location_identifier integer,
    badge_mode integer DEFAULT 0 NOT NULL,
    application integer DEFAULT 3 NOT NULL,
    engine_device_configuration_profile_identifier integer,
    location_identifier integer NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL,
    verklizan_identifier text,
    application_parameters jsonb DEFAULT '{}'::jsonb NOT NULL,
    viedome_identifier text,
    use_newui boolean DEFAULT false
);


ALTER TABLE public.device OWNER TO aperi;

--
-- Name: device_status; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.device_status (
    identifier integer NOT NULL,
    name text NOT NULL,
    state_machine integer NOT NULL,
    state_identifier integer NOT NULL,
    device_only boolean DEFAULT false NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.device_status OWNER TO aperi;

--
-- Name: diary; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.diary (
    identifier integer NOT NULL,
    description text,
    remarks text NOT NULL,
    employee_identifier integer,
    username text NOT NULL,
    created timestamp with time zone NOT NULL,
    synced_on timestamp with time zone
);


ALTER TABLE public.diary OWNER TO aperi;

--
-- Name: diary_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.diary_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.diary_identifier_seq OWNER TO aperi;

--
-- Name: diary_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.diary_identifier_seq OWNED BY public.diary.identifier;


--
-- Name: diary_patient; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.diary_patient (
    identifier integer NOT NULL,
    diary_identifier integer NOT NULL,
    patient_identifier integer NOT NULL
);


ALTER TABLE public.diary_patient OWNER TO aperi;

--
-- Name: diary_patient_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.diary_patient_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.diary_patient_identifier_seq OWNER TO aperi;

--
-- Name: diary_patient_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.diary_patient_identifier_seq OWNED BY public.diary_patient.identifier;


--
-- Name: diary_read; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.diary_read (
    employee_identifier integer NOT NULL,
    patient_identifier integer NOT NULL,
    read_at timestamp with time zone NOT NULL
);


ALTER TABLE public.diary_read OWNER TO aperi;

--
-- Name: door_procedure; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.door_procedure (
    identifier integer NOT NULL,
    name text NOT NULL,
    functionality integer NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.door_procedure OWNER TO aperi;

--
-- Name: email; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.email (
    identifier integer NOT NULL,
    address text NOT NULL,
    patient_identifier integer,
    employee_identifier integer,
    role_identifier integer,
    crew_identifier integer,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL,
    possible_work_order_top_identifier integer
);


ALTER TABLE public.email OWNER TO aperi;

--
-- Name: employee; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.employee (
    identifier integer NOT NULL,
    name text NOT NULL,
    avatar text DEFAULT ''::text,
    dect_account_identifier integer,
    fcm_account_identifier integer,
    cms_code_one text DEFAULT public.gen_random_uuid(),
    cms_code_two text,
    cms text DEFAULT 'APERI'::text NOT NULL,
    spectralink_account_identifier integer,
    cas_language text,
    cas_user text DEFAULT public.gen_random_uuid(),
    cas_password text DEFAULT public.crypt((public.gen_random_uuid())::text, public.gen_salt('bf'::text, 12)),
    cas_permissions jsonb,
    code text DEFAULT public.gen_random_uuid() NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.employee OWNER TO aperi;

--
-- Name: employee_authorization; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.employee_authorization (
    employee_identifier integer NOT NULL,
    authorization_type public.authorization_type NOT NULL
);


ALTER TABLE public.employee_authorization OWNER TO aperi;

--
-- Name: engine_action; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_action (
    identifier integer NOT NULL,
    action text NOT NULL,
    engine_call_termination_identifier integer,
    engine_call_action_viewpoint_notification_acknowledgment_identi integer,
    engine_call_action_viewpoint_notification_termination_identifie integer,
    engine_call_action_viewpoint_status_acknowledgment_identifier integer,
    engine_call_action_viewpoint_status_termination_identifier integer,
    engine_call_action_message_acknowledgment_identifier integer,
    engine_call_action_message_rejection_identifier integer,
    engine_call_action_message_termination_identifier integer,
    engine_call_action_message_destination_employee_identifier integer,
    engine_call_action_message_destination_dect_identifier integer,
    engine_call_action_message_destination_email_identifier integer,
    engine_call_action_message_destination_spectralink_identifier integer
);


ALTER TABLE public.engine_action OWNER TO aperi;

--
-- Name: engine_call; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call (
    identifier integer NOT NULL,
    xtag text NOT NULL,
    timestamp_requested timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    timestamp_expired timestamp with time zone NOT NULL,
    timestamp_executed timestamp with time zone
);


ALTER TABLE public.engine_call OWNER TO aperi;

--
-- Name: engine_call_action; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action (
    identifier integer NOT NULL,
    timestamp_requested timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    timestamp_executed timestamp with time zone,
    timestamp_processed timestamp with time zone,
    engine_call_action_viewpoint_notification_identifier integer,
    engine_call_action_viewpoint_status_identifier integer,
    engine_call_action_message_identifier integer,
    engine_call_identifier integer NOT NULL
);


ALTER TABLE public.engine_call_action OWNER TO aperi;

--
-- Name: engine_call_action_message; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action_message (
    identifier integer NOT NULL,
    text text NOT NULL
);


ALTER TABLE public.engine_call_action_message OWNER TO aperi;

--
-- Name: engine_call_action_message_app; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action_message_app (
    identifier integer NOT NULL,
    type integer NOT NULL
);


ALTER TABLE public.engine_call_action_message_app OWNER TO aperi;

--
-- Name: engine_call_action_message_dect; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action_message_dect (
    identifier integer NOT NULL,
    type integer NOT NULL,
    priority integer NOT NULL,
    beep integer NOT NULL
);


ALTER TABLE public.engine_call_action_message_dect OWNER TO aperi;

--
-- Name: engine_call_action_message_destination_dect; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action_message_destination_dect (
    identifier integer NOT NULL,
    dect_group text,
    engine_call_action_message_identifier integer NOT NULL,
    location_identifier integer,
    dect_account_identifier integer,
    settings_identifier integer
);


ALTER TABLE public.engine_call_action_message_destination_dect OWNER TO aperi;

--
-- Name: engine_call_action_message_destination_email; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action_message_destination_email (
    identifier integer NOT NULL,
    crew_identifier integer,
    employee_identifier integer,
    patient_identifier integer,
    location_identifier integer,
    engine_call_action_message_identifier integer NOT NULL,
    active boolean DEFAULT true NOT NULL,
    settings_identifier integer
);


ALTER TABLE public.engine_call_action_message_destination_email OWNER TO aperi;

--
-- Name: engine_call_action_message_destination_employee; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action_message_destination_employee (
    identifier integer NOT NULL,
    engine_call_action_message_identifier integer NOT NULL,
    employee_identifier integer,
    location_identifier integer,
    crew_identifier integer,
    active boolean DEFAULT true NOT NULL,
    settings_email_identifier integer,
    settings_app_identifier integer,
    settings_dect_identifier integer,
    settings_spectralink_identifier integer
);


ALTER TABLE public.engine_call_action_message_destination_employee OWNER TO aperi;

--
-- Name: engine_call_action_message_destination_employee_role; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action_message_destination_employee_role (
    engine_call_action_message_destination_employee_identifier integer NOT NULL,
    role_identifier integer NOT NULL
);


ALTER TABLE public.engine_call_action_message_destination_employee_role OWNER TO aperi;

--
-- Name: engine_call_action_message_destination_spectralink; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action_message_destination_spectralink (
    identifier integer NOT NULL,
    spectralink_group text,
    engine_call_action_message_identifier integer NOT NULL,
    location_identifier integer,
    spectralink_account_identifier integer,
    settings_identifier integer
);


ALTER TABLE public.engine_call_action_message_destination_spectralink OWNER TO aperi;

--
-- Name: engine_call_action_message_email; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action_message_email (
    identifier integer NOT NULL,
    title text NOT NULL
);


ALTER TABLE public.engine_call_action_message_email OWNER TO aperi;

--
-- Name: engine_call_action_message_spectralink; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action_message_spectralink (
    identifier integer NOT NULL,
    action text,
    response text,
    repeat text,
    led text,
    icon text,
    color text,
    setup text,
    alerttone text,
    alertpattern text,
    alertvolume text,
    alerttimeout text,
    displaytimeout text,
    callback text
);


ALTER TABLE public.engine_call_action_message_spectralink OWNER TO aperi;

--
-- Name: engine_call_action_viewpoint_notification; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action_viewpoint_notification (
    identifier integer NOT NULL,
    text text NOT NULL,
    location_identifier integer NOT NULL,
    status_identifier integer NOT NULL,
    notification_identifier integer
);


ALTER TABLE public.engine_call_action_viewpoint_notification OWNER TO aperi;

--
-- Name: engine_call_action_viewpoint_status; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_call_action_viewpoint_status (
    identifier integer NOT NULL,
    cause_identifier integer,
    location_identifier integer NOT NULL,
    status_identifier integer NOT NULL
);


ALTER TABLE public.engine_call_action_viewpoint_status OWNER TO aperi;

--
-- Name: engine_device_configuration_profile; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_device_configuration_profile (
    identifier integer NOT NULL,
    name text NOT NULL,
    crc integer NOT NULL,
    configuration text NOT NULL
);


ALTER TABLE public.engine_device_configuration_profile OWNER TO aperi;

--
-- Name: engine_event; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_event (
    identifier integer NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    badge_provided_identifier integer,
    badge_provisioned_identifier integer,
    rf_module_provided_identifier integer,
    access_entered_identifier integer,
    access_left_identifier integer,
    access_denied_identifier integer,
    viewpoint_state_changed_identifier integer
);


ALTER TABLE public.engine_event OWNER TO aperi;

--
-- Name: engine_event_access_denied; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_event_access_denied (
    identifier integer NOT NULL,
    session_identifier integer
);


ALTER TABLE public.engine_event_access_denied OWNER TO aperi;

--
-- Name: engine_event_access_entered; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_event_access_entered (
    identifier integer NOT NULL,
    session_identifier integer NOT NULL
);


ALTER TABLE public.engine_event_access_entered OWNER TO aperi;

--
-- Name: engine_event_access_left; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_event_access_left (
    identifier integer NOT NULL,
    session_identifier integer NOT NULL
);


ALTER TABLE public.engine_event_access_left OWNER TO aperi;

--
-- Name: engine_event_badge_provided; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_event_badge_provided (
    identifier integer NOT NULL,
    device_identifier integer NOT NULL,
    badge_identifier integer NOT NULL
);


ALTER TABLE public.engine_event_badge_provided OWNER TO aperi;

--
-- Name: engine_event_badge_provisioned; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_event_badge_provisioned (
    identifier integer NOT NULL,
    employee_identifier integer NOT NULL,
    patient_identifier integer NOT NULL,
    badge_identifier integer NOT NULL
);


ALTER TABLE public.engine_event_badge_provisioned OWNER TO aperi;

--
-- Name: engine_event_rf_module_provided; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_event_rf_module_provided (
    identifier integer NOT NULL,
    device_identifier integer NOT NULL,
    rf_module_identifier integer NOT NULL
);


ALTER TABLE public.engine_event_rf_module_provided OWNER TO aperi;

--
-- Name: engine_event_viewpoint_state_changed; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_event_viewpoint_state_changed (
    identifier integer NOT NULL,
    location_identifier integer NOT NULL
);


ALTER TABLE public.engine_event_viewpoint_state_changed OWNER TO aperi;

--
-- Name: engine_server_configuration_profile; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.engine_server_configuration_profile (
    identifier integer NOT NULL,
    name text NOT NULL,
    configuration text NOT NULL,
    active boolean DEFAULT false NOT NULL
);


ALTER TABLE public.engine_server_configuration_profile OWNER TO aperi;

--
-- Name: espa_in_message; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.espa_in_message (
    identifier integer NOT NULL,
    timestamp_requested timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    timestamp_executed timestamp with time zone,
    message text NOT NULL,
    beep integer NOT NULL,
    address text NOT NULL,
    call_type integer NOT NULL,
    priority integer NOT NULL,
    com_port_identifier integer NOT NULL
);


ALTER TABLE public.espa_in_message OWNER TO aperi;

--
-- Name: fcm_account; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.fcm_account (
    identifier integer NOT NULL,
    code text NOT NULL,
    timestamp_created timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    timestamp_verified timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.fcm_account OWNER TO aperi;

--
-- Name: flyway_schema_history; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.flyway_schema_history (
    installed_rank integer NOT NULL,
    version character varying(50),
    description character varying(200) NOT NULL,
    type character varying(20) NOT NULL,
    script character varying(1000) NOT NULL,
    checksum integer,
    installed_by character varying(100) NOT NULL,
    installed_on timestamp without time zone DEFAULT now() NOT NULL,
    execution_time integer NOT NULL,
    success boolean NOT NULL
);


ALTER TABLE public.flyway_schema_history OWNER TO aperi;

--
-- Name: general_practitioner; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.general_practitioner (
    identifier integer NOT NULL,
    rziv text NOT NULL,
    active boolean DEFAULT false NOT NULL,
    administration_contact_identifier integer NOT NULL
);


ALTER TABLE public.general_practitioner OWNER TO aperi;

--
-- Name: gps_signal; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.gps_signal (
    identifier integer NOT NULL,
    longitude numeric NOT NULL,
    latitude numeric NOT NULL,
    description text NOT NULL,
    created timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    trusted_device_identifier integer,
    remote_alarm_identifier integer,
    address_identifier integer
);


ALTER TABLE public.gps_signal OWNER TO aperi;

--
-- Name: heartbeat; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.heartbeat (
    identifier integer NOT NULL,
    mac_address text,
    last_ip_address text,
    utc_timestamp_lastseen timestamp with time zone NOT NULL,
    utc_timestamp_lastboot timestamp with time zone,
    type public.heartbeat_type NOT NULL,
    tag text
);


ALTER TABLE public.heartbeat OWNER TO aperi;

--
-- Name: heartbeat_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.heartbeat_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.heartbeat_identifier_seq OWNER TO aperi;

--
-- Name: heartbeat_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.heartbeat_identifier_seq OWNED BY public.heartbeat.identifier;


--
-- Name: hulp_call; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.hulp_call (
    identifier integer NOT NULL,
    name text NOT NULL,
    priority integer NOT NULL,
    patient_identifier integer NOT NULL,
    webrtc_account_identifier integer NOT NULL
);


ALTER TABLE public.hulp_call OWNER TO aperi;

--
-- Name: image; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.image (
    identifier integer NOT NULL,
    code text NOT NULL,
    url text NOT NULL,
    type text NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.image OWNER TO aperi;

--
-- Name: lifeline_message; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.lifeline_message (
    identifier integer NOT NULL
);


ALTER TABLE public.lifeline_message OWNER TO aperi;

--
-- Name: lifeline_message_answer; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.lifeline_message_answer (
    identifier integer NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    lifeline_message_identifier integer NOT NULL,
    patient_identifier integer NOT NULL,
    lifeline_message_button_identifier integer
);


ALTER TABLE public.lifeline_message_answer OWNER TO aperi;

--
-- Name: lifeline_message_button; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.lifeline_message_button (
    identifier integer NOT NULL,
    text text NOT NULL,
    color text NOT NULL,
    lifeline_message_identifier integer NOT NULL
);


ALTER TABLE public.lifeline_message_button OWNER TO aperi;

--
-- Name: locality; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.locality (
    identifier integer NOT NULL,
    rssi integer NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    rf_module_identifier integer NOT NULL,
    device_identifier integer NOT NULL
);


ALTER TABLE public.locality OWNER TO aperi;

--
-- Name: location; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.location (
    identifier integer NOT NULL,
    name text NOT NULL,
    manual_ack_possible boolean DEFAULT false NOT NULL,
    timezone text DEFAULT 'UTC'::text NOT NULL,
    department_identifier integer,
    care_identifier integer NOT NULL,
    serial integer NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.location OWNER TO aperi;

--
-- Name: location_call; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.location_call (
    identifier integer NOT NULL,
    location_identifier integer NOT NULL,
    started timestamp with time zone NOT NULL,
    ended timestamp with time zone,
    current_status_identifier integer,
    call_reason_category_identifier integer,
    call_reason_comments text,
    call_reason_employee_identifier integer,
    CONSTRAINT call_reason CHECK ((((call_reason_category_identifier IS NOT NULL) AND (call_reason_employee_identifier IS NOT NULL)) OR (call_reason_category_identifier IS NULL))),
    CONSTRAINT ended_or_current_status CHECK ((((ended IS NOT NULL) AND (current_status_identifier IS NULL)) OR ((ended IS NULL) AND (current_status_identifier IS NOT NULL))))
);


ALTER TABLE public.location_call OWNER TO aperi;

--
-- Name: location_call_callback; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.location_call_callback (
    identifier integer NOT NULL,
    location_call_identifier integer NOT NULL,
    url text NOT NULL,
    headers jsonb,
    on_create boolean NOT NULL,
    on_update boolean NOT NULL,
    on_close boolean NOT NULL
);


ALTER TABLE public.location_call_callback OWNER TO aperi;

--
-- Name: location_call_callback_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.location_call_callback_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.location_call_callback_identifier_seq OWNER TO aperi;

--
-- Name: location_call_callback_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.location_call_callback_identifier_seq OWNED BY public.location_call_callback.identifier;


--
-- Name: location_call_employee_presence; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.location_call_employee_presence (
    identifier integer NOT NULL,
    location_call_identifier integer NOT NULL,
    employee_identifier integer NOT NULL,
    timestamp_enter timestamp with time zone NOT NULL,
    timestamp_leave timestamp with time zone
);


ALTER TABLE public.location_call_employee_presence OWNER TO aperi;

--
-- Name: location_call_employee_presence_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.location_call_employee_presence_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.location_call_employee_presence_identifier_seq OWNER TO aperi;

--
-- Name: location_call_employee_presence_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.location_call_employee_presence_identifier_seq OWNED BY public.location_call_employee_presence.identifier;


--
-- Name: location_call_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.location_call_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.location_call_identifier_seq OWNER TO aperi;

--
-- Name: location_call_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.location_call_identifier_seq OWNED BY public.location_call.identifier;


--
-- Name: location_call_patient_in_location; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.location_call_patient_in_location (
    identifier integer NOT NULL,
    location_call_identifier integer NOT NULL,
    patient_identifier integer NOT NULL
);


ALTER TABLE public.location_call_patient_in_location OWNER TO aperi;

--
-- Name: location_call_patient_in_location_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.location_call_patient_in_location_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.location_call_patient_in_location_identifier_seq OWNER TO aperi;

--
-- Name: location_call_patient_in_location_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.location_call_patient_in_location_identifier_seq OWNED BY public.location_call_patient_in_location.identifier;


--
-- Name: location_call_state_change; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.location_call_state_change (
    identifier integer NOT NULL,
    location_call_identifier integer NOT NULL,
    status_identifier integer NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    source public.call_source
);


ALTER TABLE public.location_call_state_change OWNER TO aperi;

--
-- Name: location_call_state_change_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.location_call_state_change_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.location_call_state_change_identifier_seq OWNER TO aperi;

--
-- Name: location_call_state_change_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.location_call_state_change_identifier_seq OWNED BY public.location_call_state_change.identifier;


--
-- Name: location_gateway_device_gateway; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.location_gateway_device_gateway (
    location_identifier integer NOT NULL,
    device_identifier integer NOT NULL
);


ALTER TABLE public.location_gateway_device_gateway OWNER TO aperi;

--
-- Name: location_patient; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.location_patient (
    location_identifier integer NOT NULL,
    patient_identifier integer NOT NULL
);


ALTER TABLE public.location_patient OWNER TO aperi;

--
-- Name: log; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.log (
    identifier integer NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    category text NOT NULL,
    type text NOT NULL,
    parameters text NOT NULL,
    site_identifier integer
);


ALTER TABLE public.log OWNER TO aperi;

--
-- Name: log_care; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.log_care (
    identifier bigint NOT NULL,
    location_identifier integer NOT NULL,
    employee_identifier integer NOT NULL,
    period tstzrange NOT NULL
);


ALTER TABLE public.log_care OWNER TO aperi;

--
-- Name: log_care_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.log_care_identifier_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.log_care_identifier_seq OWNER TO aperi;

--
-- Name: log_care_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.log_care_identifier_seq OWNED BY public.log_care.identifier;


--
-- Name: log_door; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.log_door (
    identifier integer NOT NULL,
    access_door_identifier integer NOT NULL,
    employee_identifier integer,
    patient_identifier integer,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.log_door OWNER TO aperi;

--
-- Name: log_door_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.log_door_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.log_door_identifier_seq OWNER TO aperi;

--
-- Name: log_door_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.log_door_identifier_seq OWNED BY public.log_door.identifier;


--
-- Name: log_duty; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.log_duty (
    identifier bigint NOT NULL,
    crew_identifier integer NOT NULL,
    employee_identifier integer NOT NULL,
    role_identifier integer NOT NULL,
    period tstzrange NOT NULL
);


ALTER TABLE public.log_duty OWNER TO aperi;

--
-- Name: log_duty_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.log_duty_identifier_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.log_duty_identifier_seq OWNER TO aperi;

--
-- Name: log_duty_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.log_duty_identifier_seq OWNED BY public.log_duty.identifier;


--
-- Name: log_employee_dect_account; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.log_employee_dect_account (
    identifier bigint NOT NULL,
    employee_identifier integer NOT NULL,
    dect_account_identifier integer NOT NULL,
    period tstzrange NOT NULL
);


ALTER TABLE public.log_employee_dect_account OWNER TO aperi;

--
-- Name: log_employee_dect_account_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.log_employee_dect_account_identifier_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.log_employee_dect_account_identifier_seq OWNER TO aperi;

--
-- Name: log_employee_dect_account_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.log_employee_dect_account_identifier_seq OWNED BY public.log_employee_dect_account.identifier;


--
-- Name: log_employee_spectralink_account; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.log_employee_spectralink_account (
    identifier bigint NOT NULL,
    employee_identifier integer NOT NULL,
    spectralink_account_identifier integer NOT NULL,
    period tstzrange NOT NULL
);


ALTER TABLE public.log_employee_spectralink_account OWNER TO aperi;

--
-- Name: log_employee_spectralink_account_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.log_employee_spectralink_account_identifier_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.log_employee_spectralink_account_identifier_seq OWNER TO aperi;

--
-- Name: log_employee_spectralink_account_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.log_employee_spectralink_account_identifier_seq OWNED BY public.log_employee_spectralink_account.identifier;


--
-- Name: log_engine_context_device; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.log_engine_context_device (
    identifier integer NOT NULL,
    tag text NOT NULL,
    state text NOT NULL,
    parameters jsonb NOT NULL,
    entered_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    device_identifier integer NOT NULL
);


ALTER TABLE public.log_engine_context_device OWNER TO aperi;

--
-- Name: log_engine_context_location; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.log_engine_context_location (
    identifier integer NOT NULL,
    tag text NOT NULL,
    state text NOT NULL,
    parameters jsonb NOT NULL,
    entered_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    location_identifier integer NOT NULL
);


ALTER TABLE public.log_engine_context_location OWNER TO aperi;

--
-- Name: log_engine_context_patient; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.log_engine_context_patient (
    identifier integer NOT NULL,
    tag text NOT NULL,
    state text NOT NULL,
    parameters jsonb NOT NULL,
    entered_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    patient_identifier integer NOT NULL
);


ALTER TABLE public.log_engine_context_patient OWNER TO aperi;

--
-- Name: log_location_patient; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.log_location_patient (
    identifier bigint NOT NULL,
    location_identifier integer NOT NULL,
    patient_identifier integer NOT NULL,
    period tstzrange NOT NULL
);


ALTER TABLE public.log_location_patient OWNER TO aperi;

--
-- Name: log_location_patient_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.log_location_patient_identifier_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.log_location_patient_identifier_seq OWNER TO aperi;

--
-- Name: log_location_patient_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.log_location_patient_identifier_seq OWNED BY public.log_location_patient.identifier;


--
-- Name: log_patient_cas_mode; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.log_patient_cas_mode (
    identifier bigint NOT NULL,
    patient_identifier integer NOT NULL,
    period tstzrange NOT NULL
);


ALTER TABLE public.log_patient_cas_mode OWNER TO aperi;

--
-- Name: log_patient_cas_mode_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.log_patient_cas_mode_identifier_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.log_patient_cas_mode_identifier_seq OWNER TO aperi;

--
-- Name: log_patient_cas_mode_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.log_patient_cas_mode_identifier_seq OWNED BY public.log_patient_cas_mode.identifier;


--
-- Name: log_status; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.log_status (
    identifier bigint NOT NULL,
    location_identifier integer NOT NULL,
    status_identifier integer NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.log_status OWNER TO aperi;

--
-- Name: log_status_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.log_status_identifier_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.log_status_identifier_seq OWNER TO aperi;

--
-- Name: log_status_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.log_status_identifier_seq OWNED BY public.log_status.identifier;


--
-- Name: management_account; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.management_account (
    identifier integer NOT NULL,
    email text NOT NULL,
    flag integer NOT NULL
);


ALTER TABLE public.management_account OWNER TO aperi;

--
-- Name: management_account_management_site; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.management_account_management_site (
    management_account_identifier integer NOT NULL,
    management_site_identifier integer NOT NULL
);


ALTER TABLE public.management_account_management_site OWNER TO aperi;

--
-- Name: management_department; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.management_department (
    identifier integer NOT NULL,
    name text NOT NULL,
    description text NOT NULL,
    site_identifier integer NOT NULL
);


ALTER TABLE public.management_department OWNER TO aperi;

--
-- Name: management_device; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.management_device (
    identifier integer NOT NULL,
    name text NOT NULL,
    serial integer NOT NULL,
    end_of_line_a boolean NOT NULL,
    end_of_line_b boolean NOT NULL,
    description text NOT NULL,
    type text NOT NULL,
    server_identifier integer NOT NULL,
    room_identifier integer NOT NULL
);


ALTER TABLE public.management_device OWNER TO aperi;

--
-- Name: management_device_update; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.management_device_update (
    identifier integer NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    end_of_line_a boolean NOT NULL,
    end_of_line_b boolean NOT NULL,
    serial integer NOT NULL,
    account_identifier integer NOT NULL,
    server_identifier integer NOT NULL,
    site_identifier integer NOT NULL,
    device_identifier integer NOT NULL
);


ALTER TABLE public.management_device_update OWNER TO aperi;

--
-- Name: management_room; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.management_room (
    identifier integer NOT NULL,
    name text NOT NULL,
    description text NOT NULL,
    department_identifier integer NOT NULL
);


ALTER TABLE public.management_room OWNER TO aperi;

--
-- Name: management_server; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.management_server (
    identifier integer NOT NULL,
    server_name text NOT NULL,
    server_code text NOT NULL,
    server_device_address text NOT NULL,
    server_public_address text NOT NULL,
    server_private_address text NOT NULL,
    endpoint_websocket text NOT NULL,
    endpoint_engine text NOT NULL,
    endpoint_api text NOT NULL,
    description text NOT NULL
);


ALTER TABLE public.management_server OWNER TO aperi;

--
-- Name: management_site; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.management_site (
    identifier integer NOT NULL,
    name text NOT NULL,
    description text NOT NULL
);


ALTER TABLE public.management_site OWNER TO aperi;

--
-- Name: management_site_management_server; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.management_site_management_server (
    management_site_identifier integer NOT NULL,
    management_server_identifier integer NOT NULL
);


ALTER TABLE public.management_site_management_server OWNER TO aperi;

--
-- Name: measurement_bloodpressure; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_bloodpressure (
    identifier integer NOT NULL,
    upper real NOT NULL,
    lower real NOT NULL,
    measurement_signature_identifier integer NOT NULL,
    context_value public.bloodpressure_context_value
);


ALTER TABLE public.measurement_bloodpressure OWNER TO aperi;

--
-- Name: measurement_bloodsample; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_bloodsample (
    identifier integer NOT NULL,
    value real NOT NULL,
    measurement_signature_identifier integer NOT NULL,
    kind public.bloodsample_kind
);


ALTER TABLE public.measurement_bloodsample OWNER TO aperi;

--
-- Name: measurement_glycemia; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_glycemia (
    identifier integer NOT NULL,
    value real NOT NULL,
    measurement_signature_identifier integer NOT NULL,
    context_value public.glycemia_context_value
);


ALTER TABLE public.measurement_glycemia OWNER TO aperi;

--
-- Name: measurement_length; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_length (
    identifier integer NOT NULL,
    value real NOT NULL,
    measurement_signature_identifier integer NOT NULL
);


ALTER TABLE public.measurement_length OWNER TO aperi;

--
-- Name: measurement_morsefallscale; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_morsefallscale (
    identifier integer NOT NULL,
    measurement_signature_identifier integer NOT NULL,
    history_of_falling boolean NOT NULL,
    secondary_diagnosis boolean NOT NULL,
    ambulatory_aid public.morsefallscale_ambulatoryaid_answer NOT NULL,
    iv_heparin_lock boolean NOT NULL,
    gait public.morsefallscale_gait_answer NOT NULL,
    mental_status public.morsefallscale_mentalstatus_answer NOT NULL
);


ALTER TABLE public.measurement_morsefallscale OWNER TO aperi;

--
-- Name: measurement_oxygensaturation; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_oxygensaturation (
    identifier integer NOT NULL,
    value real NOT NULL,
    measurement_signature_identifier integer NOT NULL
);


ALTER TABLE public.measurement_oxygensaturation OWNER TO aperi;

--
-- Name: measurement_pulse; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_pulse (
    identifier integer NOT NULL,
    value real NOT NULL,
    measurement_signature_identifier integer NOT NULL,
    context_value public.pulse_context_value
);


ALTER TABLE public.measurement_pulse OWNER TO aperi;

--
-- Name: measurement_stoolrecord; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_stoolrecord (
    identifier integer NOT NULL,
    value real NOT NULL,
    measurement_signature_identifier integer NOT NULL,
    context_value public.stoolrecord_context_value
);


ALTER TABLE public.measurement_stoolrecord OWNER TO aperi;

--
-- Name: measurement_temperature; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_temperature (
    identifier integer NOT NULL,
    value real NOT NULL,
    measurement_signature_identifier integer NOT NULL
);


ALTER TABLE public.measurement_temperature OWNER TO aperi;

--
-- Name: measurement_urineoutput; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_urineoutput (
    identifier integer NOT NULL,
    value real NOT NULL,
    measurement_signature_identifier integer NOT NULL,
    context_value public.urineoutput_context_value
);


ALTER TABLE public.measurement_urineoutput OWNER TO aperi;

--
-- Name: measurement_visualpainscale; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_visualpainscale (
    identifier integer NOT NULL,
    value integer NOT NULL,
    measurement_signature_identifier integer NOT NULL
);


ALTER TABLE public.measurement_visualpainscale OWNER TO aperi;

--
-- Name: measurement_waterlowscale; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_waterlowscale (
    identifier integer NOT NULL,
    measurement_signature_identifier integer NOT NULL,
    build_height public.waterlowscale_build_height_answer NOT NULL,
    skintype public.waterlowscale_skintype_answer[] NOT NULL,
    gender public.waterlowscale_gender_answer NOT NULL,
    agerange public.waterlowscale_agerange_answer NOT NULL,
    specialrisks public.waterlowscale_specialrisks_answer[] NOT NULL,
    continence public.waterlowscale_continence_answer[] NOT NULL,
    mobility public.waterlowscale_mobility_answer[] NOT NULL,
    apetite public.waterlowscale_apetite_answer NOT NULL,
    neurological_disorders public.waterlowscale_neurological_disorders_answer[] NOT NULL,
    extensive_surgery public.waterlowscale_extensive_surgery_answer[] NOT NULL,
    medications public.waterlowscale_medications_answer[] NOT NULL
);


ALTER TABLE public.measurement_waterlowscale OWNER TO aperi;

--
-- Name: measurement_weight; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_weight (
    identifier integer NOT NULL,
    value real NOT NULL,
    measurement_signature_identifier integer NOT NULL
);


ALTER TABLE public.measurement_weight OWNER TO aperi;

--
-- Name: measurement; Type: VIEW; Schema: public; Owner: aperi
--

CREATE VIEW public.measurement AS
 SELECT 'temperature'::public.measurement_type AS type,
    measurement_temperature.identifier,
    (json_build_object('type', 'temperature', 'value', measurement_temperature.value))::jsonb AS value,
    measurement_temperature.measurement_signature_identifier
   FROM public.measurement_temperature
UNION
 SELECT 'weight'::public.measurement_type AS type,
    measurement_weight.identifier,
    (json_build_object('type', 'weight', 'value', measurement_weight.value))::jsonb AS value,
    measurement_weight.measurement_signature_identifier
   FROM public.measurement_weight
UNION
 SELECT 'length'::public.measurement_type AS type,
    measurement_length.identifier,
    (json_build_object('type', 'length', 'value', measurement_length.value))::jsonb AS value,
    measurement_length.measurement_signature_identifier
   FROM public.measurement_length
UNION
 SELECT 'oxygensaturation'::public.measurement_type AS type,
    measurement_oxygensaturation.identifier,
    (json_build_object('type', 'oxygensaturation', 'value', measurement_oxygensaturation.value))::jsonb AS value,
    measurement_oxygensaturation.measurement_signature_identifier
   FROM public.measurement_oxygensaturation
UNION
 SELECT 'visualpainscale'::public.measurement_type AS type,
    measurement_visualpainscale.identifier,
    (json_build_object('type', 'visualpainscale', 'value', measurement_visualpainscale.value))::jsonb AS value,
    measurement_visualpainscale.measurement_signature_identifier
   FROM public.measurement_visualpainscale
UNION
 SELECT 'pulse'::public.measurement_type AS type,
    measurement_pulse.identifier,
    (json_build_object('type', 'pulse', 'value', measurement_pulse.value, 'context', measurement_pulse.context_value))::jsonb AS value,
    measurement_pulse.measurement_signature_identifier
   FROM public.measurement_pulse
UNION
 SELECT 'urineoutput'::public.measurement_type AS type,
    measurement_urineoutput.identifier,
    (json_build_object('type', 'urineoutput', 'value', measurement_urineoutput.value, 'context', measurement_urineoutput.context_value))::jsonb AS value,
    measurement_urineoutput.measurement_signature_identifier
   FROM public.measurement_urineoutput
UNION
 SELECT 'bloodpressure'::public.measurement_type AS type,
    measurement_bloodpressure.identifier,
    (json_build_object('type', 'bloodpressure', 'upper', measurement_bloodpressure.upper, 'lower', measurement_bloodpressure.lower, 'context', measurement_bloodpressure.context_value))::jsonb AS value,
    measurement_bloodpressure.measurement_signature_identifier
   FROM public.measurement_bloodpressure
UNION
 SELECT 'stoolrecord'::public.measurement_type AS type,
    measurement_stoolrecord.identifier,
    (json_build_object('type', 'stoolrecord', 'value', measurement_stoolrecord.value, 'context', measurement_stoolrecord.context_value))::jsonb AS value,
    measurement_stoolrecord.measurement_signature_identifier
   FROM public.measurement_stoolrecord
UNION
 SELECT 'glycemia'::public.measurement_type AS type,
    measurement_glycemia.identifier,
    (json_build_object('type', 'glycemia', 'value', measurement_glycemia.value, 'context', measurement_glycemia.context_value))::jsonb AS value,
    measurement_glycemia.measurement_signature_identifier
   FROM public.measurement_glycemia
UNION
 SELECT 'bloodsample'::public.measurement_type AS type,
    measurement_bloodsample.identifier,
    (json_build_object('type', 'bloodsample', 'value', measurement_bloodsample.value, 'kind', measurement_bloodsample.kind))::jsonb AS value,
    measurement_bloodsample.measurement_signature_identifier
   FROM public.measurement_bloodsample
UNION
 SELECT 'morsefallscale'::public.measurement_type AS type,
    measurement_morsefallscale.identifier,
    (json_build_object('type', 'morsefallscale', 'historyOfFalling', measurement_morsefallscale.history_of_falling, 'secondaryDiagnosis', measurement_morsefallscale.secondary_diagnosis, 'ambulatoryAid', measurement_morsefallscale.ambulatory_aid, 'ivHeparinLock', measurement_morsefallscale.iv_heparin_lock, 'gait', measurement_morsefallscale.gait, 'mentalStatus', measurement_morsefallscale.mental_status))::jsonb AS value,
    measurement_morsefallscale.measurement_signature_identifier
   FROM public.measurement_morsefallscale
UNION
 SELECT 'waterlowscale'::public.measurement_type AS type,
    measurement_waterlowscale.identifier,
    (json_build_object('type', 'waterlowscale', 'build_height', measurement_waterlowscale.build_height, 'skintype', measurement_waterlowscale.skintype, 'gender', measurement_waterlowscale.gender, 'agerange', measurement_waterlowscale.agerange, 'specialrisks', measurement_waterlowscale.specialrisks, 'continence', measurement_waterlowscale.continence, 'mobility', measurement_waterlowscale.mobility, 'apetite', measurement_waterlowscale.apetite, 'neurologicalDisorders', measurement_waterlowscale.neurological_disorders, 'extensiveSurgery', measurement_waterlowscale.extensive_surgery, 'medications', measurement_waterlowscale.medications))::jsonb AS value,
    measurement_waterlowscale.measurement_signature_identifier
   FROM public.measurement_waterlowscale;


ALTER TABLE public.measurement OWNER TO aperi;

--
-- Name: measurement_bloodpressure_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_bloodpressure_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_bloodpressure_identifier_seq OWNER TO aperi;

--
-- Name: measurement_bloodpressure_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_bloodpressure_identifier_seq OWNED BY public.measurement_bloodpressure.identifier;


--
-- Name: measurement_bloodsample_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_bloodsample_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_bloodsample_identifier_seq OWNER TO aperi;

--
-- Name: measurement_bloodsample_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_bloodsample_identifier_seq OWNED BY public.measurement_bloodsample.identifier;


--
-- Name: measurement_glycemia_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_glycemia_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_glycemia_identifier_seq OWNER TO aperi;

--
-- Name: measurement_glycemia_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_glycemia_identifier_seq OWNED BY public.measurement_glycemia.identifier;


--
-- Name: measurement_length_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_length_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_length_identifier_seq OWNER TO aperi;

--
-- Name: measurement_length_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_length_identifier_seq OWNED BY public.measurement_length.identifier;


--
-- Name: measurement_morsefallscale_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_morsefallscale_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_morsefallscale_identifier_seq OWNER TO aperi;

--
-- Name: measurement_morsefallscale_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_morsefallscale_identifier_seq OWNED BY public.measurement_morsefallscale.identifier;


--
-- Name: measurement_oxygensaturation_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_oxygensaturation_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_oxygensaturation_identifier_seq OWNER TO aperi;

--
-- Name: measurement_oxygensaturation_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_oxygensaturation_identifier_seq OWNED BY public.measurement_oxygensaturation.identifier;


--
-- Name: measurement_pulse_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_pulse_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_pulse_identifier_seq OWNER TO aperi;

--
-- Name: measurement_pulse_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_pulse_identifier_seq OWNED BY public.measurement_pulse.identifier;


--
-- Name: measurement_signature; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.measurement_signature (
    identifier integer NOT NULL,
    measurement_type public.measurement_type NOT NULL,
    patient_identifier integer NOT NULL,
    employee_identifier integer NOT NULL,
    planned_measurement_identifier integer,
    utc_timestamp timestamp with time zone NOT NULL,
    reason_notdone text,
    done boolean NOT NULL,
    synced_on timestamp with time zone,
    CONSTRAINT measurement_signature_check CHECK (((planned_measurement_identifier IS NOT NULL) OR ((planned_measurement_identifier IS NULL) AND (done = true))))
);


ALTER TABLE public.measurement_signature OWNER TO aperi;

--
-- Name: measurement_signature_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_signature_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_signature_identifier_seq OWNER TO aperi;

--
-- Name: measurement_signature_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_signature_identifier_seq OWNED BY public.measurement_signature.identifier;


--
-- Name: measurement_stoolrecord_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_stoolrecord_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_stoolrecord_identifier_seq OWNER TO aperi;

--
-- Name: measurement_stoolrecord_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_stoolrecord_identifier_seq OWNED BY public.measurement_stoolrecord.identifier;


--
-- Name: measurement_temperature_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_temperature_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_temperature_identifier_seq OWNER TO aperi;

--
-- Name: measurement_temperature_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_temperature_identifier_seq OWNED BY public.measurement_temperature.identifier;


--
-- Name: measurement_urineoutput_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_urineoutput_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_urineoutput_identifier_seq OWNER TO aperi;

--
-- Name: measurement_urineoutput_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_urineoutput_identifier_seq OWNED BY public.measurement_urineoutput.identifier;


--
-- Name: measurement_visualpainscale_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_visualpainscale_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_visualpainscale_identifier_seq OWNER TO aperi;

--
-- Name: measurement_visualpainscale_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_visualpainscale_identifier_seq OWNED BY public.measurement_visualpainscale.identifier;


--
-- Name: measurement_waterlowscale_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_waterlowscale_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_waterlowscale_identifier_seq OWNER TO aperi;

--
-- Name: measurement_waterlowscale_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_waterlowscale_identifier_seq OWNED BY public.measurement_waterlowscale.identifier;


--
-- Name: measurement_weight_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.measurement_weight_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.measurement_weight_identifier_seq OWNER TO aperi;

--
-- Name: measurement_weight_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.measurement_weight_identifier_seq OWNED BY public.measurement_weight.identifier;


--
-- Name: medication; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.medication (
    identifier integer NOT NULL,
    code text NOT NULL,
    name text NOT NULL,
    description text NOT NULL,
    medication_form_identifier integer NOT NULL
);


ALTER TABLE public.medication OWNER TO aperi;

--
-- Name: medication_form; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.medication_form (
    identifier integer NOT NULL,
    name text NOT NULL
);


ALTER TABLE public.medication_form OWNER TO aperi;

--
-- Name: medication_signature; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.medication_signature (
    identifier integer NOT NULL,
    utc_timestamp timestamp with time zone NOT NULL,
    employee_identifier integer NOT NULL,
    planned_medication_identifier integer NOT NULL,
    done boolean NOT NULL,
    reason_notdone text,
    phase public.medication_phase NOT NULL,
    patient_identifier integer NOT NULL,
    synced_on timestamp with time zone
);


ALTER TABLE public.medication_signature OWNER TO aperi;

--
-- Name: medication_signature_detail; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.medication_signature_detail (
    identifier integer NOT NULL,
    medication_signature_identifier integer NOT NULL,
    medication_type_identifier integer NOT NULL,
    dosage real NOT NULL
);


ALTER TABLE public.medication_signature_detail OWNER TO aperi;

--
-- Name: medication_signature_detail_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.medication_signature_detail_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.medication_signature_detail_identifier_seq OWNER TO aperi;

--
-- Name: medication_signature_detail_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.medication_signature_detail_identifier_seq OWNED BY public.medication_signature_detail.identifier;


--
-- Name: medication_signature_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.medication_signature_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.medication_signature_identifier_seq OWNER TO aperi;

--
-- Name: medication_signature_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.medication_signature_identifier_seq OWNED BY public.medication_signature.identifier;


--
-- Name: medication_type; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.medication_type (
    identifier integer NOT NULL,
    "grouping" text,
    name text NOT NULL,
    unit text NOT NULL,
    code text
);


ALTER TABLE public.medication_type OWNER TO aperi;

--
-- Name: medication_type_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.medication_type_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.medication_type_identifier_seq OWNER TO aperi;

--
-- Name: medication_type_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.medication_type_identifier_seq OWNED BY public.medication_type.identifier;


--
-- Name: message; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.message (
    identifier integer NOT NULL,
    type integer NOT NULL,
    message text DEFAULT ''::text NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    from_name text,
    from_patient_identifier integer,
    from_employee_identifier integer,
    about_patient_identifier integer,
    lifeline_message_identifier integer
);


ALTER TABLE public.message OWNER TO aperi;

--
-- Name: message_images; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.message_images (
    message_identifier integer NOT NULL,
    image_identifier integer NOT NULL
);


ALTER TABLE public.message_images OWNER TO aperi;

--
-- Name: message_read_employees; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.message_read_employees (
    message_identifier integer NOT NULL,
    employee_identifier integer NOT NULL
);


ALTER TABLE public.message_read_employees OWNER TO aperi;

--
-- Name: message_read_patients; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.message_read_patients (
    message_identifier integer NOT NULL,
    patient_identifier integer NOT NULL
);


ALTER TABLE public.message_read_patients OWNER TO aperi;

--
-- Name: message_to_patients; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.message_to_patients (
    message_identifier integer NOT NULL,
    patient_identifier integer NOT NULL
);


ALTER TABLE public.message_to_patients OWNER TO aperi;

--
-- Name: message_to_roles; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.message_to_roles (
    message_identifier integer NOT NULL,
    role_identifier integer NOT NULL
);


ALTER TABLE public.message_to_roles OWNER TO aperi;

--
-- Name: mis_connection; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection (
    identifier integer NOT NULL,
    name text NOT NULL,
    type text NOT NULL,
    definition jsonb NOT NULL,
    populated_at timestamp with time zone
);


ALTER TABLE public.mis_connection OWNER TO aperi;

--
-- Name: mis_connection_care_action; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_care_action (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    care_action_identifier integer NOT NULL,
    external_identifier text NOT NULL
);


ALTER TABLE public.mis_connection_care_action OWNER TO aperi;

--
-- Name: mis_connection_care_action_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_care_action_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_care_action_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_care_action_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_care_action_identifier_seq OWNED BY public.mis_connection_care_action.identifier;


--
-- Name: mis_connection_care_action_signature; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_care_action_signature (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    care_action_signature_identifier integer NOT NULL,
    external_identifier text NOT NULL
);


ALTER TABLE public.mis_connection_care_action_signature OWNER TO aperi;

--
-- Name: mis_connection_care_action_signature_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_care_action_signature_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_care_action_signature_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_care_action_signature_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_care_action_signature_identifier_seq OWNED BY public.mis_connection_care_action_signature.identifier;


--
-- Name: mis_connection_department; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_department (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    department_identifier integer NOT NULL,
    identification jsonb NOT NULL,
    data jsonb,
    mis_mode public.mis_mode DEFAULT 'PRESENT'::public.mis_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.mis_connection_department OWNER TO aperi;

--
-- Name: mis_connection_department_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_department_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_department_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_department_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_department_identifier_seq OWNED BY public.mis_connection_department.identifier;


--
-- Name: mis_connection_diary; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_diary (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    diary_identifier integer NOT NULL,
    external_identifier text NOT NULL
);


ALTER TABLE public.mis_connection_diary OWNER TO aperi;

--
-- Name: mis_connection_diary_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_diary_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_diary_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_diary_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_diary_identifier_seq OWNED BY public.mis_connection_diary.identifier;


--
-- Name: mis_connection_employee; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_employee (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    employee_identifier integer NOT NULL,
    identification jsonb NOT NULL,
    data jsonb,
    mis_mode public.mis_mode DEFAULT 'PRESENT'::public.mis_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.mis_connection_employee OWNER TO aperi;

--
-- Name: mis_connection_employee_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_employee_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_employee_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_employee_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_employee_identifier_seq OWNED BY public.mis_connection_employee.identifier;


--
-- Name: mis_connection_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_identifier_seq OWNED BY public.mis_connection.identifier;


--
-- Name: mis_connection_location; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_location (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    location_identifier integer NOT NULL,
    identification jsonb NOT NULL,
    data jsonb,
    mis_mode public.mis_mode DEFAULT 'PRESENT'::public.mis_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.mis_connection_location OWNER TO aperi;

--
-- Name: mis_connection_location_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_location_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_location_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_location_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_location_identifier_seq OWNED BY public.mis_connection_location.identifier;


--
-- Name: mis_connection_measurement_signature; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_measurement_signature (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    measurement_signature_identifier integer NOT NULL,
    external_identifier text NOT NULL
);


ALTER TABLE public.mis_connection_measurement_signature OWNER TO aperi;

--
-- Name: mis_connection_measurement_signature_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_measurement_signature_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_measurement_signature_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_measurement_signature_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_measurement_signature_identifier_seq OWNED BY public.mis_connection_measurement_signature.identifier;


--
-- Name: mis_connection_medication_signature; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_medication_signature (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    medication_signature_identifier integer NOT NULL,
    external_identifier text NOT NULL
);


ALTER TABLE public.mis_connection_medication_signature OWNER TO aperi;

--
-- Name: mis_connection_medication_signature_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_medication_signature_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_medication_signature_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_medication_signature_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_medication_signature_identifier_seq OWNED BY public.mis_connection_medication_signature.identifier;


--
-- Name: mis_connection_medication_type; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_medication_type (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    medication_type_identifier integer NOT NULL,
    external_identifier text NOT NULL
);


ALTER TABLE public.mis_connection_medication_type OWNER TO aperi;

--
-- Name: mis_connection_medication_type_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_medication_type_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_medication_type_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_medication_type_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_medication_type_identifier_seq OWNED BY public.mis_connection_medication_type.identifier;


--
-- Name: mis_connection_patient; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_patient (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    patient_identifier integer NOT NULL,
    identification jsonb NOT NULL,
    data jsonb,
    mis_mode public.mis_mode DEFAULT 'PRESENT'::public.mis_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.mis_connection_patient OWNER TO aperi;

--
-- Name: mis_connection_patient_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_patient_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_patient_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_patient_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_patient_identifier_seq OWNED BY public.mis_connection_patient.identifier;


--
-- Name: mis_connection_planned_care_action; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_planned_care_action (
    identifier integer NOT NULL,
    planned_care_action_identifier integer NOT NULL,
    external_identifier text NOT NULL,
    mis_connection_identifier integer NOT NULL
);


ALTER TABLE public.mis_connection_planned_care_action OWNER TO aperi;

--
-- Name: mis_connection_planned_care_action_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_planned_care_action_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_planned_care_action_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_planned_care_action_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_planned_care_action_identifier_seq OWNED BY public.mis_connection_planned_care_action.identifier;


--
-- Name: mis_connection_planned_measurement; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_planned_measurement (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    planned_measurement_identifier integer NOT NULL,
    external_identifier text NOT NULL
);


ALTER TABLE public.mis_connection_planned_measurement OWNER TO aperi;

--
-- Name: mis_connection_planned_measurement_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_planned_measurement_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_planned_measurement_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_planned_measurement_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_planned_measurement_identifier_seq OWNED BY public.mis_connection_planned_measurement.identifier;


--
-- Name: mis_connection_planned_medication; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_planned_medication (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    planned_medication_identifier integer NOT NULL,
    external_identifier text NOT NULL
);


ALTER TABLE public.mis_connection_planned_medication OWNER TO aperi;

--
-- Name: mis_connection_planned_medication_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_planned_medication_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_planned_medication_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_planned_medication_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_planned_medication_identifier_seq OWNED BY public.mis_connection_planned_medication.identifier;


--
-- Name: mis_connection_section; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_section (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    section_identifier integer NOT NULL,
    identification jsonb NOT NULL,
    data jsonb,
    mis_mode public.mis_mode DEFAULT 'PRESENT'::public.mis_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.mis_connection_section OWNER TO aperi;

--
-- Name: mis_connection_section_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_section_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_section_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_section_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_section_identifier_seq OWNED BY public.mis_connection_section.identifier;


--
-- Name: mis_connection_site; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.mis_connection_site (
    identifier integer NOT NULL,
    mis_connection_identifier integer NOT NULL,
    site_identifier integer NOT NULL,
    identification jsonb NOT NULL,
    data jsonb,
    mis_mode public.mis_mode DEFAULT 'PRESENT'::public.mis_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.mis_connection_site OWNER TO aperi;

--
-- Name: mis_connection_site_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mis_connection_site_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mis_connection_site_identifier_seq OWNER TO aperi;

--
-- Name: mis_connection_site_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.mis_connection_site_identifier_seq OWNED BY public.mis_connection_site.identifier;


--
-- Name: monitor_status_device; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.monitor_status_device (
    identifier integer NOT NULL,
    device_identifier integer NOT NULL,
    utc_timestamp_lastboot timestamp with time zone,
    utc_timestamp_lastboot_ui timestamp with time zone,
    utc_timestamp_lastcontact timestamp with time zone,
    utc_timestamp_lastcontact_ui timestamp with time zone,
    utc_timestamp_lastupdate timestamp with time zone,
    processing_rmq_status public.monitor_rmq_status,
    overheat_status public.monitor_heat_status,
    voice_status public.monitor_voice_status,
    last_known_ip text,
    last_known_ui_ip text,
    mac_address text
);


ALTER TABLE public.monitor_status_device OWNER TO aperi;

--
-- Name: monitor_status_device_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.monitor_status_device_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.monitor_status_device_identifier_seq OWNER TO aperi;

--
-- Name: monitor_status_device_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.monitor_status_device_identifier_seq OWNED BY public.monitor_status_device.identifier;


--
-- Name: monitor_status_server; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.monitor_status_server (
    identifier integer NOT NULL,
    host_name text NOT NULL,
    last_known_ip text,
    utc_timestamp_lastboot timestamp with time zone,
    utc_timestamp_lastcontact timestamp with time zone,
    utc_timestamp_lastupdate timestamp with time zone,
    disk_space_gb_free double precision,
    disk_space_percent_used integer,
    cpu_percent integer,
    mem_gb_free double precision,
    mem_percent_used integer
);


ALTER TABLE public.monitor_status_server OWNER TO aperi;

--
-- Name: monitor_status_server_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.monitor_status_server_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.monitor_status_server_identifier_seq OWNER TO aperi;

--
-- Name: monitor_status_server_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.monitor_status_server_identifier_seq OWNED BY public.monitor_status_server.identifier;


--
-- Name: mq_command_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.mq_command_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
    CYCLE;


ALTER TABLE public.mq_command_identifier OWNER TO aperi;

--
-- Name: notification; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.notification (
    identifier integer NOT NULL,
    message text NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    state integer DEFAULT 0 NOT NULL,
    location_identifier integer NOT NULL,
    status_identifier integer NOT NULL,
    employee_identifier integer,
    tag text,
    acknowledged_at timestamp with time zone,
    deleted_at timestamp with time zone
);


ALTER TABLE public.notification OWNER TO aperi;

--
-- Name: organization; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.organization (
    identifier integer NOT NULL,
    type integer NOT NULL,
    name text NOT NULL,
    administration_contact_identifier integer NOT NULL
);


ALTER TABLE public.organization OWNER TO aperi;

--
-- Name: patient; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient (
    identifier integer NOT NULL,
    name text NOT NULL,
    first_name text NOT NULL,
    last_name text NOT NULL,
    sex text NOT NULL,
    code text DEFAULT public.gen_random_uuid() NOT NULL,
    avatar text DEFAULT ''::text,
    status integer DEFAULT 0 NOT NULL,
    patient_administration_information_identifier integer,
    patient_social_information_identifier integer,
    patient_medical_information_identifier integer,
    section_identifier integer,
    room_identifier integer,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL,
    middle_name text
);


ALTER TABLE public.patient OWNER TO aperi;

--
-- Name: patient_administration_information; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient_administration_information (
    identifier integer NOT NULL,
    nickname text,
    birthdate date,
    birthplace text,
    marital_status text,
    nationality text,
    national_insurance_number text,
    identity_card_number text,
    bank_account text,
    membership_number text,
    start_hospitalization date DEFAULT CURRENT_TIMESTAMP,
    end_hospitalization date,
    religion text,
    remarks text,
    health_insurance_identifier integer,
    preferably_hospital_identifier integer,
    domicile_identifier integer,
    doctor_name text,
    doctor_phone text
);


ALTER TABLE public.patient_administration_information OWNER TO aperi;

--
-- Name: patient_contact; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient_contact (
    identifier integer NOT NULL,
    priority integer NOT NULL,
    function text,
    relation text,
    patient_administration_information_identifier integer NOT NULL,
    administration_contact_identifier integer NOT NULL
);


ALTER TABLE public.patient_contact OWNER TO aperi;

--
-- Name: patient_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient_group (
    identifier integer NOT NULL,
    code text NOT NULL
);


ALTER TABLE public.patient_group OWNER TO aperi;

--
-- Name: patient_group_ui_access; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient_group_ui_access (
    patient_group_identifier integer NOT NULL,
    ui_access_identifier integer NOT NULL
);


ALTER TABLE public.patient_group_ui_access OWNER TO aperi;

--
-- Name: patient_identification; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient_identification (
    identifier integer NOT NULL,
    key text NOT NULL,
    value text NOT NULL,
    patient_identifier integer NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.patient_identification OWNER TO aperi;

--
-- Name: patient_identification_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.patient_identification_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.patient_identification_identifier_seq OWNER TO aperi;

--
-- Name: patient_identification_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.patient_identification_identifier_seq OWNED BY public.patient_identification.identifier;


--
-- Name: patient_info; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient_info (
    identifier integer NOT NULL,
    patient_identifier integer NOT NULL,
    nickname text,
    birthdate date,
    birthplace text,
    admission_date timestamp with time zone,
    depart_date timestamp with time zone,
    decease_date timestamp with time zone,
    doctor_name text,
    doctor_phone text,
    general_remarks text,
    medical_remarks text,
    blood_type public.t_blood_type,
    diet text,
    nat_number text,
    healthservice_number text,
    katz_score text,
    is_diabetic boolean,
    is_epileptic boolean,
    is_palliative boolean,
    has_angor boolean,
    has_pacemaker boolean,
    has_coagulationdisorder boolean,
    has_copd boolean,
    dementia_stage public.dementia_stage,
    food_allergies text,
    medicine_allergies text,
    other_allergies text,
    dnr boolean,
    dnrdescription text,
    constraints text
);


ALTER TABLE public.patient_info OWNER TO aperi;

--
-- Name: patient_info_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.patient_info_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.patient_info_identifier_seq OWNER TO aperi;

--
-- Name: patient_info_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.patient_info_identifier_seq OWNED BY public.patient_info.identifier;


--
-- Name: patient_lifeline_message_pending; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient_lifeline_message_pending (
    patient_identifier integer NOT NULL,
    lifeline_message_identifier integer NOT NULL
);


ALTER TABLE public.patient_lifeline_message_pending OWNER TO aperi;

--
-- Name: patient_medical_information; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient_medical_information (
    identifier integer NOT NULL,
    diet text,
    general text,
    general_practitioner_identifier integer,
    blood_type_identifier integer,
    dementia_identifier integer,
    blood_type public.t_blood_type
);


ALTER TABLE public.patient_medical_information OWNER TO aperi;

--
-- Name: patient_medical_information_allergies; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient_medical_information_allergies (
    patient_medical_information_identifier integer NOT NULL,
    allergy_identifier integer NOT NULL
);


ALTER TABLE public.patient_medical_information_allergies OWNER TO aperi;

--
-- Name: patient_patient_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient_patient_group (
    patient_identifier integer NOT NULL,
    patient_group_identifier integer NOT NULL
);


ALTER TABLE public.patient_patient_group OWNER TO aperi;

--
-- Name: patient_session; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient_session (
    identifier integer NOT NULL,
    tasks_performed boolean DEFAULT false NOT NULL,
    timestamp_enter timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    timestamp_leave timestamp with time zone,
    care_session_identifier integer,
    patient_identifier integer NOT NULL
);


ALTER TABLE public.patient_session OWNER TO aperi;

--
-- Name: patient_social_information; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.patient_social_information (
    identifier integer NOT NULL,
    instagram_token text,
    general text
);


ALTER TABLE public.patient_social_information OWNER TO aperi;

--
-- Name: period; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.period (
    identifier integer NOT NULL,
    name text NOT NULL,
    start_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL
);


ALTER TABLE public.period OWNER TO aperi;

--
-- Name: picture; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.picture (
    identifier integer NOT NULL,
    name text NOT NULL,
    data bytea NOT NULL,
    mimetype text NOT NULL
);


ALTER TABLE public.picture OWNER TO aperi;

--
-- Name: picture_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.picture_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.picture_identifier_seq OWNER TO aperi;

--
-- Name: picture_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.picture_identifier_seq OWNED BY public.picture.identifier;


--
-- Name: planned_care_action; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.planned_care_action (
    identifier integer NOT NULL,
    utc_timestamp timestamp with time zone NOT NULL,
    care_action_identifier integer NOT NULL,
    patient_identifier integer NOT NULL,
    remarks text,
    authorization_type public.authorization_type DEFAULT 'caring'::public.authorization_type NOT NULL
);


ALTER TABLE public.planned_care_action OWNER TO aperi;

--
-- Name: planned_care_action_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.planned_care_action_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.planned_care_action_identifier_seq OWNER TO aperi;

--
-- Name: planned_care_action_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.planned_care_action_identifier_seq OWNED BY public.planned_care_action.identifier;


--
-- Name: planned_measurement; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.planned_measurement (
    identifier integer NOT NULL,
    measurement_type public.measurement_type NOT NULL,
    patient_identifier integer NOT NULL,
    utc_timestamp timestamp with time zone NOT NULL,
    remarks text
);


ALTER TABLE public.planned_measurement OWNER TO aperi;

--
-- Name: planned_measurement_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.planned_measurement_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.planned_measurement_identifier_seq OWNER TO aperi;

--
-- Name: planned_measurement_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.planned_measurement_identifier_seq OWNED BY public.planned_measurement.identifier;


--
-- Name: planned_medication; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.planned_medication (
    identifier integer NOT NULL,
    patient_identifier integer NOT NULL,
    phase public.medication_phase NOT NULL,
    remarks text,
    utc_timestamp timestamp with time zone NOT NULL
);


ALTER TABLE public.planned_medication OWNER TO aperi;

--
-- Name: planned_medication_detail; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.planned_medication_detail (
    identifier integer NOT NULL,
    planned_medication_identifier integer NOT NULL,
    medication_type_identifier integer NOT NULL,
    dosage real NOT NULL
);


ALTER TABLE public.planned_medication_detail OWNER TO aperi;

--
-- Name: planned_medication_detail_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.planned_medication_detail_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.planned_medication_detail_identifier_seq OWNER TO aperi;

--
-- Name: planned_medication_detail_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.planned_medication_detail_identifier_seq OWNED BY public.planned_medication_detail.identifier;


--
-- Name: planned_medication_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.planned_medication_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.planned_medication_identifier_seq OWNER TO aperi;

--
-- Name: planned_medication_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.planned_medication_identifier_seq OWNED BY public.planned_medication.identifier;


--
-- Name: possible_service_function; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.possible_service_function (
    identifier integer NOT NULL,
    code text NOT NULL
);


ALTER TABLE public.possible_service_function OWNER TO aperi;

--
-- Name: possible_work_order; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.possible_work_order (
    identifier integer NOT NULL,
    name text NOT NULL,
    code text NOT NULL,
    possible_work_order_top_identifier integer NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.possible_work_order OWNER TO aperi;

--
-- Name: possible_work_order_role; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.possible_work_order_role (
    possible_work_order_identifier integer NOT NULL,
    role_identifier integer NOT NULL
);


ALTER TABLE public.possible_work_order_role OWNER TO aperi;

--
-- Name: possible_work_order_top; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.possible_work_order_top (
    identifier integer NOT NULL,
    name text NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.possible_work_order_top OWNER TO aperi;

--
-- Name: predefined_broadcast_call; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.predefined_broadcast_call (
    identifier integer NOT NULL,
    name text NOT NULL,
    sound text NOT NULL
);


ALTER TABLE public.predefined_broadcast_call OWNER TO aperi;

--
-- Name: process; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.process (
    identifier integer NOT NULL,
    name text NOT NULL,
    site_identifier integer NOT NULL,
    mis_connection_identifier integer
);


ALTER TABLE public.process OWNER TO aperi;

--
-- Name: process_boot_cycle; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.process_boot_cycle (
    identifier integer NOT NULL,
    version text NOT NULL,
    build text NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    process_identifier integer
);


ALTER TABLE public.process_boot_cycle OWNER TO aperi;

--
-- Name: radio; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.radio (
    identifier integer NOT NULL,
    name text NOT NULL,
    avatar text NOT NULL,
    stream text NOT NULL,
    priority integer NOT NULL
);


ALTER TABLE public.radio OWNER TO aperi;

--
-- Name: remote_alarm; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.remote_alarm (
    identifier integer NOT NULL,
    created timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    trusted_device_identifier integer,
    sui_status_identifier integer,
    patient_identifier integer NOT NULL
);


ALTER TABLE public.remote_alarm OWNER TO aperi;

--
-- Name: rf_module; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.rf_module (
    identifier integer NOT NULL,
    serial integer NOT NULL,
    brand_identifier integer NOT NULL,
    type_identifier integer NOT NULL,
    patient_identifier integer,
    location_identifier integer,
    activity_timestamp timestamp with time zone,
    activity_data text,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL,
    battery_low boolean
);


ALTER TABLE public.rf_module OWNER TO aperi;

--
-- Name: rf_module_brand; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.rf_module_brand (
    identifier integer NOT NULL,
    name text NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.rf_module_brand OWNER TO aperi;

--
-- Name: rf_module_type; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.rf_module_type (
    identifier integer NOT NULL,
    name text NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.rf_module_type OWNER TO aperi;

--
-- Name: role; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.role (
    identifier integer NOT NULL,
    name text NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.role OWNER TO aperi;

--
-- Name: role_status; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.role_status (
    role_identifier integer NOT NULL,
    status_identifier integer NOT NULL
);


ALTER TABLE public.role_status OWNER TO aperi;

--
-- Name: role_ui_access; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.role_ui_access (
    role_identifier integer NOT NULL,
    ui_access_identifier integer NOT NULL
);


ALTER TABLE public.role_ui_access OWNER TO aperi;

--
-- Name: roles_engine_call_action_message_destination_email; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.roles_engine_call_action_message_destination_email (
    role_identifier integer NOT NULL,
    engine_call_action_message_destination_email_identifier integer NOT NULL
);


ALTER TABLE public.roles_engine_call_action_message_destination_email OWNER TO aperi;

--
-- Name: room; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.room (
    identifier integer NOT NULL,
    name text NOT NULL,
    code text NOT NULL,
    location_identifier integer NOT NULL
);


ALTER TABLE public.room OWNER TO aperi;

--
-- Name: section; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.section (
    identifier integer NOT NULL,
    name text NOT NULL,
    code text NOT NULL
);


ALTER TABLE public.section OWNER TO aperi;

--
-- Name: sequence_access_door_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_access_door_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_access_door_identifier OWNER TO aperi;

--
-- Name: sequence_access_door_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_access_door_identifier OWNED BY public.access_door.identifier;


--
-- Name: sequence_access_group_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_access_group_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_access_group_identifier OWNER TO aperi;

--
-- Name: sequence_access_group_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_access_group_identifier OWNED BY public.access_group.identifier;


--
-- Name: sequence_activity_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_activity_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_activity_identifier OWNER TO aperi;

--
-- Name: sequence_activity_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_activity_identifier OWNED BY public.activity.identifier;


--
-- Name: sequence_address_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_address_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_address_identifier OWNER TO aperi;

--
-- Name: sequence_address_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_address_identifier OWNED BY public.address.identifier;


--
-- Name: sequence_administration_contact_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_administration_contact_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_administration_contact_identifier OWNER TO aperi;

--
-- Name: sequence_administration_contact_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_administration_contact_identifier OWNED BY public.administration_contact.identifier;


--
-- Name: sequence_allergy_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_allergy_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_allergy_identifier OWNER TO aperi;

--
-- Name: sequence_allergy_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_allergy_identifier OWNED BY public.allergy.identifier;


--
-- Name: sequence_api_login_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_api_login_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_api_login_identifier OWNER TO aperi;

--
-- Name: sequence_api_login_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_api_login_identifier OWNED BY public.api_login.identifier;


--
-- Name: sequence_api_token_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_api_token_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_api_token_identifier OWNER TO aperi;

--
-- Name: sequence_api_token_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_api_token_identifier OWNED BY public.api_token.identifier;


--
-- Name: sequence_app_message_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_app_message_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_app_message_identifier OWNER TO aperi;

--
-- Name: sequence_app_message_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_app_message_identifier OWNED BY public.app_message.identifier;


--
-- Name: sequence_application_global_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_application_global_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_application_global_identifier OWNER TO aperi;

--
-- Name: sequence_application_global_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_application_global_identifier OWNED BY public.application_global.identifier;


--
-- Name: sequence_application_svp_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_application_svp_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_application_svp_identifier OWNER TO aperi;

--
-- Name: sequence_application_svp_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_application_svp_identifier OWNED BY public.application_svp.identifier;


--
-- Name: sequence_appointment_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_appointment_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_appointment_identifier OWNER TO aperi;

--
-- Name: sequence_appointment_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_appointment_identifier OWNED BY public.appointment.identifier;


--
-- Name: sequence_badge_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_badge_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_badge_identifier OWNER TO aperi;

--
-- Name: sequence_badge_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_badge_identifier OWNED BY public.badge.identifier;


--
-- Name: sequence_blood_type_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_blood_type_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_blood_type_identifier OWNER TO aperi;

--
-- Name: sequence_blood_type_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_blood_type_identifier OWNED BY public.blood_type.identifier;


--
-- Name: sequence_bluetooth_device_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_bluetooth_device_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_bluetooth_device_identifier OWNER TO aperi;

--
-- Name: sequence_bluetooth_device_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_bluetooth_device_identifier OWNED BY public.bluetooth_device.identifier;


--
-- Name: sequence_broadcast_call_group_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_broadcast_call_group_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_broadcast_call_group_identifier OWNER TO aperi;

--
-- Name: sequence_broadcast_call_group_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_broadcast_call_group_identifier OWNED BY public.broadcast_call_group.identifier;


--
-- Name: sequence_broadcast_call_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_broadcast_call_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_broadcast_call_identifier OWNER TO aperi;

--
-- Name: sequence_broadcast_call_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_broadcast_call_identifier OWNED BY public.broadcast_call.identifier;


--
-- Name: sequence_call_reason_category_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_call_reason_category_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_call_reason_category_identifier OWNER TO aperi;

--
-- Name: sequence_call_reason_category_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_call_reason_category_identifier OWNED BY public.call_reason_category.identifier;


--
-- Name: sequence_call_reason_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_call_reason_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_call_reason_identifier OWNER TO aperi;

--
-- Name: sequence_call_reason_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_call_reason_identifier OWNED BY public.call_reason.identifier;


--
-- Name: sequence_camera_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_camera_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_camera_identifier OWNER TO aperi;

--
-- Name: sequence_camera_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_camera_identifier OWNED BY public.camera.identifier;


--
-- Name: sequence_care_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_care_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_care_identifier OWNER TO aperi;

--
-- Name: sequence_care_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_care_identifier OWNED BY public.care.identifier;


--
-- Name: sequence_care_session_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_care_session_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_care_session_identifier OWNER TO aperi;

--
-- Name: sequence_care_session_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_care_session_identifier OWNED BY public.care_session.identifier;


--
-- Name: sequence_com_port_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_com_port_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_com_port_identifier OWNER TO aperi;

--
-- Name: sequence_com_port_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_com_port_identifier OWNED BY public.com_port.identifier;


--
-- Name: sequence_contact_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_contact_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_contact_identifier OWNER TO aperi;

--
-- Name: sequence_contact_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_contact_identifier OWNED BY public.contact.identifier;


--
-- Name: sequence_contact_list_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_contact_list_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_contact_list_identifier OWNER TO aperi;

--
-- Name: sequence_contact_list_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_contact_list_identifier OWNED BY public.contact_list.identifier;


--
-- Name: sequence_crew_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_crew_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_crew_identifier OWNER TO aperi;

--
-- Name: sequence_crew_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_crew_identifier OWNED BY public.crew.identifier;


--
-- Name: sequence_day_night_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_day_night_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_day_night_identifier OWNER TO aperi;

--
-- Name: sequence_day_night_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_day_night_identifier OWNED BY public.day_night.identifier;


--
-- Name: sequence_dect_account_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_dect_account_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_dect_account_identifier OWNER TO aperi;

--
-- Name: sequence_dect_account_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_dect_account_identifier OWNED BY public.dect_account.identifier;


--
-- Name: sequence_dect_group_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_dect_group_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_dect_group_identifier OWNER TO aperi;

--
-- Name: sequence_dect_group_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_dect_group_identifier OWNED BY public.dect_group.identifier;


--
-- Name: sequence_dect_message_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_dect_message_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_dect_message_identifier OWNER TO aperi;

--
-- Name: sequence_dect_message_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_dect_message_identifier OWNED BY public.dect_message.identifier;


--
-- Name: sequence_default_text_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_default_text_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_default_text_identifier OWNER TO aperi;

--
-- Name: sequence_default_text_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_default_text_identifier OWNED BY public.default_text.identifier;


--
-- Name: sequence_dementia_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_dementia_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_dementia_identifier OWNER TO aperi;

--
-- Name: sequence_dementia_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_dementia_identifier OWNED BY public.dementia.identifier;


--
-- Name: sequence_department_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_department_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_department_identifier OWNER TO aperi;

--
-- Name: sequence_department_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_department_identifier OWNED BY public.department.identifier;


--
-- Name: sequence_device_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_device_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_device_identifier OWNER TO aperi;

--
-- Name: sequence_device_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_device_identifier OWNED BY public.device.identifier;


--
-- Name: sequence_device_status_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_device_status_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_device_status_identifier OWNER TO aperi;

--
-- Name: sequence_device_status_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_device_status_identifier OWNED BY public.device_status.identifier;


--
-- Name: sequence_door_procedure_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_door_procedure_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_door_procedure_identifier OWNER TO aperi;

--
-- Name: sequence_door_procedure_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_door_procedure_identifier OWNED BY public.door_procedure.identifier;


--
-- Name: sequence_email_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_email_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_email_identifier OWNER TO aperi;

--
-- Name: sequence_email_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_email_identifier OWNED BY public.email.identifier;


--
-- Name: sequence_employee_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_employee_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_employee_identifier OWNER TO aperi;

--
-- Name: sequence_employee_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_employee_identifier OWNED BY public.employee.identifier;


--
-- Name: sequence_engine_action_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_action_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_action_identifier OWNER TO aperi;

--
-- Name: sequence_engine_action_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_action_identifier OWNED BY public.engine_action.identifier;


--
-- Name: sequence_engine_call_action_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_action_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_action_identifier OWNER TO aperi;

--
-- Name: sequence_engine_call_action_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_action_identifier OWNED BY public.engine_call_action.identifier;


--
-- Name: sequence_engine_call_action_message_app_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_action_message_app_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_action_message_app_identifier OWNER TO aperi;

--
-- Name: sequence_engine_call_action_message_app_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_action_message_app_identifier OWNED BY public.engine_call_action_message_app.identifier;


--
-- Name: sequence_engine_call_action_message_dect_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_action_message_dect_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_action_message_dect_identifier OWNER TO aperi;

--
-- Name: sequence_engine_call_action_message_dect_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_action_message_dect_identifier OWNED BY public.engine_call_action_message_dect.identifier;


--
-- Name: sequence_engine_call_action_message_destination_dect_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_action_message_destination_dect_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_action_message_destination_dect_identifier OWNER TO aperi;

--
-- Name: sequence_engine_call_action_message_destination_dect_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_action_message_destination_dect_identifier OWNED BY public.engine_call_action_message_destination_dect.identifier;


--
-- Name: sequence_engine_call_action_message_destination_email_identifie; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_action_message_destination_email_identifie
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_action_message_destination_email_identifie OWNER TO aperi;

--
-- Name: sequence_engine_call_action_message_destination_email_identifie; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_action_message_destination_email_identifie OWNED BY public.engine_call_action_message_destination_email.identifier;


--
-- Name: sequence_engine_call_action_message_destination_employee_identi; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_action_message_destination_employee_identi
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_action_message_destination_employee_identi OWNER TO aperi;

--
-- Name: sequence_engine_call_action_message_destination_employee_identi; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_action_message_destination_employee_identi OWNED BY public.engine_call_action_message_destination_employee.identifier;


--
-- Name: sequence_engine_call_action_message_destination_spectralink_ide; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_action_message_destination_spectralink_ide
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_action_message_destination_spectralink_ide OWNER TO aperi;

--
-- Name: sequence_engine_call_action_message_destination_spectralink_ide; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_action_message_destination_spectralink_ide OWNED BY public.engine_call_action_message_destination_spectralink.identifier;


--
-- Name: sequence_engine_call_action_message_email_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_action_message_email_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_action_message_email_identifier OWNER TO aperi;

--
-- Name: sequence_engine_call_action_message_email_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_action_message_email_identifier OWNED BY public.engine_call_action_message_email.identifier;


--
-- Name: sequence_engine_call_action_message_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_action_message_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_action_message_identifier OWNER TO aperi;

--
-- Name: sequence_engine_call_action_message_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_action_message_identifier OWNED BY public.engine_call_action_message.identifier;


--
-- Name: sequence_engine_call_action_message_spectralink_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_action_message_spectralink_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_action_message_spectralink_identifier OWNER TO aperi;

--
-- Name: sequence_engine_call_action_message_spectralink_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_action_message_spectralink_identifier OWNED BY public.engine_call_action_message_spectralink.identifier;


--
-- Name: sequence_engine_call_action_viewpoint_notification_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_action_viewpoint_notification_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_action_viewpoint_notification_identifier OWNER TO aperi;

--
-- Name: sequence_engine_call_action_viewpoint_notification_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_action_viewpoint_notification_identifier OWNED BY public.engine_call_action_viewpoint_notification.identifier;


--
-- Name: sequence_engine_call_action_viewpoint_status_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_action_viewpoint_status_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_action_viewpoint_status_identifier OWNER TO aperi;

--
-- Name: sequence_engine_call_action_viewpoint_status_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_action_viewpoint_status_identifier OWNED BY public.engine_call_action_viewpoint_status.identifier;


--
-- Name: sequence_engine_call_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_call_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_call_identifier OWNER TO aperi;

--
-- Name: sequence_engine_call_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_call_identifier OWNED BY public.engine_call.identifier;


--
-- Name: sequence_engine_device_configuration_profile_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_device_configuration_profile_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_device_configuration_profile_identifier OWNER TO aperi;

--
-- Name: sequence_engine_device_configuration_profile_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_device_configuration_profile_identifier OWNED BY public.engine_device_configuration_profile.identifier;


--
-- Name: sequence_engine_event_access_denied_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_event_access_denied_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_event_access_denied_identifier OWNER TO aperi;

--
-- Name: sequence_engine_event_access_denied_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_event_access_denied_identifier OWNED BY public.engine_event_access_denied.identifier;


--
-- Name: sequence_engine_event_access_entered_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_event_access_entered_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_event_access_entered_identifier OWNER TO aperi;

--
-- Name: sequence_engine_event_access_entered_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_event_access_entered_identifier OWNED BY public.engine_event_access_entered.identifier;


--
-- Name: sequence_engine_event_access_left_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_event_access_left_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_event_access_left_identifier OWNER TO aperi;

--
-- Name: sequence_engine_event_access_left_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_event_access_left_identifier OWNED BY public.engine_event_access_left.identifier;


--
-- Name: sequence_engine_event_badge_provided_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_event_badge_provided_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_event_badge_provided_identifier OWNER TO aperi;

--
-- Name: sequence_engine_event_badge_provided_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_event_badge_provided_identifier OWNED BY public.engine_event_badge_provided.identifier;


--
-- Name: sequence_engine_event_badge_provisioned_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_event_badge_provisioned_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_event_badge_provisioned_identifier OWNER TO aperi;

--
-- Name: sequence_engine_event_badge_provisioned_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_event_badge_provisioned_identifier OWNED BY public.engine_event_badge_provisioned.identifier;


--
-- Name: sequence_engine_event_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_event_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_event_identifier OWNER TO aperi;

--
-- Name: sequence_engine_event_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_event_identifier OWNED BY public.engine_event.identifier;


--
-- Name: sequence_engine_event_rf_module_provided_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_event_rf_module_provided_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_event_rf_module_provided_identifier OWNER TO aperi;

--
-- Name: sequence_engine_event_rf_module_provided_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_event_rf_module_provided_identifier OWNED BY public.engine_event_rf_module_provided.identifier;


--
-- Name: sequence_engine_event_viewpoint_state_changed_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_event_viewpoint_state_changed_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_event_viewpoint_state_changed_identifier OWNER TO aperi;

--
-- Name: sequence_engine_event_viewpoint_state_changed_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_event_viewpoint_state_changed_identifier OWNED BY public.engine_event_viewpoint_state_changed.identifier;


--
-- Name: sequence_engine_server_configuration_profile_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_engine_server_configuration_profile_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_engine_server_configuration_profile_identifier OWNER TO aperi;

--
-- Name: sequence_engine_server_configuration_profile_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_engine_server_configuration_profile_identifier OWNED BY public.engine_server_configuration_profile.identifier;


--
-- Name: sequence_espa_in_message_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_espa_in_message_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_espa_in_message_identifier OWNER TO aperi;

--
-- Name: sequence_espa_in_message_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_espa_in_message_identifier OWNED BY public.espa_in_message.identifier;


--
-- Name: sequence_fcm_account_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_fcm_account_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_fcm_account_identifier OWNER TO aperi;

--
-- Name: sequence_fcm_account_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_fcm_account_identifier OWNED BY public.fcm_account.identifier;


--
-- Name: sequence_general_practitioner_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_general_practitioner_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_general_practitioner_identifier OWNER TO aperi;

--
-- Name: sequence_general_practitioner_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_general_practitioner_identifier OWNED BY public.general_practitioner.identifier;


--
-- Name: sequence_gps_signal_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_gps_signal_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_gps_signal_identifier OWNER TO aperi;

--
-- Name: sequence_gps_signal_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_gps_signal_identifier OWNED BY public.gps_signal.identifier;


--
-- Name: sequence_hulp_call_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_hulp_call_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_hulp_call_identifier OWNER TO aperi;

--
-- Name: sequence_hulp_call_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_hulp_call_identifier OWNED BY public.hulp_call.identifier;


--
-- Name: sequence_image_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_image_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_image_identifier OWNER TO aperi;

--
-- Name: sequence_image_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_image_identifier OWNED BY public.image.identifier;


--
-- Name: sequence_lifeline_message_answer_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_lifeline_message_answer_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_lifeline_message_answer_identifier OWNER TO aperi;

--
-- Name: sequence_lifeline_message_answer_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_lifeline_message_answer_identifier OWNED BY public.lifeline_message_answer.identifier;


--
-- Name: sequence_lifeline_message_button_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_lifeline_message_button_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_lifeline_message_button_identifier OWNER TO aperi;

--
-- Name: sequence_lifeline_message_button_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_lifeline_message_button_identifier OWNED BY public.lifeline_message_button.identifier;


--
-- Name: sequence_lifeline_message_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_lifeline_message_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_lifeline_message_identifier OWNER TO aperi;

--
-- Name: sequence_lifeline_message_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_lifeline_message_identifier OWNED BY public.lifeline_message.identifier;


--
-- Name: sequence_locality_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_locality_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_locality_identifier OWNER TO aperi;

--
-- Name: sequence_locality_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_locality_identifier OWNED BY public.locality.identifier;


--
-- Name: sequence_location_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_location_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_location_identifier OWNER TO aperi;

--
-- Name: sequence_location_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_location_identifier OWNED BY public.location.identifier;


--
-- Name: sequence_log_engine_context_device_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_log_engine_context_device_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_log_engine_context_device_identifier OWNER TO aperi;

--
-- Name: sequence_log_engine_context_device_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_log_engine_context_device_identifier OWNED BY public.log_engine_context_device.identifier;


--
-- Name: sequence_log_engine_context_location_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_log_engine_context_location_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_log_engine_context_location_identifier OWNER TO aperi;

--
-- Name: sequence_log_engine_context_location_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_log_engine_context_location_identifier OWNED BY public.log_engine_context_location.identifier;


--
-- Name: sequence_log_engine_context_patient_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_log_engine_context_patient_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_log_engine_context_patient_identifier OWNER TO aperi;

--
-- Name: sequence_log_engine_context_patient_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_log_engine_context_patient_identifier OWNED BY public.log_engine_context_patient.identifier;


--
-- Name: sequence_log_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_log_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_log_identifier OWNER TO aperi;

--
-- Name: sequence_log_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_log_identifier OWNED BY public.log.identifier;


--
-- Name: sequence_management_account_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_management_account_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_management_account_identifier OWNER TO aperi;

--
-- Name: sequence_management_account_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_management_account_identifier OWNED BY public.management_account.identifier;


--
-- Name: sequence_management_department_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_management_department_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_management_department_identifier OWNER TO aperi;

--
-- Name: sequence_management_department_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_management_department_identifier OWNED BY public.management_department.identifier;


--
-- Name: sequence_management_device_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_management_device_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_management_device_identifier OWNER TO aperi;

--
-- Name: sequence_management_device_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_management_device_identifier OWNED BY public.management_device.identifier;


--
-- Name: sequence_management_device_update_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_management_device_update_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_management_device_update_identifier OWNER TO aperi;

--
-- Name: sequence_management_device_update_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_management_device_update_identifier OWNED BY public.management_device_update.identifier;


--
-- Name: sequence_management_room_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_management_room_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_management_room_identifier OWNER TO aperi;

--
-- Name: sequence_management_room_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_management_room_identifier OWNED BY public.management_room.identifier;


--
-- Name: sequence_management_server_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_management_server_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_management_server_identifier OWNER TO aperi;

--
-- Name: sequence_management_server_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_management_server_identifier OWNED BY public.management_server.identifier;


--
-- Name: sequence_management_site_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_management_site_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_management_site_identifier OWNER TO aperi;

--
-- Name: sequence_management_site_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_management_site_identifier OWNED BY public.management_site.identifier;


--
-- Name: sequence_medication_form_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_medication_form_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_medication_form_identifier OWNER TO aperi;

--
-- Name: sequence_medication_form_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_medication_form_identifier OWNED BY public.medication_form.identifier;


--
-- Name: sequence_medication_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_medication_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_medication_identifier OWNER TO aperi;

--
-- Name: sequence_medication_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_medication_identifier OWNED BY public.medication.identifier;


--
-- Name: sequence_message_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_message_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_message_identifier OWNER TO aperi;

--
-- Name: sequence_message_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_message_identifier OWNED BY public.message.identifier;


--
-- Name: sequence_notification_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_notification_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_notification_identifier OWNER TO aperi;

--
-- Name: sequence_notification_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_notification_identifier OWNED BY public.notification.identifier;


--
-- Name: sequence_organization_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_organization_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_organization_identifier OWNER TO aperi;

--
-- Name: sequence_organization_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_organization_identifier OWNED BY public.organization.identifier;


--
-- Name: sequence_patient_administration_information_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_patient_administration_information_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_patient_administration_information_identifier OWNER TO aperi;

--
-- Name: sequence_patient_administration_information_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_patient_administration_information_identifier OWNED BY public.patient_administration_information.identifier;


--
-- Name: sequence_patient_contact_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_patient_contact_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_patient_contact_identifier OWNER TO aperi;

--
-- Name: sequence_patient_contact_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_patient_contact_identifier OWNED BY public.patient_contact.identifier;


--
-- Name: sequence_patient_group_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_patient_group_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_patient_group_identifier OWNER TO aperi;

--
-- Name: sequence_patient_group_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_patient_group_identifier OWNED BY public.patient_group.identifier;


--
-- Name: sequence_patient_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_patient_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_patient_identifier OWNER TO aperi;

--
-- Name: sequence_patient_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_patient_identifier OWNED BY public.patient.identifier;


--
-- Name: sequence_patient_medical_information_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_patient_medical_information_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_patient_medical_information_identifier OWNER TO aperi;

--
-- Name: sequence_patient_medical_information_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_patient_medical_information_identifier OWNED BY public.patient_medical_information.identifier;


--
-- Name: sequence_patient_session_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_patient_session_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_patient_session_identifier OWNER TO aperi;

--
-- Name: sequence_patient_session_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_patient_session_identifier OWNED BY public.patient_session.identifier;


--
-- Name: sequence_patient_social_information_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_patient_social_information_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_patient_social_information_identifier OWNER TO aperi;

--
-- Name: sequence_patient_social_information_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_patient_social_information_identifier OWNED BY public.patient_social_information.identifier;


--
-- Name: sequence_period_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_period_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_period_identifier OWNER TO aperi;

--
-- Name: sequence_period_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_period_identifier OWNED BY public.period.identifier;


--
-- Name: sequence_possible_service_function_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_possible_service_function_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_possible_service_function_identifier OWNER TO aperi;

--
-- Name: sequence_possible_service_function_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_possible_service_function_identifier OWNED BY public.possible_service_function.identifier;


--
-- Name: sequence_possible_work_order_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_possible_work_order_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_possible_work_order_identifier OWNER TO aperi;

--
-- Name: sequence_possible_work_order_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_possible_work_order_identifier OWNED BY public.possible_work_order.identifier;


--
-- Name: sequence_possible_work_order_top_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_possible_work_order_top_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_possible_work_order_top_identifier OWNER TO aperi;

--
-- Name: sequence_possible_work_order_top_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_possible_work_order_top_identifier OWNED BY public.possible_work_order_top.identifier;


--
-- Name: sequence_predefined_broadcast_call_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_predefined_broadcast_call_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_predefined_broadcast_call_identifier OWNER TO aperi;

--
-- Name: sequence_predefined_broadcast_call_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_predefined_broadcast_call_identifier OWNED BY public.predefined_broadcast_call.identifier;


--
-- Name: sequence_process_boot_cycle_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_process_boot_cycle_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_process_boot_cycle_identifier OWNER TO aperi;

--
-- Name: sequence_process_boot_cycle_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_process_boot_cycle_identifier OWNED BY public.process_boot_cycle.identifier;


--
-- Name: sequence_process_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_process_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_process_identifier OWNER TO aperi;

--
-- Name: sequence_process_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_process_identifier OWNED BY public.process.identifier;


--
-- Name: sequence_radio_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_radio_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_radio_identifier OWNER TO aperi;

--
-- Name: sequence_radio_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_radio_identifier OWNED BY public.radio.identifier;


--
-- Name: sequence_remote_alarm_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_remote_alarm_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_remote_alarm_identifier OWNER TO aperi;

--
-- Name: sequence_remote_alarm_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_remote_alarm_identifier OWNED BY public.remote_alarm.identifier;


--
-- Name: sequence_rf_module_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_rf_module_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_rf_module_identifier OWNER TO aperi;

--
-- Name: sequence_rf_module_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_rf_module_identifier OWNED BY public.rf_module.identifier;


--
-- Name: sequence_role_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_role_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_role_identifier OWNER TO aperi;

--
-- Name: sequence_role_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_role_identifier OWNED BY public.role.identifier;


--
-- Name: sequence_room_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_room_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_room_identifier OWNER TO aperi;

--
-- Name: sequence_room_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_room_identifier OWNED BY public.room.identifier;


--
-- Name: sequence_section_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_section_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_section_identifier OWNER TO aperi;

--
-- Name: sequence_section_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_section_identifier OWNED BY public.section.identifier;


--
-- Name: service_function; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.service_function (
    identifier integer NOT NULL,
    timestamp_enter timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    timestamp_leave timestamp with time zone,
    employee_identifier integer,
    possible_service_function_identifier integer
);


ALTER TABLE public.service_function OWNER TO aperi;

--
-- Name: sequence_service_function_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_service_function_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_service_function_identifier OWNER TO aperi;

--
-- Name: sequence_service_function_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_service_function_identifier OWNED BY public.service_function.identifier;


--
-- Name: setting; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.setting (
    identifier integer NOT NULL,
    key text NOT NULL,
    value text NOT NULL,
    description text NOT NULL,
    site_identifier integer,
    process_identifier integer
);


ALTER TABLE public.setting OWNER TO aperi;

--
-- Name: sequence_setting_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_setting_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_setting_identifier OWNER TO aperi;

--
-- Name: sequence_setting_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_setting_identifier OWNED BY public.setting.identifier;


--
-- Name: shortcut; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.shortcut (
    identifier integer NOT NULL,
    name text NOT NULL,
    icon text NOT NULL,
    url text NOT NULL,
    type public.shortcut_type NOT NULL,
    "position" integer DEFAULT 0 NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL,
    picture_identifier integer,
    patient_can_view boolean NOT NULL
);


ALTER TABLE public.shortcut OWNER TO aperi;

--
-- Name: sequence_shortcut_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_shortcut_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_shortcut_identifier OWNER TO aperi;

--
-- Name: sequence_shortcut_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_shortcut_identifier OWNED BY public.shortcut.identifier;


--
-- Name: site; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.site (
    identifier integer NOT NULL,
    name text NOT NULL
);


ALTER TABLE public.site OWNER TO aperi;

--
-- Name: sequence_site_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_site_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_site_identifier OWNER TO aperi;

--
-- Name: sequence_site_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_site_identifier OWNED BY public.site.identifier;


--
-- Name: spectralink_account; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.spectralink_account (
    identifier integer NOT NULL,
    number text NOT NULL,
    name text NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.spectralink_account OWNER TO aperi;

--
-- Name: sequence_spectralink_account_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_spectralink_account_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_spectralink_account_identifier OWNER TO aperi;

--
-- Name: sequence_spectralink_account_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_spectralink_account_identifier OWNED BY public.spectralink_account.identifier;


--
-- Name: spectralink_group; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.spectralink_group (
    identifier integer NOT NULL,
    name text NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.spectralink_group OWNER TO aperi;

--
-- Name: sequence_spectralink_group_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_spectralink_group_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_spectralink_group_identifier OWNER TO aperi;

--
-- Name: sequence_spectralink_group_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_spectralink_group_identifier OWNED BY public.spectralink_group.identifier;


--
-- Name: sequence_spectralink_message_external_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_spectralink_message_external_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 65535
    CACHE 1
    CYCLE;


ALTER TABLE public.sequence_spectralink_message_external_identifier OWNER TO aperi;

--
-- Name: spectralink_message; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.spectralink_message (
    identifier integer NOT NULL,
    external_identifier integer NOT NULL,
    key text NOT NULL,
    action integer,
    parameters jsonb NOT NULL,
    scheduled_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    sent_at timestamp with time zone,
    deleted_at timestamp with time zone,
    expired_at timestamp with time zone NOT NULL,
    account_identifier integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.spectralink_message OWNER TO aperi;

--
-- Name: sequence_spectralink_message_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_spectralink_message_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_spectralink_message_identifier OWNER TO aperi;

--
-- Name: sequence_spectralink_message_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_spectralink_message_identifier OWNED BY public.spectralink_message.identifier;


--
-- Name: spectralink_message_reference; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.spectralink_message_reference (
    identifier integer NOT NULL,
    key text NOT NULL,
    engine_call_action_message_identifier integer NOT NULL,
    context_location_identifier integer,
    tag text
);


ALTER TABLE public.spectralink_message_reference OWNER TO aperi;

--
-- Name: sequence_spectralink_message_reference_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_spectralink_message_reference_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_spectralink_message_reference_identifier OWNER TO aperi;

--
-- Name: sequence_spectralink_message_reference_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_spectralink_message_reference_identifier OWNED BY public.spectralink_message_reference.identifier;


--
-- Name: state_cause; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.state_cause (
    identifier integer NOT NULL,
    type integer NOT NULL,
    id_lsb integer,
    id_msb integer,
    description text NOT NULL,
    device_identifier integer,
    state_cause_template_identifier integer
);


ALTER TABLE public.state_cause OWNER TO aperi;

--
-- Name: sequence_state_cause_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_state_cause_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_state_cause_identifier OWNER TO aperi;

--
-- Name: sequence_state_cause_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_state_cause_identifier OWNED BY public.state_cause.identifier;


--
-- Name: state_cause_template; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.state_cause_template (
    identifier integer NOT NULL,
    priority integer NOT NULL,
    name text NOT NULL
);


ALTER TABLE public.state_cause_template OWNER TO aperi;

--
-- Name: sequence_state_cause_template_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_state_cause_template_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_state_cause_template_identifier OWNER TO aperi;

--
-- Name: sequence_state_cause_template_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_state_cause_template_identifier OWNED BY public.state_cause_template.identifier;


--
-- Name: state_machine_state; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.state_machine_state (
    identifier integer NOT NULL,
    state_machine integer NOT NULL,
    state integer NOT NULL,
    device_identifier integer
);


ALTER TABLE public.state_machine_state OWNER TO aperi;

--
-- Name: sequence_state_machine_state_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_state_machine_state_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_state_machine_state_identifier OWNER TO aperi;

--
-- Name: sequence_state_machine_state_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_state_machine_state_identifier OWNED BY public.state_machine_state.identifier;


--
-- Name: status_app; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.status_app (
    identifier integer NOT NULL
);


ALTER TABLE public.status_app OWNER TO aperi;

--
-- Name: sequence_status_app_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_status_app_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_status_app_identifier OWNER TO aperi;

--
-- Name: sequence_status_app_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_status_app_identifier OWNED BY public.status_app.identifier;


--
-- Name: status_dect; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.status_dect (
    identifier integer NOT NULL,
    beep integer NOT NULL,
    type integer NOT NULL,
    priority integer NOT NULL
);


ALTER TABLE public.status_dect OWNER TO aperi;

--
-- Name: sequence_status_dect_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_status_dect_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_status_dect_identifier OWNER TO aperi;

--
-- Name: sequence_status_dect_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_status_dect_identifier OWNED BY public.status_dect.identifier;


--
-- Name: string; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.string (
    identifier integer NOT NULL,
    value text NOT NULL,
    bluetooth_device_identifier integer
);


ALTER TABLE public.string OWNER TO aperi;

--
-- Name: sequence_string_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_string_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_string_identifier OWNER TO aperi;

--
-- Name: sequence_string_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_string_identifier OWNED BY public.string.identifier;


--
-- Name: sui_patient_info; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.sui_patient_info (
    identifier integer NOT NULL,
    password text,
    info_url text,
    instagram_api_token text,
    show_instagram_on_screensaver boolean DEFAULT false NOT NULL,
    patient_identifier integer NOT NULL
);


ALTER TABLE public.sui_patient_info OWNER TO aperi;

--
-- Name: sequence_sui_patient_info_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_sui_patient_info_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_sui_patient_info_identifier OWNER TO aperi;

--
-- Name: sequence_sui_patient_info_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_sui_patient_info_identifier OWNED BY public.sui_patient_info.identifier;


--
-- Name: sui_status; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.sui_status (
    identifier integer NOT NULL,
    code text NOT NULL,
    name text NOT NULL,
    linked_with_location boolean NOT NULL,
    read_only boolean NOT NULL,
    home boolean NOT NULL,
    last_active timestamp with time zone NOT NULL,
    patient_identifier integer NOT NULL,
    image_identifier integer
);


ALTER TABLE public.sui_status OWNER TO aperi;

--
-- Name: sequence_sui_status_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_sui_status_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_sui_status_identifier OWNER TO aperi;

--
-- Name: sequence_sui_status_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_sui_status_identifier OWNED BY public.sui_status.identifier;


--
-- Name: sui_status_trigger; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.sui_status_trigger (
    identifier integer NOT NULL,
    created timestamp with time zone NOT NULL,
    code text NOT NULL,
    name text NOT NULL,
    active boolean NOT NULL,
    patient_identifier integer NOT NULL,
    on_connected_identifier integer,
    on_disconnected_identifier integer,
    wifi_network_identifier integer,
    bluetooth_device_identifier integer
);


ALTER TABLE public.sui_status_trigger OWNER TO aperi;

--
-- Name: sequence_sui_status_trigger_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_sui_status_trigger_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_sui_status_trigger_identifier OWNER TO aperi;

--
-- Name: sequence_sui_status_trigger_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_sui_status_trigger_identifier OWNED BY public.sui_status_trigger.identifier;


--
-- Name: supplement; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.supplement (
    identifier integer NOT NULL,
    code text NOT NULL,
    description text NOT NULL
);


ALTER TABLE public.supplement OWNER TO aperi;

--
-- Name: sequence_supplement_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_supplement_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_supplement_identifier OWNER TO aperi;

--
-- Name: sequence_supplement_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_supplement_identifier OWNED BY public.supplement.identifier;


--
-- Name: supplement_registration; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.supplement_registration (
    identifier integer NOT NULL,
    count integer DEFAULT 0 NOT NULL,
    comment text,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    supplement_identifier integer,
    patient_identifier integer,
    employee_identifier integer
);


ALTER TABLE public.supplement_registration OWNER TO aperi;

--
-- Name: sequence_supplement_registration_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_supplement_registration_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_supplement_registration_identifier OWNER TO aperi;

--
-- Name: sequence_supplement_registration_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_supplement_registration_identifier OWNED BY public.supplement_registration.identifier;


--
-- Name: task_type; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.task_type (
    identifier integer NOT NULL,
    type text NOT NULL
);


ALTER TABLE public.task_type OWNER TO aperi;

--
-- Name: sequence_task_type_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_task_type_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_task_type_identifier OWNER TO aperi;

--
-- Name: sequence_task_type_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_task_type_identifier OWNED BY public.task_type.identifier;


--
-- Name: trusted_device; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.trusted_device (
    identifier integer NOT NULL,
    code text NOT NULL,
    name text NOT NULL,
    platform text NOT NULL,
    software_version text NOT NULL,
    created timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_used timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.trusted_device OWNER TO aperi;

--
-- Name: sequence_trusted_device_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_trusted_device_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_trusted_device_identifier OWNER TO aperi;

--
-- Name: sequence_trusted_device_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_trusted_device_identifier OWNED BY public.trusted_device.identifier;


--
-- Name: ui_access; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.ui_access (
    identifier integer NOT NULL,
    platform text NOT NULL,
    view text NOT NULL,
    priority integer NOT NULL
);


ALTER TABLE public.ui_access OWNER TO aperi;

--
-- Name: sequence_ui_access_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_ui_access_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_ui_access_identifier OWNER TO aperi;

--
-- Name: sequence_ui_access_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_ui_access_identifier OWNED BY public.ui_access.identifier;


--
-- Name: webrtc_account; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.webrtc_account (
    identifier integer NOT NULL,
    type text NOT NULL,
    display_name text NOT NULL,
    number text NOT NULL,
    domain text NOT NULL,
    ws_servers text NOT NULL,
    authorization_user text NOT NULL,
    password text NOT NULL,
    location_identifier integer,
    camera_identifier integer,
    device_identifier integer,
    employee_identifier integer,
    patient_identifier integer
);


ALTER TABLE public.webrtc_account OWNER TO aperi;

--
-- Name: sequence_webrtc_account_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_webrtc_account_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_webrtc_account_identifier OWNER TO aperi;

--
-- Name: sequence_webrtc_account_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_webrtc_account_identifier OWNED BY public.webrtc_account.identifier;


--
-- Name: wifi_network; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.wifi_network (
    identifier integer NOT NULL,
    ssid text NOT NULL
);


ALTER TABLE public.wifi_network OWNER TO aperi;

--
-- Name: sequence_wifi_network_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_wifi_network_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_wifi_network_identifier OWNER TO aperi;

--
-- Name: sequence_wifi_network_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_wifi_network_identifier OWNED BY public.wifi_network.identifier;


--
-- Name: work_order; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.work_order (
    identifier integer NOT NULL,
    status integer DEFAULT 0 NOT NULL,
    comment text DEFAULT ''::text NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    timestamp_solved timestamp with time zone,
    possible_work_order_identifier integer NOT NULL,
    patient_identifier integer NOT NULL,
    employee_identifier integer,
    mailed_at timestamp with time zone
);


ALTER TABLE public.work_order OWNER TO aperi;

--
-- Name: sequence_work_order_identifier; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.sequence_work_order_identifier
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sequence_work_order_identifier OWNER TO aperi;

--
-- Name: sequence_work_order_identifier; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.sequence_work_order_identifier OWNED BY public.work_order.identifier;


--
-- Name: shortcut_role; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.shortcut_role (
    identifier integer NOT NULL,
    shortcut_identifier integer,
    role_identifier integer
);


ALTER TABLE public.shortcut_role OWNER TO aperi;

--
-- Name: shortcut_role_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.shortcut_role_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.shortcut_role_identifier_seq OWNER TO aperi;

--
-- Name: shortcut_role_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.shortcut_role_identifier_seq OWNED BY public.shortcut_role.identifier;


--
-- Name: spectralink_group_location; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.spectralink_group_location (
    spectralink_group_identifier integer NOT NULL,
    location_identifier integer NOT NULL
);


ALTER TABLE public.spectralink_group_location OWNER TO aperi;

--
-- Name: spectralink_group_spectralink_account; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.spectralink_group_spectralink_account (
    spectralink_group_identifier integer NOT NULL,
    spectralink_account_identifier integer NOT NULL
);


ALTER TABLE public.spectralink_group_spectralink_account OWNER TO aperi;

--
-- Name: spectralink_message_queue; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.spectralink_message_queue (
    identifier integer NOT NULL,
    guid text NOT NULL,
    engine_event_identifier integer NOT NULL,
    message text NOT NULL,
    action integer NOT NULL,
    response integer NOT NULL,
    color integer NOT NULL,
    alerttone integer NOT NULL,
    alertvolume integer NOT NULL,
    alerttimeout integer NOT NULL,
    callback integer NOT NULL,
    account_identifier integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    sent_at timestamp with time zone,
    delivered_at timestamp with time zone,
    man_ack_at timestamp with time zone,
    deleted boolean DEFAULT false NOT NULL,
    deletion_sent_at timestamp with time zone,
    deletion_confirmed_at timestamp with time zone
);


ALTER TABLE public.spectralink_message_queue OWNER TO aperi;

--
-- Name: spectralink_message_queue_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.spectralink_message_queue_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.spectralink_message_queue_identifier_seq OWNER TO aperi;

--
-- Name: spectralink_message_queue_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.spectralink_message_queue_identifier_seq OWNED BY public.spectralink_message_queue.identifier;


--
-- Name: state_cause_template_device; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.state_cause_template_device (
    state_cause_template_identifier integer NOT NULL,
    device_identifier integer NOT NULL
);


ALTER TABLE public.state_cause_template_device OWNER TO aperi;

--
-- Name: state_machine_change_action_config; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.state_machine_change_action_config (
    identifier integer NOT NULL,
    state_machine integer NOT NULL,
    state_machine_state integer NOT NULL,
    action_config_identifier integer NOT NULL
);


ALTER TABLE public.state_machine_change_action_config OWNER TO aperi;

--
-- Name: state_machine_change_action_config_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.state_machine_change_action_config_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.state_machine_change_action_config_identifier_seq OWNER TO aperi;

--
-- Name: state_machine_change_action_config_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.state_machine_change_action_config_identifier_seq OWNED BY public.state_machine_change_action_config.identifier;


--
-- Name: status; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.status (
    identifier integer NOT NULL,
    name text NOT NULL,
    type text NOT NULL,
    icon text NOT NULL,
    color text NOT NULL,
    text_color text DEFAULT '#000000'::text NOT NULL,
    background_color text DEFAULT '#FFFFFF'::text NOT NULL,
    pursuit_sound_repeat text,
    pursuit_sound_night_repeat text,
    pursuit_sound text,
    pursuit_sound_night text,
    priority integer NOT NULL,
    dect_identifier integer NOT NULL,
    app_identifier integer NOT NULL,
    cas_mode public.cas_mode DEFAULT 'ACTIVE'::public.cas_mode NOT NULL,
    cas_version bigint DEFAULT (date_part('epoch'::text, CURRENT_TIMESTAMP) * (1000000)::double precision) NOT NULL
);


ALTER TABLE public.status OWNER TO aperi;

--
-- Name: task_types_roles; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.task_types_roles (
    task_type_identifier integer NOT NULL,
    role_identifier integer NOT NULL
);


ALTER TABLE public.task_types_roles OWNER TO aperi;

--
-- Name: translation; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.translation (
    identifier integer NOT NULL,
    translation_key text NOT NULL,
    en text,
    nl text,
    fr text,
    ru text,
    de text
);


ALTER TABLE public.translation OWNER TO aperi;

--
-- Name: translation_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.translation_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.translation_identifier_seq OWNER TO aperi;

--
-- Name: translation_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.translation_identifier_seq OWNED BY public.translation.identifier;


--
-- Name: trusted_device_patient; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.trusted_device_patient (
    trusted_device_identifier integer NOT NULL,
    patient_identifier integer NOT NULL
);


ALTER TABLE public.trusted_device_patient OWNER TO aperi;

--
-- Name: trusted_device_sui_status; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.trusted_device_sui_status (
    trusted_device_identifier integer NOT NULL,
    sui_status_identifier integer NOT NULL
);


ALTER TABLE public.trusted_device_sui_status OWNER TO aperi;

--
-- Name: version_history; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.version_history (
    identifier integer NOT NULL,
    installed_version text NOT NULL,
    installed_on timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.version_history OWNER TO aperi;

--
-- Name: version_history_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.version_history_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.version_history_identifier_seq OWNER TO aperi;

--
-- Name: version_history_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.version_history_identifier_seq OWNED BY public.version_history.identifier;


--
-- Name: yunction_log; Type: TABLE; Schema: public; Owner: aperi
--

CREATE TABLE public.yunction_log (
    identifier integer NOT NULL,
    utc_timestamp timestamp with time zone DEFAULT now() NOT NULL,
    application_name text NOT NULL,
    remarks text,
    details text,
    sent_home_on timestamp with time zone
);


ALTER TABLE public.yunction_log OWNER TO aperi;

--
-- Name: yunction_log_identifier_seq; Type: SEQUENCE; Schema: public; Owner: aperi
--

CREATE SEQUENCE public.yunction_log_identifier_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.yunction_log_identifier_seq OWNER TO aperi;

--
-- Name: yunction_log_identifier_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: aperi
--

ALTER SEQUENCE public.yunction_log_identifier_seq OWNED BY public.yunction_log.identifier;


--
-- Name: access_door identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_access_door_identifier'::regclass);


--
-- Name: access_group identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_group ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_access_group_identifier'::regclass);


--
-- Name: action_config identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config ALTER COLUMN identifier SET DEFAULT nextval('public.action_config_identifier_seq'::regclass);


--
-- Name: action_config_dect_to_crews_of_location identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_crews_of_location ALTER COLUMN identifier SET DEFAULT nextval('public.action_config_dect_to_crews_of_location_identifier_seq'::regclass);


--
-- Name: action_config_dect_to_crews_of_location_role identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_crews_of_location_role ALTER COLUMN identifier SET DEFAULT nextval('public.action_config_dect_to_crews_of_location_role_identifier_seq'::regclass);


--
-- Name: action_config_dect_to_group identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_group ALTER COLUMN identifier SET DEFAULT nextval('public.action_config_dect_to_group_identifier_seq'::regclass);


--
-- Name: action_config_dect_to_group_dect_group identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_group_dect_group ALTER COLUMN identifier SET DEFAULT nextval('public.action_config_dect_to_group_dect_group_identifier_seq'::regclass);


--
-- Name: action_config_spectralink_to_crews_of_location identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_crews_of_location ALTER COLUMN identifier SET DEFAULT nextval('public.action_config_spectralink_to_crews_of_location_identifier_seq'::regclass);


--
-- Name: action_config_spectralink_to_crews_of_location_role identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_crews_of_location_role ALTER COLUMN identifier SET DEFAULT nextval('public.action_config_spectralink_to_crews_of_location_r_identifier_seq'::regclass);


--
-- Name: action_config_spectralink_to_group identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_group ALTER COLUMN identifier SET DEFAULT nextval('public.action_config_spectralink_to_group_identifier_seq'::regclass);


--
-- Name: action_config_spectralink_to_group_spectralink_group identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_group_spectralink_group ALTER COLUMN identifier SET DEFAULT nextval('public.action_config_spectralink_to_group_spectralink_g_identifier_seq'::regclass);


--
-- Name: activity identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.activity ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_activity_identifier'::regclass);


--
-- Name: address identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.address ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_address_identifier'::regclass);


--
-- Name: administration_contact identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.administration_contact ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_administration_contact_identifier'::regclass);


--
-- Name: allergy identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.allergy ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_allergy_identifier'::regclass);


--
-- Name: api_login identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_api_login_identifier'::regclass);


--
-- Name: api_token identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_token ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_api_token_identifier'::regclass);


--
-- Name: app_message identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.app_message ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_app_message_identifier'::regclass);


--
-- Name: application_global identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_global ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_application_global_identifier'::regclass);


--
-- Name: application_svp identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_svp ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_application_svp_identifier'::regclass);


--
-- Name: appointment identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.appointment ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_appointment_identifier'::regclass);


--
-- Name: badge identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.badge ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_badge_identifier'::regclass);


--
-- Name: blood_type identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.blood_type ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_blood_type_identifier'::regclass);


--
-- Name: bluetooth_device identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.bluetooth_device ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_bluetooth_device_identifier'::regclass);


--
-- Name: broadcast_call identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.broadcast_call ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_broadcast_call_identifier'::regclass);


--
-- Name: broadcast_call_group identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.broadcast_call_group ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_broadcast_call_group_identifier'::regclass);


--
-- Name: call_reason identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.call_reason ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_call_reason_identifier'::regclass);


--
-- Name: call_reason_category identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.call_reason_category ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_call_reason_category_identifier'::regclass);


--
-- Name: callback_queue identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.callback_queue ALTER COLUMN identifier SET DEFAULT nextval('public.callback_queue_identifier_seq'::regclass);


--
-- Name: camera identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.camera ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_camera_identifier'::regclass);


--
-- Name: care identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_care_identifier'::regclass);


--
-- Name: care_action identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care_action ALTER COLUMN identifier SET DEFAULT nextval('public.care_action_identifier_seq'::regclass);


--
-- Name: care_action_signature identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care_action_signature ALTER COLUMN identifier SET DEFAULT nextval('public.care_action_signature_identifier_seq'::regclass);


--
-- Name: care_session identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care_session ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_care_session_identifier'::regclass);


--
-- Name: com_port identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.com_port ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_com_port_identifier'::regclass);


--
-- Name: contact identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.contact ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_contact_identifier'::regclass);


--
-- Name: contact_list identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.contact_list ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_contact_list_identifier'::regclass);


--
-- Name: crew identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.crew ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_crew_identifier'::regclass);


--
-- Name: day_night identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.day_night ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_day_night_identifier'::regclass);


--
-- Name: dect_account identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_account ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_dect_account_identifier'::regclass);


--
-- Name: dect_group identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_group ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_dect_group_identifier'::regclass);


--
-- Name: dect_message identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_message ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_dect_message_identifier'::regclass);


--
-- Name: dect_message_queue identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_message_queue ALTER COLUMN identifier SET DEFAULT nextval('public.dect_message_queue_identifier_seq'::regclass);


--
-- Name: default_text identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.default_text ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_default_text_identifier'::regclass);


--
-- Name: dementia identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dementia ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_dementia_identifier'::regclass);


--
-- Name: department identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.department ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_department_identifier'::regclass);


--
-- Name: device identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.device ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_device_identifier'::regclass);


--
-- Name: device_status identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.device_status ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_device_status_identifier'::regclass);


--
-- Name: diary identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.diary ALTER COLUMN identifier SET DEFAULT nextval('public.diary_identifier_seq'::regclass);


--
-- Name: diary_patient identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.diary_patient ALTER COLUMN identifier SET DEFAULT nextval('public.diary_patient_identifier_seq'::regclass);


--
-- Name: door_procedure identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.door_procedure ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_door_procedure_identifier'::regclass);


--
-- Name: email identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.email ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_email_identifier'::regclass);


--
-- Name: employee identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.employee ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_employee_identifier'::regclass);


--
-- Name: engine_action identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_action_identifier'::regclass);


--
-- Name: engine_call identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_identifier'::regclass);


--
-- Name: engine_call_action identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_action_identifier'::regclass);


--
-- Name: engine_call_action_message identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_action_message_identifier'::regclass);


--
-- Name: engine_call_action_message_app identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_app ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_action_message_app_identifier'::regclass);


--
-- Name: engine_call_action_message_dect identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_dect ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_action_message_dect_identifier'::regclass);


--
-- Name: engine_call_action_message_destination_dect identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_dect ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_action_message_destination_dect_identifier'::regclass);


--
-- Name: engine_call_action_message_destination_email identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_email ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_action_message_destination_email_identifie'::regclass);


--
-- Name: engine_call_action_message_destination_employee identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_action_message_destination_employee_identi'::regclass);


--
-- Name: engine_call_action_message_destination_spectralink identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_spectralink ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_action_message_destination_spectralink_ide'::regclass);


--
-- Name: engine_call_action_message_email identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_email ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_action_message_email_identifier'::regclass);


--
-- Name: engine_call_action_message_spectralink identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_spectralink ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_action_message_spectralink_identifier'::regclass);


--
-- Name: engine_call_action_viewpoint_notification identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_viewpoint_notification ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_action_viewpoint_notification_identifier'::regclass);


--
-- Name: engine_call_action_viewpoint_status identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_viewpoint_status ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_call_action_viewpoint_status_identifier'::regclass);


--
-- Name: engine_device_configuration_profile identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_device_configuration_profile ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_device_configuration_profile_identifier'::regclass);


--
-- Name: engine_event identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_event_identifier'::regclass);


--
-- Name: engine_event_access_denied identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_access_denied ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_event_access_denied_identifier'::regclass);


--
-- Name: engine_event_access_entered identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_access_entered ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_event_access_entered_identifier'::regclass);


--
-- Name: engine_event_access_left identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_access_left ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_event_access_left_identifier'::regclass);


--
-- Name: engine_event_badge_provided identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_badge_provided ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_event_badge_provided_identifier'::regclass);


--
-- Name: engine_event_badge_provisioned identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_badge_provisioned ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_event_badge_provisioned_identifier'::regclass);


--
-- Name: engine_event_rf_module_provided identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_rf_module_provided ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_event_rf_module_provided_identifier'::regclass);


--
-- Name: engine_event_viewpoint_state_changed identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_viewpoint_state_changed ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_event_viewpoint_state_changed_identifier'::regclass);


--
-- Name: engine_server_configuration_profile identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_server_configuration_profile ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_engine_server_configuration_profile_identifier'::regclass);


--
-- Name: espa_in_message identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.espa_in_message ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_espa_in_message_identifier'::regclass);


--
-- Name: fcm_account identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.fcm_account ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_fcm_account_identifier'::regclass);


--
-- Name: general_practitioner identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.general_practitioner ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_general_practitioner_identifier'::regclass);


--
-- Name: gps_signal identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.gps_signal ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_gps_signal_identifier'::regclass);


--
-- Name: heartbeat identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.heartbeat ALTER COLUMN identifier SET DEFAULT nextval('public.heartbeat_identifier_seq'::regclass);


--
-- Name: hulp_call identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.hulp_call ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_hulp_call_identifier'::regclass);


--
-- Name: image identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.image ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_image_identifier'::regclass);


--
-- Name: lifeline_message identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.lifeline_message ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_lifeline_message_identifier'::regclass);


--
-- Name: lifeline_message_answer identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.lifeline_message_answer ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_lifeline_message_answer_identifier'::regclass);


--
-- Name: lifeline_message_button identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.lifeline_message_button ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_lifeline_message_button_identifier'::regclass);


--
-- Name: locality identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.locality ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_locality_identifier'::regclass);


--
-- Name: location identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_location_identifier'::regclass);


--
-- Name: location serial; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location ALTER COLUMN serial SET DEFAULT nextval('public.sequence_location_identifier'::regclass);


--
-- Name: location_call identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call ALTER COLUMN identifier SET DEFAULT nextval('public.location_call_identifier_seq'::regclass);


--
-- Name: location_call_callback identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_callback ALTER COLUMN identifier SET DEFAULT nextval('public.location_call_callback_identifier_seq'::regclass);


--
-- Name: location_call_employee_presence identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_employee_presence ALTER COLUMN identifier SET DEFAULT nextval('public.location_call_employee_presence_identifier_seq'::regclass);


--
-- Name: location_call_patient_in_location identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_patient_in_location ALTER COLUMN identifier SET DEFAULT nextval('public.location_call_patient_in_location_identifier_seq'::regclass);


--
-- Name: location_call_state_change identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_state_change ALTER COLUMN identifier SET DEFAULT nextval('public.location_call_state_change_identifier_seq'::regclass);


--
-- Name: log identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_log_identifier'::regclass);


--
-- Name: log_care identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_care ALTER COLUMN identifier SET DEFAULT nextval('public.log_care_identifier_seq'::regclass);


--
-- Name: log_door identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_door ALTER COLUMN identifier SET DEFAULT nextval('public.log_door_identifier_seq'::regclass);


--
-- Name: log_duty identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_duty ALTER COLUMN identifier SET DEFAULT nextval('public.log_duty_identifier_seq'::regclass);


--
-- Name: log_employee_dect_account identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_employee_dect_account ALTER COLUMN identifier SET DEFAULT nextval('public.log_employee_dect_account_identifier_seq'::regclass);


--
-- Name: log_employee_spectralink_account identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_employee_spectralink_account ALTER COLUMN identifier SET DEFAULT nextval('public.log_employee_spectralink_account_identifier_seq'::regclass);


--
-- Name: log_engine_context_device identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_engine_context_device ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_log_engine_context_device_identifier'::regclass);


--
-- Name: log_engine_context_location identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_engine_context_location ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_log_engine_context_location_identifier'::regclass);


--
-- Name: log_engine_context_patient identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_engine_context_patient ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_log_engine_context_patient_identifier'::regclass);


--
-- Name: log_location_patient identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_location_patient ALTER COLUMN identifier SET DEFAULT nextval('public.log_location_patient_identifier_seq'::regclass);


--
-- Name: log_patient_cas_mode identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_patient_cas_mode ALTER COLUMN identifier SET DEFAULT nextval('public.log_patient_cas_mode_identifier_seq'::regclass);


--
-- Name: log_status identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_status ALTER COLUMN identifier SET DEFAULT nextval('public.log_status_identifier_seq'::regclass);


--
-- Name: management_account identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_account ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_management_account_identifier'::regclass);


--
-- Name: management_department identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_department ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_management_department_identifier'::regclass);


--
-- Name: management_device identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_device ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_management_device_identifier'::regclass);


--
-- Name: management_device_update identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_device_update ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_management_device_update_identifier'::regclass);


--
-- Name: management_room identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_room ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_management_room_identifier'::regclass);


--
-- Name: management_server identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_server ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_management_server_identifier'::regclass);


--
-- Name: management_site identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_site ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_management_site_identifier'::regclass);


--
-- Name: measurement_bloodpressure identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_bloodpressure ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_bloodpressure_identifier_seq'::regclass);


--
-- Name: measurement_bloodsample identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_bloodsample ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_bloodsample_identifier_seq'::regclass);


--
-- Name: measurement_glycemia identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_glycemia ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_glycemia_identifier_seq'::regclass);


--
-- Name: measurement_length identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_length ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_length_identifier_seq'::regclass);


--
-- Name: measurement_morsefallscale identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_morsefallscale ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_morsefallscale_identifier_seq'::regclass);


--
-- Name: measurement_oxygensaturation identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_oxygensaturation ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_oxygensaturation_identifier_seq'::regclass);


--
-- Name: measurement_pulse identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_pulse ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_pulse_identifier_seq'::regclass);


--
-- Name: measurement_signature identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_signature ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_signature_identifier_seq'::regclass);


--
-- Name: measurement_stoolrecord identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_stoolrecord ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_stoolrecord_identifier_seq'::regclass);


--
-- Name: measurement_temperature identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_temperature ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_temperature_identifier_seq'::regclass);


--
-- Name: measurement_urineoutput identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_urineoutput ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_urineoutput_identifier_seq'::regclass);


--
-- Name: measurement_visualpainscale identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_visualpainscale ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_visualpainscale_identifier_seq'::regclass);


--
-- Name: measurement_waterlowscale identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_waterlowscale ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_waterlowscale_identifier_seq'::regclass);


--
-- Name: measurement_weight identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_weight ALTER COLUMN identifier SET DEFAULT nextval('public.measurement_weight_identifier_seq'::regclass);


--
-- Name: medication identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_medication_identifier'::regclass);


--
-- Name: medication_form identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_form ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_medication_form_identifier'::regclass);


--
-- Name: medication_signature identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_signature ALTER COLUMN identifier SET DEFAULT nextval('public.medication_signature_identifier_seq'::regclass);


--
-- Name: medication_signature_detail identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_signature_detail ALTER COLUMN identifier SET DEFAULT nextval('public.medication_signature_detail_identifier_seq'::regclass);


--
-- Name: medication_type identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_type ALTER COLUMN identifier SET DEFAULT nextval('public.medication_type_identifier_seq'::regclass);


--
-- Name: message identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_message_identifier'::regclass);


--
-- Name: mis_connection identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_identifier_seq'::regclass);


--
-- Name: mis_connection_care_action identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_care_action ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_care_action_identifier_seq'::regclass);


--
-- Name: mis_connection_care_action_signature identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_care_action_signature ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_care_action_signature_identifier_seq'::regclass);


--
-- Name: mis_connection_department identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_department ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_department_identifier_seq'::regclass);


--
-- Name: mis_connection_diary identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_diary ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_diary_identifier_seq'::regclass);


--
-- Name: mis_connection_employee identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_employee ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_employee_identifier_seq'::regclass);


--
-- Name: mis_connection_location identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_location ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_location_identifier_seq'::regclass);


--
-- Name: mis_connection_measurement_signature identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_measurement_signature ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_measurement_signature_identifier_seq'::regclass);


--
-- Name: mis_connection_medication_signature identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_medication_signature ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_medication_signature_identifier_seq'::regclass);


--
-- Name: mis_connection_medication_type identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_medication_type ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_medication_type_identifier_seq'::regclass);


--
-- Name: mis_connection_patient identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_patient ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_patient_identifier_seq'::regclass);


--
-- Name: mis_connection_planned_care_action identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_care_action ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_planned_care_action_identifier_seq'::regclass);


--
-- Name: mis_connection_planned_measurement identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_measurement ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_planned_measurement_identifier_seq'::regclass);


--
-- Name: mis_connection_planned_medication identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_medication ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_planned_medication_identifier_seq'::regclass);


--
-- Name: mis_connection_section identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_section ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_section_identifier_seq'::regclass);


--
-- Name: mis_connection_site identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_site ALTER COLUMN identifier SET DEFAULT nextval('public.mis_connection_site_identifier_seq'::regclass);


--
-- Name: monitor_status_device identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.monitor_status_device ALTER COLUMN identifier SET DEFAULT nextval('public.monitor_status_device_identifier_seq'::regclass);


--
-- Name: monitor_status_server identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.monitor_status_server ALTER COLUMN identifier SET DEFAULT nextval('public.monitor_status_server_identifier_seq'::regclass);


--
-- Name: notification identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.notification ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_notification_identifier'::regclass);


--
-- Name: organization identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.organization ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_organization_identifier'::regclass);


--
-- Name: patient identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_patient_identifier'::regclass);


--
-- Name: patient_administration_information identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_administration_information ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_patient_administration_information_identifier'::regclass);


--
-- Name: patient_contact identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_contact ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_patient_contact_identifier'::regclass);


--
-- Name: patient_group identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_group ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_patient_group_identifier'::regclass);


--
-- Name: patient_identification identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_identification ALTER COLUMN identifier SET DEFAULT nextval('public.patient_identification_identifier_seq'::regclass);


--
-- Name: patient_info identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_info ALTER COLUMN identifier SET DEFAULT nextval('public.patient_info_identifier_seq'::regclass);


--
-- Name: patient_medical_information identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_medical_information ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_patient_medical_information_identifier'::regclass);


--
-- Name: patient_session identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_session ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_patient_session_identifier'::regclass);


--
-- Name: patient_social_information identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_social_information ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_patient_social_information_identifier'::regclass);


--
-- Name: period identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.period ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_period_identifier'::regclass);


--
-- Name: picture identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.picture ALTER COLUMN identifier SET DEFAULT nextval('public.picture_identifier_seq'::regclass);


--
-- Name: planned_care_action identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_care_action ALTER COLUMN identifier SET DEFAULT nextval('public.planned_care_action_identifier_seq'::regclass);


--
-- Name: planned_measurement identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_measurement ALTER COLUMN identifier SET DEFAULT nextval('public.planned_measurement_identifier_seq'::regclass);


--
-- Name: planned_medication identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_medication ALTER COLUMN identifier SET DEFAULT nextval('public.planned_medication_identifier_seq'::regclass);


--
-- Name: planned_medication_detail identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_medication_detail ALTER COLUMN identifier SET DEFAULT nextval('public.planned_medication_detail_identifier_seq'::regclass);


--
-- Name: possible_service_function identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.possible_service_function ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_possible_service_function_identifier'::regclass);


--
-- Name: possible_work_order identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.possible_work_order ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_possible_work_order_identifier'::regclass);


--
-- Name: possible_work_order_top identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.possible_work_order_top ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_possible_work_order_top_identifier'::regclass);


--
-- Name: predefined_broadcast_call identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.predefined_broadcast_call ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_predefined_broadcast_call_identifier'::regclass);


--
-- Name: process identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.process ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_process_identifier'::regclass);


--
-- Name: process_boot_cycle identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.process_boot_cycle ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_process_boot_cycle_identifier'::regclass);


--
-- Name: radio identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.radio ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_radio_identifier'::regclass);


--
-- Name: remote_alarm identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.remote_alarm ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_remote_alarm_identifier'::regclass);


--
-- Name: rf_module identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.rf_module ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_rf_module_identifier'::regclass);


--
-- Name: role identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.role ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_role_identifier'::regclass);


--
-- Name: room identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.room ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_room_identifier'::regclass);


--
-- Name: section identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.section ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_section_identifier'::regclass);


--
-- Name: service_function identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.service_function ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_service_function_identifier'::regclass);


--
-- Name: setting identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.setting ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_setting_identifier'::regclass);


--
-- Name: shortcut identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.shortcut ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_shortcut_identifier'::regclass);


--
-- Name: shortcut_role identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.shortcut_role ALTER COLUMN identifier SET DEFAULT nextval('public.shortcut_role_identifier_seq'::regclass);


--
-- Name: site identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.site ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_site_identifier'::regclass);


--
-- Name: spectralink_account identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_account ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_spectralink_account_identifier'::regclass);


--
-- Name: spectralink_group identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_group ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_spectralink_group_identifier'::regclass);


--
-- Name: spectralink_message identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_spectralink_message_identifier'::regclass);


--
-- Name: spectralink_message_queue identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message_queue ALTER COLUMN identifier SET DEFAULT nextval('public.spectralink_message_queue_identifier_seq'::regclass);


--
-- Name: spectralink_message_reference identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message_reference ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_spectralink_message_reference_identifier'::regclass);


--
-- Name: state_cause identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_cause ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_state_cause_identifier'::regclass);


--
-- Name: state_cause_template identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_cause_template ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_state_cause_template_identifier'::regclass);


--
-- Name: state_machine_change_action_config identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_machine_change_action_config ALTER COLUMN identifier SET DEFAULT nextval('public.state_machine_change_action_config_identifier_seq'::regclass);


--
-- Name: state_machine_state identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_machine_state ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_state_machine_state_identifier'::regclass);


--
-- Name: status_app identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.status_app ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_status_app_identifier'::regclass);


--
-- Name: status_dect identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.status_dect ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_status_dect_identifier'::regclass);


--
-- Name: string identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.string ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_string_identifier'::regclass);


--
-- Name: sui_patient_info identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_patient_info ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_sui_patient_info_identifier'::regclass);


--
-- Name: sui_status identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_sui_status_identifier'::regclass);


--
-- Name: sui_status_trigger identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status_trigger ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_sui_status_trigger_identifier'::regclass);


--
-- Name: supplement identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.supplement ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_supplement_identifier'::regclass);


--
-- Name: supplement_registration identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.supplement_registration ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_supplement_registration_identifier'::regclass);


--
-- Name: task_type identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.task_type ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_task_type_identifier'::regclass);


--
-- Name: translation identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.translation ALTER COLUMN identifier SET DEFAULT nextval('public.translation_identifier_seq'::regclass);


--
-- Name: trusted_device identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.trusted_device ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_trusted_device_identifier'::regclass);


--
-- Name: ui_access identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.ui_access ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_ui_access_identifier'::regclass);


--
-- Name: version_history identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.version_history ALTER COLUMN identifier SET DEFAULT nextval('public.version_history_identifier_seq'::regclass);


--
-- Name: webrtc_account identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.webrtc_account ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_webrtc_account_identifier'::regclass);


--
-- Name: wifi_network identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.wifi_network ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_wifi_network_identifier'::regclass);


--
-- Name: work_order identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.work_order ALTER COLUMN identifier SET DEFAULT nextval('public.sequence_work_order_identifier'::regclass);


--
-- Name: yunction_log identifier; Type: DEFAULT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.yunction_log ALTER COLUMN identifier SET DEFAULT nextval('public.yunction_log_identifier_seq'::regclass);


--
-- Name: access_control_access_door_group access_control_access_door_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_control_access_door_group
    ADD CONSTRAINT access_control_access_door_group_pkey PRIMARY KEY (access_control_identifier, access_door_group_identifier);


--
-- Name: access_door_access_control access_door_access_control_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door_access_control
    ADD CONSTRAINT access_door_access_control_pkey PRIMARY KEY (access_door_identifier, access_control_identifier);


--
-- Name: access_door_access_group access_door_access_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door_access_group
    ADD CONSTRAINT access_door_access_group_pkey PRIMARY KEY (access_door_identifier, access_group_identifier);


--
-- Name: access_door_door_procedure access_door_door_procedure_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door_door_procedure
    ADD CONSTRAINT access_door_door_procedure_pkey PRIMARY KEY (access_door_identifier, door_procedure_identifier);


--
-- Name: access_door_group_access_group access_door_group_access_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door_group_access_group
    ADD CONSTRAINT access_door_group_access_group_pkey PRIMARY KEY (access_door_group_identifier, access_group_identifier);


--
-- Name: access_door access_door_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door
    ADD CONSTRAINT access_door_pkey PRIMARY KEY (identifier);


--
-- Name: access_group_badge access_group_badge_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_group_badge
    ADD CONSTRAINT access_group_badge_pkey PRIMARY KEY (access_group_identifier, badge_identifier);


--
-- Name: access_group access_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_group
    ADD CONSTRAINT access_group_pkey PRIMARY KEY (identifier);


--
-- Name: action_config_dect_to_crews_of_location action_config_dect_to_crews_of_location_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_crews_of_location
    ADD CONSTRAINT action_config_dect_to_crews_of_location_pkey PRIMARY KEY (identifier);


--
-- Name: action_config_dect_to_crews_of_location_role action_config_dect_to_crews_of_location_role_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_crews_of_location_role
    ADD CONSTRAINT action_config_dect_to_crews_of_location_role_pkey PRIMARY KEY (identifier);


--
-- Name: action_config_dect_to_group_dect_group action_config_dect_to_group_dect_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_group_dect_group
    ADD CONSTRAINT action_config_dect_to_group_dect_group_pkey PRIMARY KEY (identifier);


--
-- Name: action_config_dect_to_group action_config_dect_to_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_group
    ADD CONSTRAINT action_config_dect_to_group_pkey PRIMARY KEY (identifier);


--
-- Name: action_config action_config_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config
    ADD CONSTRAINT action_config_pkey PRIMARY KEY (identifier);


--
-- Name: action_config_spectralink_to_crews_of_location action_config_spectralink_to_crews_of_location_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_crews_of_location
    ADD CONSTRAINT action_config_spectralink_to_crews_of_location_pkey PRIMARY KEY (identifier);


--
-- Name: action_config_spectralink_to_crews_of_location_role action_config_spectralink_to_crews_of_location_role_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_crews_of_location_role
    ADD CONSTRAINT action_config_spectralink_to_crews_of_location_role_pkey PRIMARY KEY (identifier);


--
-- Name: action_config_spectralink_to_group action_config_spectralink_to_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_group
    ADD CONSTRAINT action_config_spectralink_to_group_pkey PRIMARY KEY (identifier);


--
-- Name: action_config_spectralink_to_group_spectralink_group action_config_spectralink_to_group_spectralink_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_group_spectralink_group
    ADD CONSTRAINT action_config_spectralink_to_group_spectralink_group_pkey PRIMARY KEY (identifier);


--
-- Name: activity activity_crew_identifier_employee_identifier_role_identifie_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.activity
    ADD CONSTRAINT activity_crew_identifier_employee_identifier_role_identifie_key UNIQUE (crew_identifier, employee_identifier, role_identifier);


--
-- Name: activity activity_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.activity
    ADD CONSTRAINT activity_pkey PRIMARY KEY (identifier);


--
-- Name: address address_contact_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.address
    ADD CONSTRAINT address_contact_identifier_key UNIQUE (contact_identifier);


--
-- Name: address address_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.address
    ADD CONSTRAINT address_pkey PRIMARY KEY (identifier);


--
-- Name: administration_contact administration_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.administration_contact
    ADD CONSTRAINT administration_contact_pkey PRIMARY KEY (identifier);


--
-- Name: allergy allergy_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.allergy
    ADD CONSTRAINT allergy_name_key UNIQUE (name);


--
-- Name: allergy allergy_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.allergy
    ADD CONSTRAINT allergy_pkey PRIMARY KEY (identifier);


--
-- Name: api_login api_login_device_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login
    ADD CONSTRAINT api_login_device_identifier_key UNIQUE (device_identifier);


--
-- Name: api_login api_login_employee_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login
    ADD CONSTRAINT api_login_employee_identifier_key UNIQUE (employee_identifier);


--
-- Name: api_login api_login_login_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login
    ADD CONSTRAINT api_login_login_identifier_key UNIQUE (login_identifier);


--
-- Name: api_login api_login_management_account_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login
    ADD CONSTRAINT api_login_management_account_identifier_key UNIQUE (management_account_identifier);


--
-- Name: api_login api_login_patient_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login
    ADD CONSTRAINT api_login_patient_identifier_key UNIQUE (patient_identifier);


--
-- Name: api_login api_login_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login
    ADD CONSTRAINT api_login_pkey PRIMARY KEY (identifier);


--
-- Name: api_login api_login_process_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login
    ADD CONSTRAINT api_login_process_identifier_key UNIQUE (process_identifier);


--
-- Name: api_token api_token_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_token
    ADD CONSTRAINT api_token_pkey PRIMARY KEY (identifier);


--
-- Name: api_token api_token_token_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_token
    ADD CONSTRAINT api_token_token_key UNIQUE (token);


--
-- Name: app_message app_message_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.app_message
    ADD CONSTRAINT app_message_pkey PRIMARY KEY (identifier);


--
-- Name: application_global application_global_device_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_global
    ADD CONSTRAINT application_global_device_identifier_key UNIQUE (device_identifier);


--
-- Name: application_global application_global_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_global
    ADD CONSTRAINT application_global_pkey PRIMARY KEY (identifier);


--
-- Name: application_svp_crews application_svp_crews_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_svp_crews
    ADD CONSTRAINT application_svp_crews_pkey PRIMARY KEY (application_svp_identifier, crew_identifier);


--
-- Name: application_svp application_svp_device_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_svp
    ADD CONSTRAINT application_svp_device_identifier_key UNIQUE (device_identifier);


--
-- Name: application_svp application_svp_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_svp
    ADD CONSTRAINT application_svp_pkey PRIMARY KEY (identifier);


--
-- Name: application_svp_status application_svp_status_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_svp_status
    ADD CONSTRAINT application_svp_status_pkey PRIMARY KEY (application_svp_identifier, status_identifier);


--
-- Name: appointment appointment_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.appointment
    ADD CONSTRAINT appointment_pkey PRIMARY KEY (identifier);


--
-- Name: badge badge_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.badge
    ADD CONSTRAINT badge_pkey PRIMARY KEY (identifier);


--
-- Name: blood_type blood_type_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.blood_type
    ADD CONSTRAINT blood_type_name_key UNIQUE (name);


--
-- Name: blood_type blood_type_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.blood_type
    ADD CONSTRAINT blood_type_pkey PRIMARY KEY (identifier);


--
-- Name: bluetooth_device bluetooth_device_code_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.bluetooth_device
    ADD CONSTRAINT bluetooth_device_code_key UNIQUE (code);


--
-- Name: bluetooth_device bluetooth_device_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.bluetooth_device
    ADD CONSTRAINT bluetooth_device_pkey PRIMARY KEY (identifier);


--
-- Name: broadcast_call_broadcast_call_group broadcast_call_broadcast_call_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.broadcast_call_broadcast_call_group
    ADD CONSTRAINT broadcast_call_broadcast_call_group_pkey PRIMARY KEY (broadcast_call_identifier, broadcast_call_group_identifier);


--
-- Name: broadcast_call_group_device broadcast_call_group_device_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.broadcast_call_group_device
    ADD CONSTRAINT broadcast_call_group_device_pkey PRIMARY KEY (broadcast_call_group_identifier, device_identifier);


--
-- Name: broadcast_call_group broadcast_call_group_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.broadcast_call_group
    ADD CONSTRAINT broadcast_call_group_name_key UNIQUE (name);


--
-- Name: broadcast_call_group broadcast_call_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.broadcast_call_group
    ADD CONSTRAINT broadcast_call_group_pkey PRIMARY KEY (identifier);


--
-- Name: broadcast_call broadcast_call_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.broadcast_call
    ADD CONSTRAINT broadcast_call_pkey PRIMARY KEY (identifier);


--
-- Name: call_reason_category call_reason_category_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.call_reason_category
    ADD CONSTRAINT call_reason_category_pkey PRIMARY KEY (identifier);


--
-- Name: call_reason call_reason_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.call_reason
    ADD CONSTRAINT call_reason_pkey PRIMARY KEY (identifier);


--
-- Name: callback_queue callback_queue_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.callback_queue
    ADD CONSTRAINT callback_queue_pkey PRIMARY KEY (identifier);


--
-- Name: camera camera_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.camera
    ADD CONSTRAINT camera_pkey PRIMARY KEY (identifier);


--
-- Name: care_action care_action_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care_action
    ADD CONSTRAINT care_action_pkey PRIMARY KEY (identifier);


--
-- Name: care care_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care
    ADD CONSTRAINT care_pkey PRIMARY KEY (identifier);


--
-- Name: care_session care_session_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care_session
    ADD CONSTRAINT care_session_pkey PRIMARY KEY (identifier);


--
-- Name: cas_report cas_report_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.cas_report
    ADD CONSTRAINT cas_report_pkey PRIMARY KEY (key);


--
-- Name: cas_session cas_session_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.cas_session
    ADD CONSTRAINT cas_session_pkey PRIMARY KEY (identifier);


--
-- Name: com_port com_port_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.com_port
    ADD CONSTRAINT com_port_pkey PRIMARY KEY (identifier);


--
-- Name: com_port com_port_port_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.com_port
    ADD CONSTRAINT com_port_port_key UNIQUE (port);


--
-- Name: contact_list contact_list_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.contact_list
    ADD CONSTRAINT contact_list_pkey PRIMARY KEY (identifier);


--
-- Name: contact contact_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.contact
    ADD CONSTRAINT contact_pkey PRIMARY KEY (identifier);


--
-- Name: crew_location crew_location_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.crew_location
    ADD CONSTRAINT crew_location_pkey PRIMARY KEY (crew_identifier, location_identifier);


--
-- Name: crew crew_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.crew
    ADD CONSTRAINT crew_pkey PRIMARY KEY (identifier);


--
-- Name: day_night day_night_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.day_night
    ADD CONSTRAINT day_night_pkey PRIMARY KEY (identifier);


--
-- Name: employee dect_account_identifier_unique; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.employee
    ADD CONSTRAINT dect_account_identifier_unique UNIQUE (dect_account_identifier);


--
-- Name: dect_account dect_account_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_account
    ADD CONSTRAINT dect_account_pkey PRIMARY KEY (identifier);


--
-- Name: dect_group_dect_account dect_group_dect_account_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_group_dect_account
    ADD CONSTRAINT dect_group_dect_account_pkey PRIMARY KEY (dect_group_identifier, dect_account_identifier);


--
-- Name: dect_group_location dect_group_location_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_group_location
    ADD CONSTRAINT dect_group_location_pkey PRIMARY KEY (dect_group_identifier, location_identifier);


--
-- Name: dect_group dect_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_group
    ADD CONSTRAINT dect_group_pkey PRIMARY KEY (identifier);


--
-- Name: dect_message dect_message_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_message
    ADD CONSTRAINT dect_message_pkey PRIMARY KEY (identifier);


--
-- Name: dect_message_queue dect_message_queue_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_message_queue
    ADD CONSTRAINT dect_message_queue_pkey PRIMARY KEY (identifier);


--
-- Name: default_text default_text_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.default_text
    ADD CONSTRAINT default_text_pkey PRIMARY KEY (identifier);


--
-- Name: dementia dementia_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dementia
    ADD CONSTRAINT dementia_name_key UNIQUE (name);


--
-- Name: dementia dementia_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dementia
    ADD CONSTRAINT dementia_pkey PRIMARY KEY (identifier);


--
-- Name: department department_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.department
    ADD CONSTRAINT department_pkey PRIMARY KEY (identifier);


--
-- Name: device device_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.device
    ADD CONSTRAINT device_pkey PRIMARY KEY (identifier);


--
-- Name: device_status device_status_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.device_status
    ADD CONSTRAINT device_status_name_key UNIQUE (name);


--
-- Name: device_status device_status_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.device_status
    ADD CONSTRAINT device_status_pkey PRIMARY KEY (identifier);


--
-- Name: diary_patient diary_patient_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.diary_patient
    ADD CONSTRAINT diary_patient_pkey PRIMARY KEY (identifier);


--
-- Name: diary diary_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.diary
    ADD CONSTRAINT diary_pkey PRIMARY KEY (identifier);


--
-- Name: diary_read diary_read_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.diary_read
    ADD CONSTRAINT diary_read_pkey PRIMARY KEY (employee_identifier, patient_identifier);


--
-- Name: door_procedure door_procedure_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.door_procedure
    ADD CONSTRAINT door_procedure_pkey PRIMARY KEY (identifier);


--
-- Name: email email_crew_identifier_address_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.email
    ADD CONSTRAINT email_crew_identifier_address_key UNIQUE (crew_identifier, address);


--
-- Name: email email_employee_identifier_address_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.email
    ADD CONSTRAINT email_employee_identifier_address_key UNIQUE (employee_identifier, address);


--
-- Name: email email_patient_identifier_address_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.email
    ADD CONSTRAINT email_patient_identifier_address_key UNIQUE (patient_identifier, address);


--
-- Name: email email_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.email
    ADD CONSTRAINT email_pkey PRIMARY KEY (identifier);


--
-- Name: email email_role_identifier_address_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.email
    ADD CONSTRAINT email_role_identifier_address_key UNIQUE (role_identifier, address);


--
-- Name: employee_authorization employee_authorizaton_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.employee_authorization
    ADD CONSTRAINT employee_authorizaton_pkey PRIMARY KEY (employee_identifier, authorization_type);


--
-- Name: employee employee_fcm_account_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.employee
    ADD CONSTRAINT employee_fcm_account_identifier_key UNIQUE (fcm_account_identifier);


--
-- Name: employee employee_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.employee
    ADD CONSTRAINT employee_pkey PRIMARY KEY (identifier);


--
-- Name: engine_action engine_action_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call_action engine_call_action_engine_call_action_message_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action
    ADD CONSTRAINT engine_call_action_engine_call_action_message_identifier_key UNIQUE (engine_call_action_message_identifier);


--
-- Name: engine_call_action engine_call_action_engine_call_action_viewpoint_notificatio_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action
    ADD CONSTRAINT engine_call_action_engine_call_action_viewpoint_notificatio_key UNIQUE (engine_call_action_viewpoint_notification_identifier);


--
-- Name: engine_call_action engine_call_action_engine_call_action_viewpoint_status_iden_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action
    ADD CONSTRAINT engine_call_action_engine_call_action_viewpoint_status_iden_key UNIQUE (engine_call_action_viewpoint_status_identifier);


--
-- Name: engine_call_action_message_app engine_call_action_message_app_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_app
    ADD CONSTRAINT engine_call_action_message_app_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_de_settings_spectralink_identifi_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_de_settings_spectralink_identifi_key UNIQUE (settings_spectralink_identifier);


--
-- Name: engine_call_action_message_dect engine_call_action_message_dect_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_dect
    ADD CONSTRAINT engine_call_action_message_dect_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_destin_settings_email_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_destin_settings_email_identifier_key UNIQUE (settings_email_identifier);


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_destina_settings_dect_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_destina_settings_dect_identifier_key UNIQUE (settings_dect_identifier);


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_destinat_settings_app_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_destinat_settings_app_identifier_key UNIQUE (settings_app_identifier);


--
-- Name: engine_call_action_message_destination_email engine_call_action_message_destination__settings_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_email
    ADD CONSTRAINT engine_call_action_message_destination__settings_identifier_key UNIQUE (settings_identifier);


--
-- Name: engine_call_action_message_destination_dect engine_call_action_message_destination_dect_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_dect
    ADD CONSTRAINT engine_call_action_message_destination_dect_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call_action_message_destination_email engine_call_action_message_destination_email_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_email
    ADD CONSTRAINT engine_call_action_message_destination_email_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_destination_employee_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_destination_employee_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call_action_message_destination_employee_role engine_call_action_message_destination_employee_role_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee_role
    ADD CONSTRAINT engine_call_action_message_destination_employee_role_pkey PRIMARY KEY (engine_call_action_message_destination_employee_identifier, role_identifier);


--
-- Name: engine_call_action_message_destination_dect engine_call_action_message_destination_settings_identifier_key1; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_dect
    ADD CONSTRAINT engine_call_action_message_destination_settings_identifier_key1 UNIQUE (settings_identifier);


--
-- Name: engine_call_action_message_destination_spectralink engine_call_action_message_destination_settings_identifier_key2; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_spectralink
    ADD CONSTRAINT engine_call_action_message_destination_settings_identifier_key2 UNIQUE (settings_identifier);


--
-- Name: engine_call_action_message_destination_spectralink engine_call_action_message_destination_spectralink_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_spectralink
    ADD CONSTRAINT engine_call_action_message_destination_spectralink_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call_action_message_email engine_call_action_message_email_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_email
    ADD CONSTRAINT engine_call_action_message_email_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call_action_message engine_call_action_message_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message
    ADD CONSTRAINT engine_call_action_message_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call_action_message_spectralink engine_call_action_message_spectralink_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_spectralink
    ADD CONSTRAINT engine_call_action_message_spectralink_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call_action engine_call_action_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action
    ADD CONSTRAINT engine_call_action_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call_action_viewpoint_notification engine_call_action_viewpoint_notifi_notification_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_viewpoint_notification
    ADD CONSTRAINT engine_call_action_viewpoint_notifi_notification_identifier_key UNIQUE (notification_identifier);


--
-- Name: engine_call_action_viewpoint_notification engine_call_action_viewpoint_notification_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_viewpoint_notification
    ADD CONSTRAINT engine_call_action_viewpoint_notification_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call_action_viewpoint_status engine_call_action_viewpoint_status_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_viewpoint_status
    ADD CONSTRAINT engine_call_action_viewpoint_status_pkey PRIMARY KEY (identifier);


--
-- Name: engine_call engine_call_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call
    ADD CONSTRAINT engine_call_pkey PRIMARY KEY (identifier);


--
-- Name: engine_device_configuration_profile engine_device_configuration_profile_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_device_configuration_profile
    ADD CONSTRAINT engine_device_configuration_profile_name_key UNIQUE (name);


--
-- Name: engine_device_configuration_profile engine_device_configuration_profile_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_device_configuration_profile
    ADD CONSTRAINT engine_device_configuration_profile_pkey PRIMARY KEY (identifier);


--
-- Name: engine_event engine_event_access_denied_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_access_denied_identifier_key UNIQUE (access_denied_identifier);


--
-- Name: engine_event_access_denied engine_event_access_denied_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_access_denied
    ADD CONSTRAINT engine_event_access_denied_pkey PRIMARY KEY (identifier);


--
-- Name: engine_event engine_event_access_entered_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_access_entered_identifier_key UNIQUE (access_entered_identifier);


--
-- Name: engine_event_access_entered engine_event_access_entered_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_access_entered
    ADD CONSTRAINT engine_event_access_entered_pkey PRIMARY KEY (identifier);


--
-- Name: engine_event engine_event_access_left_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_access_left_identifier_key UNIQUE (access_left_identifier);


--
-- Name: engine_event_access_left engine_event_access_left_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_access_left
    ADD CONSTRAINT engine_event_access_left_pkey PRIMARY KEY (identifier);


--
-- Name: engine_event engine_event_badge_provided_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_badge_provided_identifier_key UNIQUE (badge_provided_identifier);


--
-- Name: engine_event_badge_provided engine_event_badge_provided_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_badge_provided
    ADD CONSTRAINT engine_event_badge_provided_pkey PRIMARY KEY (identifier);


--
-- Name: engine_event engine_event_badge_provisioned_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_badge_provisioned_identifier_key UNIQUE (badge_provisioned_identifier);


--
-- Name: engine_event_badge_provisioned engine_event_badge_provisioned_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_badge_provisioned
    ADD CONSTRAINT engine_event_badge_provisioned_pkey PRIMARY KEY (identifier);


--
-- Name: engine_event engine_event_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_pkey PRIMARY KEY (identifier);


--
-- Name: engine_event engine_event_rf_module_provided_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_rf_module_provided_identifier_key UNIQUE (rf_module_provided_identifier);


--
-- Name: engine_event_rf_module_provided engine_event_rf_module_provided_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_rf_module_provided
    ADD CONSTRAINT engine_event_rf_module_provided_pkey PRIMARY KEY (identifier);


--
-- Name: engine_event engine_event_viewpoint_state_changed_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_viewpoint_state_changed_identifier_key UNIQUE (viewpoint_state_changed_identifier);


--
-- Name: engine_event_viewpoint_state_changed engine_event_viewpoint_state_changed_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_viewpoint_state_changed
    ADD CONSTRAINT engine_event_viewpoint_state_changed_pkey PRIMARY KEY (identifier);


--
-- Name: engine_server_configuration_profile engine_server_configuration_profile_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_server_configuration_profile
    ADD CONSTRAINT engine_server_configuration_profile_name_key UNIQUE (name);


--
-- Name: engine_server_configuration_profile engine_server_configuration_profile_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_server_configuration_profile
    ADD CONSTRAINT engine_server_configuration_profile_pkey PRIMARY KEY (identifier);


--
-- Name: espa_in_message espa_in_message_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.espa_in_message
    ADD CONSTRAINT espa_in_message_pkey PRIMARY KEY (identifier);


--
-- Name: fcm_account fcm_account_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.fcm_account
    ADD CONSTRAINT fcm_account_pkey PRIMARY KEY (identifier);


--
-- Name: flyway_schema_history flyway_schema_history_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.flyway_schema_history
    ADD CONSTRAINT flyway_schema_history_pkey PRIMARY KEY (installed_rank);


--
-- Name: general_practitioner general_practitioner_administration_contact_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.general_practitioner
    ADD CONSTRAINT general_practitioner_administration_contact_identifier_key UNIQUE (administration_contact_identifier);


--
-- Name: general_practitioner general_practitioner_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.general_practitioner
    ADD CONSTRAINT general_practitioner_pkey PRIMARY KEY (identifier);


--
-- Name: gps_signal gps_signal_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.gps_signal
    ADD CONSTRAINT gps_signal_pkey PRIMARY KEY (identifier);


--
-- Name: gps_signal gps_signal_remote_alarm_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.gps_signal
    ADD CONSTRAINT gps_signal_remote_alarm_identifier_key UNIQUE (remote_alarm_identifier);


--
-- Name: heartbeat heartbeat_mac_address_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.heartbeat
    ADD CONSTRAINT heartbeat_mac_address_key UNIQUE (mac_address);


--
-- Name: heartbeat heartbeat_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.heartbeat
    ADD CONSTRAINT heartbeat_pkey PRIMARY KEY (identifier);


--
-- Name: hulp_call hulp_call_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.hulp_call
    ADD CONSTRAINT hulp_call_pkey PRIMARY KEY (identifier);


--
-- Name: image image_code_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.image
    ADD CONSTRAINT image_code_key UNIQUE (code);


--
-- Name: image image_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.image
    ADD CONSTRAINT image_pkey PRIMARY KEY (identifier);


--
-- Name: image image_url_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.image
    ADD CONSTRAINT image_url_key UNIQUE (url);


--
-- Name: lifeline_message_answer lifeline_message_answer_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.lifeline_message_answer
    ADD CONSTRAINT lifeline_message_answer_pkey PRIMARY KEY (identifier);


--
-- Name: lifeline_message_button lifeline_message_button_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.lifeline_message_button
    ADD CONSTRAINT lifeline_message_button_pkey PRIMARY KEY (identifier);


--
-- Name: lifeline_message lifeline_message_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.lifeline_message
    ADD CONSTRAINT lifeline_message_pkey PRIMARY KEY (identifier);


--
-- Name: locality locality_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.locality
    ADD CONSTRAINT locality_pkey PRIMARY KEY (identifier);


--
-- Name: location_call_callback location_call_callback_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_callback
    ADD CONSTRAINT location_call_callback_pkey PRIMARY KEY (identifier);


--
-- Name: location_call_employee_presence location_call_employee_presence_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_employee_presence
    ADD CONSTRAINT location_call_employee_presence_pkey PRIMARY KEY (identifier);


--
-- Name: location_call_patient_in_location location_call_patient_in_location_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_patient_in_location
    ADD CONSTRAINT location_call_patient_in_location_pkey PRIMARY KEY (identifier);


--
-- Name: location_call location_call_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call
    ADD CONSTRAINT location_call_pkey PRIMARY KEY (identifier);


--
-- Name: location_call_state_change location_call_state_change_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_state_change
    ADD CONSTRAINT location_call_state_change_pkey PRIMARY KEY (identifier);


--
-- Name: location location_care_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location
    ADD CONSTRAINT location_care_identifier_key UNIQUE (care_identifier);


--
-- Name: location_gateway_device_gateway location_gateway_device_gateway_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_gateway_device_gateway
    ADD CONSTRAINT location_gateway_device_gateway_pkey PRIMARY KEY (location_identifier, device_identifier);


--
-- Name: location_patient location_patient_patient_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_patient
    ADD CONSTRAINT location_patient_patient_identifier_key UNIQUE (patient_identifier);


--
-- Name: location_patient location_patient_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_patient
    ADD CONSTRAINT location_patient_pkey PRIMARY KEY (location_identifier, patient_identifier);


--
-- Name: location location_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location
    ADD CONSTRAINT location_pkey PRIMARY KEY (identifier);


--
-- Name: log_care log_care_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_care
    ADD CONSTRAINT log_care_pkey PRIMARY KEY (identifier);


--
-- Name: log_door log_door_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_door
    ADD CONSTRAINT log_door_pkey PRIMARY KEY (identifier);


--
-- Name: log_duty log_duty_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_duty
    ADD CONSTRAINT log_duty_pkey PRIMARY KEY (identifier);


--
-- Name: log_employee_dect_account log_employee_dect_account_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_employee_dect_account
    ADD CONSTRAINT log_employee_dect_account_pkey PRIMARY KEY (identifier);


--
-- Name: log_employee_spectralink_account log_employee_spectralink_account_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_employee_spectralink_account
    ADD CONSTRAINT log_employee_spectralink_account_pkey PRIMARY KEY (identifier);


--
-- Name: log_engine_context_device log_engine_context_device_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_engine_context_device
    ADD CONSTRAINT log_engine_context_device_pkey PRIMARY KEY (identifier);


--
-- Name: log_engine_context_device log_engine_context_device_tag_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_engine_context_device
    ADD CONSTRAINT log_engine_context_device_tag_key UNIQUE (tag);


--
-- Name: log_engine_context_location log_engine_context_location_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_engine_context_location
    ADD CONSTRAINT log_engine_context_location_pkey PRIMARY KEY (identifier);


--
-- Name: log_engine_context_location log_engine_context_location_tag_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_engine_context_location
    ADD CONSTRAINT log_engine_context_location_tag_key UNIQUE (tag);


--
-- Name: log_engine_context_patient log_engine_context_patient_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_engine_context_patient
    ADD CONSTRAINT log_engine_context_patient_pkey PRIMARY KEY (identifier);


--
-- Name: log_engine_context_patient log_engine_context_patient_tag_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_engine_context_patient
    ADD CONSTRAINT log_engine_context_patient_tag_key UNIQUE (tag);


--
-- Name: log_location_patient log_location_patient_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_location_patient
    ADD CONSTRAINT log_location_patient_pkey PRIMARY KEY (identifier);


--
-- Name: log_patient_cas_mode log_patient_cas_mode_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_patient_cas_mode
    ADD CONSTRAINT log_patient_cas_mode_pkey PRIMARY KEY (identifier);


--
-- Name: log log_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log
    ADD CONSTRAINT log_pkey PRIMARY KEY (identifier);


--
-- Name: log_status log_status_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_status
    ADD CONSTRAINT log_status_pkey PRIMARY KEY (identifier);


--
-- Name: management_account_management_site management_account_management_site_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_account_management_site
    ADD CONSTRAINT management_account_management_site_pkey PRIMARY KEY (management_account_identifier, management_site_identifier);


--
-- Name: management_account management_account_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_account
    ADD CONSTRAINT management_account_pkey PRIMARY KEY (identifier);


--
-- Name: management_department management_department_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_department
    ADD CONSTRAINT management_department_pkey PRIMARY KEY (identifier);


--
-- Name: management_device management_device_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_device
    ADD CONSTRAINT management_device_pkey PRIMARY KEY (identifier);


--
-- Name: management_device_update management_device_update_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_device_update
    ADD CONSTRAINT management_device_update_pkey PRIMARY KEY (identifier);


--
-- Name: management_room management_room_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_room
    ADD CONSTRAINT management_room_pkey PRIMARY KEY (identifier);


--
-- Name: management_server management_server_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_server
    ADD CONSTRAINT management_server_pkey PRIMARY KEY (identifier);


--
-- Name: management_server management_server_server_code_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_server
    ADD CONSTRAINT management_server_server_code_key UNIQUE (server_code);


--
-- Name: management_server management_server_server_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_server
    ADD CONSTRAINT management_server_server_name_key UNIQUE (server_name);


--
-- Name: management_site_management_server management_site_management_server_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_site_management_server
    ADD CONSTRAINT management_site_management_server_pkey PRIMARY KEY (management_site_identifier, management_server_identifier);


--
-- Name: management_site management_site_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_site
    ADD CONSTRAINT management_site_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_bloodpressure measurement_bloodpressure_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_bloodpressure
    ADD CONSTRAINT measurement_bloodpressure_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_bloodsample measurement_bloodsample_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_bloodsample
    ADD CONSTRAINT measurement_bloodsample_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_glycemia measurement_glycemia_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_glycemia
    ADD CONSTRAINT measurement_glycemia_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_length measurement_length_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_length
    ADD CONSTRAINT measurement_length_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_morsefallscale measurement_morsefallscale_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_morsefallscale
    ADD CONSTRAINT measurement_morsefallscale_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_oxygensaturation measurement_oxygensaturation_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_oxygensaturation
    ADD CONSTRAINT measurement_oxygensaturation_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_pulse measurement_pulse_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_pulse
    ADD CONSTRAINT measurement_pulse_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_signature measurement_signature_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_signature
    ADD CONSTRAINT measurement_signature_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_stoolrecord measurement_stoolrecord_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_stoolrecord
    ADD CONSTRAINT measurement_stoolrecord_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_temperature measurement_temperature_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_temperature
    ADD CONSTRAINT measurement_temperature_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_urineoutput measurement_urineoutput_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_urineoutput
    ADD CONSTRAINT measurement_urineoutput_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_visualpainscale measurement_visualpainscale_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_visualpainscale
    ADD CONSTRAINT measurement_visualpainscale_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_waterlowscale measurement_waterlowscale_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_waterlowscale
    ADD CONSTRAINT measurement_waterlowscale_pkey PRIMARY KEY (identifier);


--
-- Name: measurement_weight measurement_weight_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_weight
    ADD CONSTRAINT measurement_weight_pkey PRIMARY KEY (identifier);


--
-- Name: medication medication_code_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication
    ADD CONSTRAINT medication_code_key UNIQUE (code);


--
-- Name: medication_form medication_form_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_form
    ADD CONSTRAINT medication_form_name_key UNIQUE (name);


--
-- Name: medication_form medication_form_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_form
    ADD CONSTRAINT medication_form_pkey PRIMARY KEY (identifier);


--
-- Name: medication medication_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication
    ADD CONSTRAINT medication_pkey PRIMARY KEY (identifier);


--
-- Name: medication_signature_detail medication_signature_detail_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_signature_detail
    ADD CONSTRAINT medication_signature_detail_pkey PRIMARY KEY (identifier);


--
-- Name: medication_signature medication_signature_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_signature
    ADD CONSTRAINT medication_signature_pkey PRIMARY KEY (identifier);


--
-- Name: medication_type medication_type_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_type
    ADD CONSTRAINT medication_type_pkey PRIMARY KEY (identifier);


--
-- Name: message_images message_images_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_images
    ADD CONSTRAINT message_images_pkey PRIMARY KEY (message_identifier, image_identifier);


--
-- Name: message message_lifeline_message_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message
    ADD CONSTRAINT message_lifeline_message_identifier_key UNIQUE (lifeline_message_identifier);


--
-- Name: message message_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message
    ADD CONSTRAINT message_pkey PRIMARY KEY (identifier);


--
-- Name: message_read_employees message_read_employees_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_read_employees
    ADD CONSTRAINT message_read_employees_pkey PRIMARY KEY (message_identifier, employee_identifier);


--
-- Name: message_read_patients message_read_patients_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_read_patients
    ADD CONSTRAINT message_read_patients_pkey PRIMARY KEY (message_identifier, patient_identifier);


--
-- Name: message_to_patients message_to_patients_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_to_patients
    ADD CONSTRAINT message_to_patients_pkey PRIMARY KEY (message_identifier, patient_identifier);


--
-- Name: message_to_roles message_to_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_to_roles
    ADD CONSTRAINT message_to_roles_pkey PRIMARY KEY (message_identifier, role_identifier);


--
-- Name: mis_connection_department mis_connection_department_mis_connection_identifier_departm_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_department
    ADD CONSTRAINT mis_connection_department_mis_connection_identifier_departm_key UNIQUE (mis_connection_identifier, department_identifier);


--
-- Name: mis_connection_department mis_connection_department_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_department
    ADD CONSTRAINT mis_connection_department_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection_diary mis_connection_diary_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_diary
    ADD CONSTRAINT mis_connection_diary_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection_employee mis_connection_employee_mis_connection_identifier_employee__key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_employee
    ADD CONSTRAINT mis_connection_employee_mis_connection_identifier_employee__key UNIQUE (mis_connection_identifier, employee_identifier);


--
-- Name: mis_connection_employee mis_connection_employee_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_employee
    ADD CONSTRAINT mis_connection_employee_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection_location mis_connection_location_mis_connection_identifier_location__key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_location
    ADD CONSTRAINT mis_connection_location_mis_connection_identifier_location__key UNIQUE (mis_connection_identifier, location_identifier);


--
-- Name: mis_connection_location mis_connection_location_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_location
    ADD CONSTRAINT mis_connection_location_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection_measurement_signature mis_connection_measurement_signature_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_measurement_signature
    ADD CONSTRAINT mis_connection_measurement_signature_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection_medication_signature mis_connection_medication_signature_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_medication_signature
    ADD CONSTRAINT mis_connection_medication_signature_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection_medication_type mis_connection_medication_type_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_medication_type
    ADD CONSTRAINT mis_connection_medication_type_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection mis_connection_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection
    ADD CONSTRAINT mis_connection_name_key UNIQUE (name);


--
-- Name: mis_connection_patient mis_connection_patient_mis_connection_identifier_patient_id_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_patient
    ADD CONSTRAINT mis_connection_patient_mis_connection_identifier_patient_id_key UNIQUE (mis_connection_identifier, patient_identifier);


--
-- Name: mis_connection_patient mis_connection_patient_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_patient
    ADD CONSTRAINT mis_connection_patient_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection mis_connection_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection
    ADD CONSTRAINT mis_connection_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection_planned_measurement mis_connection_planned_measurement_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_measurement
    ADD CONSTRAINT mis_connection_planned_measurement_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection_planned_medication mis_connection_planned_medication_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_medication
    ADD CONSTRAINT mis_connection_planned_medication_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection_section mis_connection_section_mis_connection_identifier_departm_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_section
    ADD CONSTRAINT mis_connection_section_mis_connection_identifier_departm_key UNIQUE (mis_connection_identifier, section_identifier);


--
-- Name: mis_connection_section mis_connection_section_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_section
    ADD CONSTRAINT mis_connection_section_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection_site mis_connection_site_mis_connection_identifier_sitekey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_site
    ADD CONSTRAINT mis_connection_site_mis_connection_identifier_sitekey UNIQUE (mis_connection_identifier, site_identifier);


--
-- Name: mis_connection_site mis_connection_site_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_site
    ADD CONSTRAINT mis_connection_site_pkey PRIMARY KEY (identifier);


--
-- Name: monitor_status_device monitor_status_device_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.monitor_status_device
    ADD CONSTRAINT monitor_status_device_pkey PRIMARY KEY (identifier);


--
-- Name: monitor_status_server monitor_status_server_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.monitor_status_server
    ADD CONSTRAINT monitor_status_server_pkey PRIMARY KEY (identifier);


--
-- Name: notification notification_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.notification
    ADD CONSTRAINT notification_pkey PRIMARY KEY (identifier);


--
-- Name: organization organization_administration_contact_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.organization
    ADD CONSTRAINT organization_administration_contact_identifier_key UNIQUE (administration_contact_identifier);


--
-- Name: organization organization_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.organization
    ADD CONSTRAINT organization_name_key UNIQUE (name);


--
-- Name: organization organization_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.organization
    ADD CONSTRAINT organization_pkey PRIMARY KEY (identifier);


--
-- Name: patient_administration_information patient_administration_information_domicile_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_administration_information
    ADD CONSTRAINT patient_administration_information_domicile_identifier_key UNIQUE (domicile_identifier);


--
-- Name: patient_administration_information patient_administration_information_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_administration_information
    ADD CONSTRAINT patient_administration_information_pkey PRIMARY KEY (identifier);


--
-- Name: patient_contact patient_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_contact
    ADD CONSTRAINT patient_contact_pkey PRIMARY KEY (identifier);


--
-- Name: patient_group patient_group_code_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_group
    ADD CONSTRAINT patient_group_code_key UNIQUE (code);


--
-- Name: patient_group patient_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_group
    ADD CONSTRAINT patient_group_pkey PRIMARY KEY (identifier);


--
-- Name: patient_group_ui_access patient_group_ui_access_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_group_ui_access
    ADD CONSTRAINT patient_group_ui_access_pkey PRIMARY KEY (patient_group_identifier, ui_access_identifier);


--
-- Name: patient_identification patient_identification_key_value_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_identification
    ADD CONSTRAINT patient_identification_key_value_key UNIQUE (key, value);


--
-- Name: patient_identification patient_identification_patient_identifier_key_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_identification
    ADD CONSTRAINT patient_identification_patient_identifier_key_key UNIQUE (patient_identifier, key);


--
-- Name: patient_identification patient_identification_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_identification
    ADD CONSTRAINT patient_identification_pkey PRIMARY KEY (identifier);


--
-- Name: patient_info patient_identifieruc; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_info
    ADD CONSTRAINT patient_identifieruc UNIQUE (patient_identifier);


--
-- Name: patient_info patient_info_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_info
    ADD CONSTRAINT patient_info_pkey PRIMARY KEY (identifier);


--
-- Name: patient_lifeline_message_pending patient_lifeline_message_pending_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_lifeline_message_pending
    ADD CONSTRAINT patient_lifeline_message_pending_pkey PRIMARY KEY (patient_identifier, lifeline_message_identifier);


--
-- Name: patient_medical_information_allergies patient_medical_information_allergies_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_medical_information_allergies
    ADD CONSTRAINT patient_medical_information_allergies_pkey PRIMARY KEY (patient_medical_information_identifier, allergy_identifier);


--
-- Name: patient_medical_information patient_medical_information_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_medical_information
    ADD CONSTRAINT patient_medical_information_pkey PRIMARY KEY (identifier);


--
-- Name: patient patient_patient_administration_information_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient
    ADD CONSTRAINT patient_patient_administration_information_identifier_key UNIQUE (patient_administration_information_identifier);


--
-- Name: patient_patient_group patient_patient_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_patient_group
    ADD CONSTRAINT patient_patient_group_pkey PRIMARY KEY (patient_identifier, patient_group_identifier);


--
-- Name: patient patient_patient_medical_information_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient
    ADD CONSTRAINT patient_patient_medical_information_identifier_key UNIQUE (patient_medical_information_identifier);


--
-- Name: patient patient_patient_social_information_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient
    ADD CONSTRAINT patient_patient_social_information_identifier_key UNIQUE (patient_social_information_identifier);


--
-- Name: patient patient_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient
    ADD CONSTRAINT patient_pkey PRIMARY KEY (identifier);


--
-- Name: patient_session patient_session_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_session
    ADD CONSTRAINT patient_session_pkey PRIMARY KEY (identifier);


--
-- Name: patient_social_information patient_social_information_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_social_information
    ADD CONSTRAINT patient_social_information_pkey PRIMARY KEY (identifier);


--
-- Name: period period_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.period
    ADD CONSTRAINT period_pkey PRIMARY KEY (identifier);


--
-- Name: picture picture_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.picture
    ADD CONSTRAINT picture_pkey PRIMARY KEY (identifier);


--
-- Name: care_action_signature pk_care_action_signature; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care_action_signature
    ADD CONSTRAINT pk_care_action_signature PRIMARY KEY (identifier);


--
-- Name: mis_connection_care_action pk_mis_connection_care_action; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_care_action
    ADD CONSTRAINT pk_mis_connection_care_action PRIMARY KEY (identifier);


--
-- Name: mis_connection_care_action_signature pk_mis_connection_care_action_signature; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_care_action_signature
    ADD CONSTRAINT pk_mis_connection_care_action_signature PRIMARY KEY (identifier);


--
-- Name: mis_connection_planned_care_action pk_mis_connection_planned_care_action; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_care_action
    ADD CONSTRAINT pk_mis_connection_planned_care_action PRIMARY KEY (identifier);


--
-- Name: planned_care_action pk_planned_care_action; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_care_action
    ADD CONSTRAINT pk_planned_care_action PRIMARY KEY (identifier);


--
-- Name: planned_measurement planned_measurement_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_measurement
    ADD CONSTRAINT planned_measurement_pkey PRIMARY KEY (identifier);


--
-- Name: planned_medication_detail planned_medication_detail_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_medication_detail
    ADD CONSTRAINT planned_medication_detail_pkey PRIMARY KEY (identifier);


--
-- Name: planned_medication planned_medication_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_medication
    ADD CONSTRAINT planned_medication_pkey PRIMARY KEY (identifier);


--
-- Name: possible_service_function possible_service_function_code_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.possible_service_function
    ADD CONSTRAINT possible_service_function_code_key UNIQUE (code);


--
-- Name: possible_service_function possible_service_function_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.possible_service_function
    ADD CONSTRAINT possible_service_function_pkey PRIMARY KEY (identifier);


--
-- Name: possible_work_order possible_work_order_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.possible_work_order
    ADD CONSTRAINT possible_work_order_pkey PRIMARY KEY (identifier);


--
-- Name: possible_work_order_role possible_work_order_role_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.possible_work_order_role
    ADD CONSTRAINT possible_work_order_role_pkey PRIMARY KEY (possible_work_order_identifier, role_identifier);


--
-- Name: possible_work_order_top possible_work_order_top_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.possible_work_order_top
    ADD CONSTRAINT possible_work_order_top_pkey PRIMARY KEY (identifier);


--
-- Name: predefined_broadcast_call predefined_broadcast_call_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.predefined_broadcast_call
    ADD CONSTRAINT predefined_broadcast_call_name_key UNIQUE (name);


--
-- Name: predefined_broadcast_call predefined_broadcast_call_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.predefined_broadcast_call
    ADD CONSTRAINT predefined_broadcast_call_pkey PRIMARY KEY (identifier);


--
-- Name: process_boot_cycle process_boot_cycle_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.process_boot_cycle
    ADD CONSTRAINT process_boot_cycle_pkey PRIMARY KEY (identifier);


--
-- Name: process process_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.process
    ADD CONSTRAINT process_name_key UNIQUE (name);


--
-- Name: process process_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.process
    ADD CONSTRAINT process_pkey PRIMARY KEY (identifier);


--
-- Name: radio radio_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.radio
    ADD CONSTRAINT radio_pkey PRIMARY KEY (identifier);


--
-- Name: remote_alarm remote_alarm_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.remote_alarm
    ADD CONSTRAINT remote_alarm_pkey PRIMARY KEY (identifier);


--
-- Name: rf_module_brand rf_module_brand_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.rf_module_brand
    ADD CONSTRAINT rf_module_brand_pkey PRIMARY KEY (identifier);


--
-- Name: rf_module rf_module_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.rf_module
    ADD CONSTRAINT rf_module_pkey PRIMARY KEY (identifier);


--
-- Name: rf_module_type rf_module_type_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.rf_module_type
    ADD CONSTRAINT rf_module_type_pkey PRIMARY KEY (identifier);


--
-- Name: role role_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.role
    ADD CONSTRAINT role_pkey PRIMARY KEY (identifier);


--
-- Name: role_status role_status_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.role_status
    ADD CONSTRAINT role_status_pkey PRIMARY KEY (role_identifier, status_identifier);


--
-- Name: role_ui_access role_ui_access_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.role_ui_access
    ADD CONSTRAINT role_ui_access_pkey PRIMARY KEY (role_identifier, ui_access_identifier);


--
-- Name: roles_engine_call_action_message_destination_email roles_engine_call_action_message_destination_email_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.roles_engine_call_action_message_destination_email
    ADD CONSTRAINT roles_engine_call_action_message_destination_email_pkey PRIMARY KEY (role_identifier, engine_call_action_message_destination_email_identifier);


--
-- Name: room room_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.room
    ADD CONSTRAINT room_pkey PRIMARY KEY (identifier);


--
-- Name: section section_code_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.section
    ADD CONSTRAINT section_code_key UNIQUE (code);


--
-- Name: section section_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.section
    ADD CONSTRAINT section_pkey PRIMARY KEY (identifier);


--
-- Name: service_function service_function_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.service_function
    ADD CONSTRAINT service_function_pkey PRIMARY KEY (identifier);


--
-- Name: setting setting_key_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.setting
    ADD CONSTRAINT setting_key_key UNIQUE (key);


--
-- Name: setting setting_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.setting
    ADD CONSTRAINT setting_pkey PRIMARY KEY (identifier);


--
-- Name: shortcut shortcut_name_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.shortcut
    ADD CONSTRAINT shortcut_name_key UNIQUE (name);


--
-- Name: shortcut shortcut_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.shortcut
    ADD CONSTRAINT shortcut_pkey PRIMARY KEY (identifier);


--
-- Name: shortcut_role shortcut_role_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.shortcut_role
    ADD CONSTRAINT shortcut_role_pkey PRIMARY KEY (identifier);


--
-- Name: shortcut_role shortcut_role_shortcut_identifier_role_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.shortcut_role
    ADD CONSTRAINT shortcut_role_shortcut_identifier_role_identifier_key UNIQUE (shortcut_identifier, role_identifier);


--
-- Name: site site_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.site
    ADD CONSTRAINT site_pkey PRIMARY KEY (identifier);


--
-- Name: employee spectralink_account_identifier_unique; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.employee
    ADD CONSTRAINT spectralink_account_identifier_unique UNIQUE (spectralink_account_identifier);


--
-- Name: spectralink_account spectralink_account_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_account
    ADD CONSTRAINT spectralink_account_pkey PRIMARY KEY (identifier);


--
-- Name: spectralink_group_location spectralink_group_location_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_group_location
    ADD CONSTRAINT spectralink_group_location_pkey PRIMARY KEY (spectralink_group_identifier, location_identifier);


--
-- Name: spectralink_group spectralink_group_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_group
    ADD CONSTRAINT spectralink_group_pkey PRIMARY KEY (identifier);


--
-- Name: spectralink_group_spectralink_account spectralink_group_spectralink_account_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_group_spectralink_account
    ADD CONSTRAINT spectralink_group_spectralink_account_pkey PRIMARY KEY (spectralink_group_identifier, spectralink_account_identifier);


--
-- Name: spectralink_message spectralink_message_external_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message
    ADD CONSTRAINT spectralink_message_external_identifier_key UNIQUE (external_identifier);


--
-- Name: spectralink_message spectralink_message_key_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message
    ADD CONSTRAINT spectralink_message_key_key UNIQUE (key);


--
-- Name: spectralink_message spectralink_message_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message
    ADD CONSTRAINT spectralink_message_pkey PRIMARY KEY (identifier);


--
-- Name: spectralink_message_queue spectralink_message_queue_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message_queue
    ADD CONSTRAINT spectralink_message_queue_pkey PRIMARY KEY (identifier);


--
-- Name: spectralink_message_reference spectralink_message_reference_key_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message_reference
    ADD CONSTRAINT spectralink_message_reference_key_key UNIQUE (key);


--
-- Name: spectralink_message_reference spectralink_message_reference_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message_reference
    ADD CONSTRAINT spectralink_message_reference_pkey PRIMARY KEY (identifier);


--
-- Name: state_cause state_cause_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_cause
    ADD CONSTRAINT state_cause_pkey PRIMARY KEY (identifier);


--
-- Name: state_cause_template_device state_cause_template_device_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_cause_template_device
    ADD CONSTRAINT state_cause_template_device_pkey PRIMARY KEY (state_cause_template_identifier, device_identifier);


--
-- Name: state_cause_template state_cause_template_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_cause_template
    ADD CONSTRAINT state_cause_template_pkey PRIMARY KEY (identifier);


--
-- Name: state_machine_change_action_config state_machine_change_action_config_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_machine_change_action_config
    ADD CONSTRAINT state_machine_change_action_config_pkey PRIMARY KEY (identifier);


--
-- Name: state_machine_state state_machine_state_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_machine_state
    ADD CONSTRAINT state_machine_state_pkey PRIMARY KEY (identifier);


--
-- Name: status status_app_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.status
    ADD CONSTRAINT status_app_identifier_key UNIQUE (app_identifier);


--
-- Name: status_app status_app_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.status_app
    ADD CONSTRAINT status_app_pkey PRIMARY KEY (identifier);


--
-- Name: status status_dect_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.status
    ADD CONSTRAINT status_dect_identifier_key UNIQUE (dect_identifier);


--
-- Name: status_dect status_dect_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.status_dect
    ADD CONSTRAINT status_dect_pkey PRIMARY KEY (identifier);


--
-- Name: status status_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.status
    ADD CONSTRAINT status_pkey PRIMARY KEY (identifier);


--
-- Name: status status_type_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.status
    ADD CONSTRAINT status_type_key UNIQUE (type);


--
-- Name: string string_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.string
    ADD CONSTRAINT string_pkey PRIMARY KEY (identifier);


--
-- Name: sui_patient_info sui_patient_info_patient_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_patient_info
    ADD CONSTRAINT sui_patient_info_patient_identifier_key UNIQUE (patient_identifier);


--
-- Name: sui_patient_info sui_patient_info_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_patient_info
    ADD CONSTRAINT sui_patient_info_pkey PRIMARY KEY (identifier);


--
-- Name: sui_status sui_status_code_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status
    ADD CONSTRAINT sui_status_code_key UNIQUE (code);


--
-- Name: sui_status sui_status_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status
    ADD CONSTRAINT sui_status_pkey PRIMARY KEY (identifier);


--
-- Name: sui_status_trigger sui_status_trigger_code_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status_trigger
    ADD CONSTRAINT sui_status_trigger_code_key UNIQUE (code);


--
-- Name: sui_status_trigger sui_status_trigger_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status_trigger
    ADD CONSTRAINT sui_status_trigger_pkey PRIMARY KEY (identifier);


--
-- Name: supplement supplement_code_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.supplement
    ADD CONSTRAINT supplement_code_key UNIQUE (code);


--
-- Name: supplement supplement_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.supplement
    ADD CONSTRAINT supplement_pkey PRIMARY KEY (identifier);


--
-- Name: supplement_registration supplement_registration_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.supplement_registration
    ADD CONSTRAINT supplement_registration_pkey PRIMARY KEY (identifier);


--
-- Name: task_type task_type_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.task_type
    ADD CONSTRAINT task_type_pkey PRIMARY KEY (identifier);


--
-- Name: task_type task_type_type_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.task_type
    ADD CONSTRAINT task_type_type_key UNIQUE (type);


--
-- Name: task_types_roles task_types_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.task_types_roles
    ADD CONSTRAINT task_types_roles_pkey PRIMARY KEY (task_type_identifier, role_identifier);


--
-- Name: translation translation_key_unique; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.translation
    ADD CONSTRAINT translation_key_unique UNIQUE (translation_key);


--
-- Name: translation translation_pk; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.translation
    ADD CONSTRAINT translation_pk PRIMARY KEY (identifier);


--
-- Name: trusted_device trusted_device_code_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.trusted_device
    ADD CONSTRAINT trusted_device_code_key UNIQUE (code);


--
-- Name: trusted_device_patient trusted_device_patient_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.trusted_device_patient
    ADD CONSTRAINT trusted_device_patient_pkey PRIMARY KEY (trusted_device_identifier, patient_identifier);


--
-- Name: trusted_device trusted_device_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.trusted_device
    ADD CONSTRAINT trusted_device_pkey PRIMARY KEY (identifier);


--
-- Name: trusted_device_sui_status trusted_device_sui_status_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.trusted_device_sui_status
    ADD CONSTRAINT trusted_device_sui_status_pkey PRIMARY KEY (trusted_device_identifier, sui_status_identifier);


--
-- Name: ui_access ui_access_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.ui_access
    ADD CONSTRAINT ui_access_pkey PRIMARY KEY (identifier);


--
-- Name: mis_connection_care_action uq_mis_identifier_care_action_external_id; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_care_action
    ADD CONSTRAINT uq_mis_identifier_care_action_external_id UNIQUE (mis_connection_identifier, external_identifier);


--
-- Name: mis_connection_care_action_signature uq_mis_identifier_care_action_signature_external_id; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_care_action_signature
    ADD CONSTRAINT uq_mis_identifier_care_action_signature_external_id UNIQUE (mis_connection_identifier, external_identifier);


--
-- Name: mis_connection_diary uq_mis_identifier_diary_external_id; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_diary
    ADD CONSTRAINT uq_mis_identifier_diary_external_id UNIQUE (external_identifier);


--
-- Name: mis_connection_planned_care_action uq_mis_identifier_planned_care_action_external_id; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_care_action
    ADD CONSTRAINT uq_mis_identifier_planned_care_action_external_id UNIQUE (mis_connection_identifier, external_identifier);


--
-- Name: webrtc_account webrtc_account_location_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.webrtc_account
    ADD CONSTRAINT webrtc_account_location_identifier_key UNIQUE (location_identifier);


--
-- Name: webrtc_account webrtc_account_number_domain_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.webrtc_account
    ADD CONSTRAINT webrtc_account_number_domain_key UNIQUE (number, domain);


--
-- Name: webrtc_account webrtc_account_patient_identifier_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.webrtc_account
    ADD CONSTRAINT webrtc_account_patient_identifier_key UNIQUE (patient_identifier);


--
-- Name: webrtc_account webrtc_account_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.webrtc_account
    ADD CONSTRAINT webrtc_account_pkey PRIMARY KEY (identifier);


--
-- Name: wifi_network wifi_network_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.wifi_network
    ADD CONSTRAINT wifi_network_pkey PRIMARY KEY (identifier);


--
-- Name: wifi_network wifi_network_ssid_key; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.wifi_network
    ADD CONSTRAINT wifi_network_ssid_key UNIQUE (ssid);


--
-- Name: work_order work_order_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.work_order
    ADD CONSTRAINT work_order_pkey PRIMARY KEY (identifier);


--
-- Name: yunction_log yunction_log_pkey; Type: CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.yunction_log
    ADD CONSTRAINT yunction_log_pkey PRIMARY KEY (identifier);


--
-- Name: access_control_access_door_gr_access_door_group_identifier__idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX access_control_access_door_gr_access_door_group_identifier__idx ON public.access_control_access_door_group USING btree (access_door_group_identifier, access_control_identifier);


--
-- Name: access_door_access_control_access_control_identifier_access_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX access_door_access_control_access_control_identifier_access_idx ON public.access_door_access_control USING btree (access_control_identifier, access_door_identifier);


--
-- Name: access_door_access_group_access_group_identifier_access_doo_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX access_door_access_group_access_group_identifier_access_doo_idx ON public.access_door_access_group USING btree (access_group_identifier, access_door_identifier);


--
-- Name: access_door_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX access_door_device_identifier_idx ON public.access_door USING btree (device_identifier);


--
-- Name: access_door_door_procedure_door_procedure_identifier_access_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX access_door_door_procedure_door_procedure_identifier_access_idx ON public.access_door_door_procedure USING btree (door_procedure_identifier, access_door_identifier);


--
-- Name: access_door_group_access_grou_access_group_identifier_acces_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX access_door_group_access_grou_access_group_identifier_acces_idx ON public.access_door_group_access_group USING btree (access_group_identifier, access_door_group_identifier);


--
-- Name: access_door_name_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX access_door_name_idx ON public.access_door USING btree (name) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: access_group_badge_badge_identifier_access_group_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX access_group_badge_badge_identifier_access_group_identifier_idx ON public.access_group_badge USING btree (badge_identifier, access_group_identifier);


--
-- Name: access_group_name_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX access_group_name_idx ON public.access_group USING btree (name) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: activity_active_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX activity_active_idx ON public.activity USING btree (active) WHERE (active IS TRUE);


--
-- Name: activity_crew_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX activity_crew_identifier_idx ON public.activity USING btree (crew_identifier);


--
-- Name: activity_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX activity_employee_identifier_idx ON public.activity USING btree (employee_identifier);


--
-- Name: activity_role_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX activity_role_identifier_idx ON public.activity USING btree (role_identifier);


--
-- Name: api_token_api_login_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX api_token_api_login_identifier_idx ON public.api_token USING btree (api_login_identifier);


--
-- Name: app_message_context_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX app_message_context_location_identifier_idx ON public.app_message USING btree (context_location_identifier);


--
-- Name: app_message_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX app_message_employee_identifier_idx ON public.app_message USING btree (employee_identifier);


--
-- Name: app_message_engine_call_action_message_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX app_message_engine_call_action_message_identifier_idx ON public.app_message USING btree (engine_call_action_message_identifier);


--
-- Name: app_message_tag_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX app_message_tag_idx ON public.app_message USING btree (tag);


--
-- Name: application_svp_crews_crew_identifier_application_svp_ident_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX application_svp_crews_crew_identifier_application_svp_ident_idx ON public.application_svp_crews USING btree (crew_identifier, application_svp_identifier);


--
-- Name: application_svp_esvp_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX application_svp_esvp_device_identifier_idx ON public.application_svp USING btree (esvp_device_identifier);


--
-- Name: application_svp_status_status_identifier_application_svp_id_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX application_svp_status_status_identifier_application_svp_id_idx ON public.application_svp_status USING btree (status_identifier, application_svp_identifier);


--
-- Name: appointment_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX appointment_employee_identifier_idx ON public.appointment USING btree (employee_identifier);


--
-- Name: appointment_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX appointment_patient_identifier_idx ON public.appointment USING btree (patient_identifier);


--
-- Name: badge_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX badge_employee_identifier_idx ON public.badge USING btree (employee_identifier);


--
-- Name: badge_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX badge_patient_identifier_idx ON public.badge USING btree (patient_identifier);


--
-- Name: badge_serial_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX badge_serial_idx ON public.badge USING btree (serial) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: broadcast_call_broadcast_call_broadcast_call_group_identifi_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX broadcast_call_broadcast_call_broadcast_call_group_identifi_idx ON public.broadcast_call_broadcast_call_group USING btree (broadcast_call_group_identifier, broadcast_call_identifier);


--
-- Name: broadcast_call_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX broadcast_call_employee_identifier_idx ON public.broadcast_call USING btree (employee_identifier);


--
-- Name: broadcast_call_group_device_device_identifier_broadcast_cal_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX broadcast_call_group_device_device_identifier_broadcast_cal_idx ON public.broadcast_call_group_device USING btree (device_identifier, broadcast_call_group_identifier);


--
-- Name: call_reason_call_reason_category_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX call_reason_call_reason_category_identifier_idx ON public.call_reason USING btree (call_reason_category_identifier);


--
-- Name: call_reason_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX call_reason_employee_identifier_idx ON public.call_reason USING btree (employee_identifier);


--
-- Name: call_reason_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX call_reason_location_identifier_idx ON public.call_reason USING btree (location_identifier);


--
-- Name: call_reason_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX call_reason_patient_identifier_idx ON public.call_reason USING btree (patient_identifier);


--
-- Name: call_reason_tag_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX call_reason_tag_idx ON public.call_reason USING btree (tag);


--
-- Name: camera_location_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX camera_location_idx ON public.camera USING btree (location) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: care_session_care_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX care_session_care_identifier_idx ON public.care_session USING btree (care_identifier);


--
-- Name: care_session_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX care_session_employee_identifier_idx ON public.care_session USING btree (employee_identifier);


--
-- Name: care_session_timestamp_leave_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX care_session_timestamp_leave_idx ON public.care_session USING btree (timestamp_leave) WHERE (timestamp_leave IS NULL);


--
-- Name: care_state_cause_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX care_state_cause_identifier_idx ON public.care USING btree (state_cause_identifier);


--
-- Name: care_status_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX care_status_identifier_idx ON public.care USING btree (status_identifier);


--
-- Name: cas_notification_category_payload_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX cas_notification_category_payload_idx ON public.cas_notification USING btree (category, ((payload - 'version'::text)));


--
-- Name: cas_session_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX cas_session_employee_identifier_idx ON public.cas_session USING btree (employee_identifier);


--
-- Name: contact_contact_list_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX contact_contact_list_identifier_idx ON public.contact USING btree (contact_list_identifier);


--
-- Name: contact_list_crew_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX contact_list_crew_identifier_idx ON public.contact_list USING btree (crew_identifier);


--
-- Name: contact_list_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX contact_list_employee_identifier_idx ON public.contact_list USING btree (employee_identifier);


--
-- Name: contact_webrtc_account_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX contact_webrtc_account_identifier_idx ON public.contact USING btree (webrtc_account_identifier);


--
-- Name: crew_location_location_identifier_crew_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX crew_location_location_identifier_crew_identifier_idx ON public.crew_location USING btree (location_identifier, crew_identifier);


--
-- Name: crew_name_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX crew_name_idx ON public.crew USING btree (name) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: day_night_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX day_night_employee_identifier_idx ON public.day_night USING btree (employee_identifier);


--
-- Name: day_night_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX day_night_patient_identifier_idx ON public.day_night USING btree (patient_identifier);


--
-- Name: day_night_period_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX day_night_period_identifier_idx ON public.day_night USING btree (period_identifier);


--
-- Name: dect_account_number_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX dect_account_number_idx ON public.dect_account USING btree (number) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: dect_group_dect_account_dect_account_identifier_dect_group__idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX dect_group_dect_account_dect_account_identifier_dect_group__idx ON public.dect_group_dect_account USING btree (dect_account_identifier, dect_group_identifier);


--
-- Name: dect_group_location_location_identifier_dect_group_identifi_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX dect_group_location_location_identifier_dect_group_identifi_idx ON public.dect_group_location USING btree (location_identifier, dect_group_identifier);


--
-- Name: dect_message_account_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX dect_message_account_identifier_idx ON public.dect_message USING btree (account_identifier);


--
-- Name: dect_message_callback_account_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX dect_message_callback_account_identifier_idx ON public.dect_message USING btree (callback_account_identifier);


--
-- Name: dect_message_context_location_identifier_created_at_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX dect_message_context_location_identifier_created_at_idx ON public.dect_message USING btree (context_location_identifier, created_at);


--
-- Name: dect_message_context_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX dect_message_context_location_identifier_idx ON public.dect_message USING btree (context_location_identifier);


--
-- Name: dect_message_engine_call_action_message_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX dect_message_engine_call_action_message_identifier_idx ON public.dect_message USING btree (engine_call_action_message_identifier);


--
-- Name: dect_message_tag_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX dect_message_tag_idx ON public.dect_message USING btree (tag);


--
-- Name: department_code_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX department_code_idx ON public.department USING btree (code) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: department_site_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX department_site_identifier_idx ON public.department USING btree (site_identifier);


--
-- Name: device_engine_device_configuration_profile_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX device_engine_device_configuration_profile_identifier_idx ON public.device USING btree (engine_device_configuration_profile_identifier);


--
-- Name: device_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX device_location_identifier_idx ON public.device USING btree (location_identifier);


--
-- Name: device_serial_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX device_serial_idx ON public.device USING btree (serial) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: door_procedure_name_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX door_procedure_name_idx ON public.door_procedure USING btree (name) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: email_possible_work_order_top_identifier_address_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX email_possible_work_order_top_identifier_address_idx ON public.email USING btree (possible_work_order_top_identifier, address);


--
-- Name: employee_cas_user_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX employee_cas_user_idx ON public.employee USING btree (cas_user) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: employee_cms_cms_code_one_cms_code_two_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX employee_cms_cms_code_one_cms_code_two_idx ON public.employee USING btree (cms, cms_code_one, cms_code_two) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: employee_code_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX employee_code_idx ON public.employee USING btree (code) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: employee_dect_account_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX employee_dect_account_identifier_idx ON public.employee USING btree (dect_account_identifier);


--
-- Name: employee_spectralink_account_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX employee_spectralink_account_identifier_idx ON public.employee USING btree (spectralink_account_identifier);


--
-- Name: engine_action_engine_call_action_message_acknowledgment_ide_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_action_engine_call_action_message_acknowledgment_ide_idx ON public.engine_action USING btree (engine_call_action_message_acknowledgment_identifier);


--
-- Name: engine_action_engine_call_action_message_destination_dect_i_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_action_engine_call_action_message_destination_dect_i_idx ON public.engine_action USING btree (engine_call_action_message_destination_dect_identifier);


--
-- Name: engine_action_engine_call_action_message_destination_email__idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_action_engine_call_action_message_destination_email__idx ON public.engine_action USING btree (engine_call_action_message_destination_email_identifier);


--
-- Name: engine_action_engine_call_action_message_destination_employ_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_action_engine_call_action_message_destination_employ_idx ON public.engine_action USING btree (engine_call_action_message_destination_employee_identifier);


--
-- Name: engine_action_engine_call_action_message_destination_spectr_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_action_engine_call_action_message_destination_spectr_idx ON public.engine_action USING btree (engine_call_action_message_destination_spectralink_identifier);


--
-- Name: engine_action_engine_call_action_message_rejection_identifi_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_action_engine_call_action_message_rejection_identifi_idx ON public.engine_action USING btree (engine_call_action_message_rejection_identifier);


--
-- Name: engine_action_engine_call_action_message_termination_identi_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_action_engine_call_action_message_termination_identi_idx ON public.engine_action USING btree (engine_call_action_message_termination_identifier);


--
-- Name: engine_action_engine_call_action_viewpoint_notification_ack_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_action_engine_call_action_viewpoint_notification_ack_idx ON public.engine_action USING btree (engine_call_action_viewpoint_notification_acknowledgment_identi);


--
-- Name: engine_action_engine_call_action_viewpoint_notification_ter_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_action_engine_call_action_viewpoint_notification_ter_idx ON public.engine_action USING btree (engine_call_action_viewpoint_notification_termination_identifie);


--
-- Name: engine_action_engine_call_action_viewpoint_status_acknowled_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_action_engine_call_action_viewpoint_status_acknowled_idx ON public.engine_action USING btree (engine_call_action_viewpoint_status_acknowledgment_identifier);


--
-- Name: engine_action_engine_call_action_viewpoint_status_terminati_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_action_engine_call_action_viewpoint_status_terminati_idx ON public.engine_action USING btree (engine_call_action_viewpoint_status_termination_identifier);


--
-- Name: engine_action_engine_call_termination_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_action_engine_call_termination_identifier_idx ON public.engine_action USING btree (engine_call_termination_identifier);


--
-- Name: engine_call_action_engine_call_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_engine_call_identifier_idx ON public.engine_call_action USING btree (engine_call_identifier);


--
-- Name: engine_call_action_message_de_engine_call_action_message_i_idx1; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_de_engine_call_action_message_i_idx1 ON public.engine_call_action_message_destination_employee USING btree (engine_call_action_message_identifier);


--
-- Name: engine_call_action_message_de_engine_call_action_message_i_idx2; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_de_engine_call_action_message_i_idx2 ON public.engine_call_action_message_destination_dect USING btree (engine_call_action_message_identifier);


--
-- Name: engine_call_action_message_de_engine_call_action_message_i_idx3; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_de_engine_call_action_message_i_idx3 ON public.engine_call_action_message_destination_spectralink USING btree (engine_call_action_message_identifier);


--
-- Name: engine_call_action_message_de_engine_call_action_message_id_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_de_engine_call_action_message_id_idx ON public.engine_call_action_message_destination_email USING btree (engine_call_action_message_identifier);


--
-- Name: engine_call_action_message_de_role_identifier_engine_call_a_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_de_role_identifier_engine_call_a_idx ON public.engine_call_action_message_destination_employee_role USING btree (role_identifier, engine_call_action_message_destination_employee_identifier);


--
-- Name: engine_call_action_message_de_spectralink_account_identifie_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_de_spectralink_account_identifie_idx ON public.engine_call_action_message_destination_spectralink USING btree (spectralink_account_identifier);


--
-- Name: engine_call_action_message_destinat_dect_account_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_destinat_dect_account_identifier_idx ON public.engine_call_action_message_destination_dect USING btree (dect_account_identifier);


--
-- Name: engine_call_action_message_destination__employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_destination__employee_identifier_idx ON public.engine_call_action_message_destination_email USING btree (employee_identifier);


--
-- Name: engine_call_action_message_destination__location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_destination__location_identifier_idx ON public.engine_call_action_message_destination_email USING btree (location_identifier);


--
-- Name: engine_call_action_message_destination_e_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_destination_e_patient_identifier_idx ON public.engine_call_action_message_destination_email USING btree (patient_identifier);


--
-- Name: engine_call_action_message_destination_emai_crew_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_destination_emai_crew_identifier_idx ON public.engine_call_action_message_destination_email USING btree (crew_identifier);


--
-- Name: engine_call_action_message_destination_empl_crew_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_destination_empl_crew_identifier_idx ON public.engine_call_action_message_destination_employee USING btree (crew_identifier);


--
-- Name: engine_call_action_message_destination_employee_identifier_idx1; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_destination_employee_identifier_idx1 ON public.engine_call_action_message_destination_employee USING btree (employee_identifier);


--
-- Name: engine_call_action_message_destination_location_identifier_idx1; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_destination_location_identifier_idx1 ON public.engine_call_action_message_destination_employee USING btree (location_identifier);


--
-- Name: engine_call_action_message_destination_location_identifier_idx2; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_destination_location_identifier_idx2 ON public.engine_call_action_message_destination_dect USING btree (location_identifier);


--
-- Name: engine_call_action_message_destination_location_identifier_idx3; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_message_destination_location_identifier_idx3 ON public.engine_call_action_message_destination_spectralink USING btree (location_identifier);


--
-- Name: engine_call_action_viewpoint_notificati_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_viewpoint_notificati_location_identifier_idx ON public.engine_call_action_viewpoint_notification USING btree (location_identifier);


--
-- Name: engine_call_action_viewpoint_notification_status_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_viewpoint_notification_status_identifier_idx ON public.engine_call_action_viewpoint_notification USING btree (status_identifier);


--
-- Name: engine_call_action_viewpoint_status_cause_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_viewpoint_status_cause_identifier_idx ON public.engine_call_action_viewpoint_status USING btree (cause_identifier);


--
-- Name: engine_call_action_viewpoint_status_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_viewpoint_status_location_identifier_idx ON public.engine_call_action_viewpoint_status USING btree (location_identifier);


--
-- Name: engine_call_action_viewpoint_status_status_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_action_viewpoint_status_status_identifier_idx ON public.engine_call_action_viewpoint_status USING btree (status_identifier);


--
-- Name: engine_call_timestamp_executed_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_call_timestamp_executed_idx ON public.engine_call USING btree (timestamp_executed) WHERE (timestamp_executed IS NULL);


--
-- Name: engine_event_access_denied_session_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_event_access_denied_session_identifier_idx ON public.engine_event_access_denied USING btree (session_identifier);


--
-- Name: engine_event_access_entered_session_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_event_access_entered_session_identifier_idx ON public.engine_event_access_entered USING btree (session_identifier);


--
-- Name: engine_event_access_left_session_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_event_access_left_session_identifier_idx ON public.engine_event_access_left USING btree (session_identifier);


--
-- Name: engine_event_badge_provided_badge_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_event_badge_provided_badge_identifier_idx ON public.engine_event_badge_provided USING btree (badge_identifier);


--
-- Name: engine_event_badge_provided_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_event_badge_provided_device_identifier_idx ON public.engine_event_badge_provided USING btree (device_identifier);


--
-- Name: engine_event_badge_provisioned_badge_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_event_badge_provisioned_badge_identifier_idx ON public.engine_event_badge_provisioned USING btree (badge_identifier);


--
-- Name: engine_event_badge_provisioned_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_event_badge_provisioned_employee_identifier_idx ON public.engine_event_badge_provisioned USING btree (employee_identifier);


--
-- Name: engine_event_badge_provisioned_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_event_badge_provisioned_patient_identifier_idx ON public.engine_event_badge_provisioned USING btree (patient_identifier);


--
-- Name: engine_event_rf_module_provided_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_event_rf_module_provided_device_identifier_idx ON public.engine_event_rf_module_provided USING btree (device_identifier);


--
-- Name: engine_event_rf_module_provided_rf_module_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_event_rf_module_provided_rf_module_identifier_idx ON public.engine_event_rf_module_provided USING btree (rf_module_identifier);


--
-- Name: engine_event_viewpoint_state_changed_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX engine_event_viewpoint_state_changed_location_identifier_idx ON public.engine_event_viewpoint_state_changed USING btree (location_identifier);


--
-- Name: espa_in_message_com_port_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX espa_in_message_com_port_identifier_idx ON public.espa_in_message USING btree (com_port_identifier);


--
-- Name: flyway_schema_history_success_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX flyway_schema_history_success_idx ON public.flyway_schema_history USING btree (success);


--
-- Name: gps_signal_address_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX gps_signal_address_identifier_idx ON public.gps_signal USING btree (address_identifier);


--
-- Name: gps_signal_trusted_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX gps_signal_trusted_device_identifier_idx ON public.gps_signal USING btree (trusted_device_identifier);


--
-- Name: hulp_call_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX hulp_call_patient_identifier_idx ON public.hulp_call USING btree (patient_identifier);


--
-- Name: hulp_call_webrtc_account_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX hulp_call_webrtc_account_identifier_idx ON public.hulp_call USING btree (webrtc_account_identifier);


--
-- Name: idx_care_action_signature_planned_care_action_external_id; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX idx_care_action_signature_planned_care_action_external_id ON public.care_action_signature USING btree (planned_care_action_identifier);


--
-- Name: idx_planned_care_action_external_identifier; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX idx_planned_care_action_external_identifier ON public.planned_care_action USING btree (care_action_identifier);


--
-- Name: lifeline_message_answer_lifeline_message_button_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX lifeline_message_answer_lifeline_message_button_identifier_idx ON public.lifeline_message_answer USING btree (lifeline_message_button_identifier);


--
-- Name: lifeline_message_answer_lifeline_message_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX lifeline_message_answer_lifeline_message_identifier_idx ON public.lifeline_message_answer USING btree (lifeline_message_identifier);


--
-- Name: lifeline_message_answer_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX lifeline_message_answer_patient_identifier_idx ON public.lifeline_message_answer USING btree (patient_identifier);


--
-- Name: lifeline_message_button_lifeline_message_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX lifeline_message_button_lifeline_message_identifier_idx ON public.lifeline_message_button USING btree (lifeline_message_identifier);


--
-- Name: locality_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX locality_device_identifier_idx ON public.locality USING btree (device_identifier);


--
-- Name: locality_rf_module_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX locality_rf_module_identifier_idx ON public.locality USING btree (rf_module_identifier);


--
-- Name: locality_timestamp_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX locality_timestamp_idx ON public.locality USING btree ("timestamp");


--
-- Name: location_department_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX location_department_identifier_idx ON public.location USING btree (department_identifier);


--
-- Name: location_gateway_device_gatew_device_identifier_location_id_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX location_gateway_device_gatew_device_identifier_location_id_idx ON public.location_gateway_device_gateway USING btree (device_identifier, location_identifier);


--
-- Name: location_patient_patient_identifier_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX location_patient_patient_identifier_location_identifier_idx ON public.location_patient USING btree (patient_identifier, location_identifier);


--
-- Name: location_serial_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX location_serial_idx ON public.location USING btree (serial) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: log_care_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_care_employee_identifier_idx ON public.log_care USING btree (employee_identifier);


--
-- Name: log_care_location_identifier_employee_identifier_period_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_care_location_identifier_employee_identifier_period_idx ON public.log_care USING gist (location_identifier, employee_identifier, period);


--
-- Name: log_care_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_care_location_identifier_idx ON public.log_care USING btree (location_identifier);


--
-- Name: log_door_access_door_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_door_access_door_identifier_idx ON public.log_door USING btree (access_door_identifier);


--
-- Name: log_door_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_door_employee_identifier_idx ON public.log_door USING btree (employee_identifier);


--
-- Name: log_door_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_door_patient_identifier_idx ON public.log_door USING btree (patient_identifier);


--
-- Name: log_duty_crew_identifier_employee_identifier_role_identifie_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_duty_crew_identifier_employee_identifier_role_identifie_idx ON public.log_duty USING gist (crew_identifier, employee_identifier, role_identifier, period);


--
-- Name: log_duty_crew_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_duty_crew_identifier_idx ON public.log_duty USING btree (crew_identifier);


--
-- Name: log_duty_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_duty_employee_identifier_idx ON public.log_duty USING btree (employee_identifier);


--
-- Name: log_duty_role_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_duty_role_identifier_idx ON public.log_duty USING btree (role_identifier);


--
-- Name: log_employee_dect_account_dect_account_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_employee_dect_account_dect_account_identifier_idx ON public.log_employee_dect_account USING btree (dect_account_identifier);


--
-- Name: log_employee_dect_account_employee_identifier_dect_account__idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_employee_dect_account_employee_identifier_dect_account__idx ON public.log_employee_dect_account USING gist (employee_identifier, dect_account_identifier, period);


--
-- Name: log_employee_dect_account_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_employee_dect_account_employee_identifier_idx ON public.log_employee_dect_account USING btree (employee_identifier);


--
-- Name: log_employee_spectralink_acco_employee_identifier_spectrali_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_employee_spectralink_acco_employee_identifier_spectrali_idx ON public.log_employee_spectralink_account USING gist (employee_identifier, spectralink_account_identifier, period);


--
-- Name: log_employee_spectralink_acco_spectralink_account_identifie_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_employee_spectralink_acco_spectralink_account_identifie_idx ON public.log_employee_spectralink_account USING btree (spectralink_account_identifier);


--
-- Name: log_employee_spectralink_account_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_employee_spectralink_account_employee_identifier_idx ON public.log_employee_spectralink_account USING btree (employee_identifier);


--
-- Name: log_engine_context_device_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_engine_context_device_device_identifier_idx ON public.log_engine_context_device USING btree (device_identifier);


--
-- Name: log_engine_context_location_location_identifier_entered_at__idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_engine_context_location_location_identifier_entered_at__idx ON public.log_engine_context_location USING btree (location_identifier, entered_at, identifier) WHERE (state = ANY (ARRAY['NORMAL'::text, 'ABSENT'::text, 'WAITING'::text, 'WAITINGLATE'::text, 'NORESPONSE'::text, 'SERVICE'::text, 'VISIT'::text, 'REMINDER'::text, 'NURSING'::text, 'CARING'::text, 'ASSISTANCEBYNURSING'::text, 'ASSISTANCEBYCARING'::text]));


--
-- Name: log_engine_context_location_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_engine_context_location_location_identifier_idx ON public.log_engine_context_location USING btree (location_identifier);


--
-- Name: log_engine_context_patient_patient_identifier_entered_at_i_idx1; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_engine_context_patient_patient_identifier_entered_at_i_idx1 ON public.log_engine_context_patient USING btree (patient_identifier, entered_at, identifier) WHERE (state = ANY (ARRAY['WANDER-CALL-ON'::text, 'WANDER-CALL-OFF'::text]));


--
-- Name: log_engine_context_patient_patient_identifier_entered_at_id_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_engine_context_patient_patient_identifier_entered_at_id_idx ON public.log_engine_context_patient USING btree (patient_identifier, entered_at, identifier) WHERE (state = ANY (ARRAY['REMOTE-CALL-ON'::text, 'REMOTE-CALL-OFF'::text]));


--
-- Name: log_engine_context_patient_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_engine_context_patient_patient_identifier_idx ON public.log_engine_context_patient USING btree (patient_identifier);


--
-- Name: log_location_patient_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_location_patient_location_identifier_idx ON public.log_location_patient USING btree (location_identifier);


--
-- Name: log_location_patient_location_identifier_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_location_patient_location_identifier_patient_identifier_idx ON public.log_location_patient USING gist (location_identifier, patient_identifier, period);


--
-- Name: log_location_patient_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_location_patient_patient_identifier_idx ON public.log_location_patient USING btree (patient_identifier);


--
-- Name: log_patient_cas_mode_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_patient_cas_mode_patient_identifier_idx ON public.log_patient_cas_mode USING btree (patient_identifier);


--
-- Name: log_patient_cas_mode_patient_identifier_period_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_patient_cas_mode_patient_identifier_period_idx ON public.log_patient_cas_mode USING gist (patient_identifier, period);


--
-- Name: log_site_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_site_identifier_idx ON public.log USING btree (site_identifier);


--
-- Name: log_status_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_status_location_identifier_idx ON public.log_status USING btree (location_identifier);


--
-- Name: log_status_status_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX log_status_status_identifier_idx ON public.log_status USING btree (status_identifier);


--
-- Name: management_account_management_management_site_identifier_ma_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX management_account_management_management_site_identifier_ma_idx ON public.management_account_management_site USING btree (management_site_identifier, management_account_identifier);


--
-- Name: management_department_site_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX management_department_site_identifier_idx ON public.management_department USING btree (site_identifier);


--
-- Name: management_device_room_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX management_device_room_identifier_idx ON public.management_device USING btree (room_identifier);


--
-- Name: management_device_server_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX management_device_server_identifier_idx ON public.management_device USING btree (server_identifier);


--
-- Name: management_device_update_account_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX management_device_update_account_identifier_idx ON public.management_device_update USING btree (account_identifier);


--
-- Name: management_device_update_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX management_device_update_device_identifier_idx ON public.management_device_update USING btree (device_identifier);


--
-- Name: management_device_update_server_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX management_device_update_server_identifier_idx ON public.management_device_update USING btree (server_identifier);


--
-- Name: management_device_update_site_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX management_device_update_site_identifier_idx ON public.management_device_update USING btree (site_identifier);


--
-- Name: management_room_department_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX management_room_department_identifier_idx ON public.management_room USING btree (department_identifier);


--
-- Name: management_site_management_se_management_server_identifier__idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX management_site_management_se_management_server_identifier__idx ON public.management_site_management_server USING btree (management_server_identifier, management_site_identifier);


--
-- Name: medication_medication_form_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX medication_medication_form_identifier_idx ON public.medication USING btree (medication_form_identifier);


--
-- Name: message_about_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX message_about_patient_identifier_idx ON public.message USING btree (about_patient_identifier);


--
-- Name: message_from_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX message_from_employee_identifier_idx ON public.message USING btree (from_employee_identifier);


--
-- Name: message_from_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX message_from_patient_identifier_idx ON public.message USING btree (from_patient_identifier);


--
-- Name: message_images_image_identifier_message_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX message_images_image_identifier_message_identifier_idx ON public.message_images USING btree (image_identifier, message_identifier);


--
-- Name: message_read_employees_employee_identifier_message_identifi_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX message_read_employees_employee_identifier_message_identifi_idx ON public.message_read_employees USING btree (employee_identifier, message_identifier);


--
-- Name: message_read_patients_patient_identifier_message_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX message_read_patients_patient_identifier_message_identifier_idx ON public.message_read_patients USING btree (patient_identifier, message_identifier);


--
-- Name: message_to_patients_patient_identifier_message_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX message_to_patients_patient_identifier_message_identifier_idx ON public.message_to_patients USING btree (patient_identifier, message_identifier);


--
-- Name: message_to_roles_role_identifier_message_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX message_to_roles_role_identifier_message_identifier_idx ON public.message_to_roles USING btree (role_identifier, message_identifier);


--
-- Name: mis_connection_department_department_identifier_mis_connect_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX mis_connection_department_department_identifier_mis_connect_idx ON public.mis_connection_department USING btree (department_identifier, mis_connection_identifier);


--
-- Name: mis_connection_employee_employee_identifier_mis_connection__idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX mis_connection_employee_employee_identifier_mis_connection__idx ON public.mis_connection_employee USING btree (employee_identifier, mis_connection_identifier);


--
-- Name: mis_connection_location_location_identifier_mis_connection__idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX mis_connection_location_location_identifier_mis_connection__idx ON public.mis_connection_location USING btree (location_identifier, mis_connection_identifier);


--
-- Name: mis_connection_patient_patient_identifier_mis_connection_id_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX mis_connection_patient_patient_identifier_mis_connection_id_idx ON public.mis_connection_patient USING btree (patient_identifier, mis_connection_identifier);


--
-- Name: notification_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX notification_employee_identifier_idx ON public.notification USING btree (employee_identifier);


--
-- Name: notification_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX notification_location_identifier_idx ON public.notification USING btree (location_identifier);


--
-- Name: notification_status_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX notification_status_identifier_idx ON public.notification USING btree (status_identifier);


--
-- Name: notification_tag_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX notification_tag_idx ON public.notification USING btree (tag);


--
-- Name: patient_administration_inform_preferably_hospital_identifie_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_administration_inform_preferably_hospital_identifie_idx ON public.patient_administration_information USING btree (preferably_hospital_identifier);


--
-- Name: patient_administration_informat_health_insurance_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_administration_informat_health_insurance_identifier_idx ON public.patient_administration_information USING btree (health_insurance_identifier);


--
-- Name: patient_code_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX patient_code_idx ON public.patient USING btree (code) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: patient_contact_administration_contact_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_contact_administration_contact_identifier_idx ON public.patient_contact USING btree (administration_contact_identifier);


--
-- Name: patient_contact_patient_administration_information_identifi_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_contact_patient_administration_information_identifi_idx ON public.patient_contact USING btree (patient_administration_information_identifier);


--
-- Name: patient_group_ui_access_ui_access_identifier_patient_group__idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_group_ui_access_ui_access_identifier_patient_group__idx ON public.patient_group_ui_access USING btree (ui_access_identifier, patient_group_identifier);


--
-- Name: patient_lifeline_message_pend_lifeline_message_identifier_p_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_lifeline_message_pend_lifeline_message_identifier_p_idx ON public.patient_lifeline_message_pending USING btree (lifeline_message_identifier, patient_identifier);


--
-- Name: patient_medical_information_a_allergy_identifier_patient_me_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_medical_information_a_allergy_identifier_patient_me_idx ON public.patient_medical_information_allergies USING btree (allergy_identifier, patient_medical_information_identifier);


--
-- Name: patient_medical_information_blood_type_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_medical_information_blood_type_identifier_idx ON public.patient_medical_information USING btree (blood_type_identifier);


--
-- Name: patient_medical_information_dementia_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_medical_information_dementia_identifier_idx ON public.patient_medical_information USING btree (dementia_identifier);


--
-- Name: patient_medical_information_general_practitioner_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_medical_information_general_practitioner_identifier_idx ON public.patient_medical_information USING btree (general_practitioner_identifier);


--
-- Name: patient_patient_group_patient_group_identifier_patient_iden_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_patient_group_patient_group_identifier_patient_iden_idx ON public.patient_patient_group USING btree (patient_group_identifier, patient_identifier);


--
-- Name: patient_room_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_room_identifier_idx ON public.patient USING btree (room_identifier);


--
-- Name: patient_section_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_section_identifier_idx ON public.patient USING btree (section_identifier);


--
-- Name: patient_session_care_session_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_session_care_session_identifier_idx ON public.patient_session USING btree (care_session_identifier);


--
-- Name: patient_session_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX patient_session_patient_identifier_idx ON public.patient_session USING btree (patient_identifier);


--
-- Name: possible_work_order_code_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX possible_work_order_code_idx ON public.possible_work_order USING btree (code) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: possible_work_order_possible_work_order_top_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX possible_work_order_possible_work_order_top_identifier_idx ON public.possible_work_order USING btree (possible_work_order_top_identifier);


--
-- Name: possible_work_order_role_role_identifier_possible_work_orde_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX possible_work_order_role_role_identifier_possible_work_orde_idx ON public.possible_work_order_role USING btree (role_identifier, possible_work_order_identifier);


--
-- Name: possible_work_order_top_name_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX possible_work_order_top_name_idx ON public.possible_work_order_top USING btree (name) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: process_boot_cycle_process_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX process_boot_cycle_process_identifier_idx ON public.process_boot_cycle USING btree (process_identifier);


--
-- Name: process_site_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX process_site_identifier_idx ON public.process USING btree (site_identifier);


--
-- Name: remote_alarm_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX remote_alarm_patient_identifier_idx ON public.remote_alarm USING btree (patient_identifier);


--
-- Name: remote_alarm_sui_status_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX remote_alarm_sui_status_identifier_idx ON public.remote_alarm USING btree (sui_status_identifier);


--
-- Name: remote_alarm_trusted_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX remote_alarm_trusted_device_identifier_idx ON public.remote_alarm USING btree (trusted_device_identifier);


--
-- Name: rf_module_brand_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX rf_module_brand_identifier_idx ON public.rf_module USING btree (brand_identifier);


--
-- Name: rf_module_brand_name_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX rf_module_brand_name_idx ON public.rf_module_brand USING btree (name) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: rf_module_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX rf_module_location_identifier_idx ON public.rf_module USING btree (location_identifier);


--
-- Name: rf_module_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX rf_module_patient_identifier_idx ON public.rf_module USING btree (patient_identifier);


--
-- Name: rf_module_serial_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX rf_module_serial_idx ON public.rf_module USING btree (serial) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: rf_module_type_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX rf_module_type_identifier_idx ON public.rf_module USING btree (type_identifier);


--
-- Name: rf_module_type_name_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX rf_module_type_name_idx ON public.rf_module_type USING btree (name) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: role_name_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX role_name_idx ON public.role USING btree (name) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: role_status_status_identifier_role_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX role_status_status_identifier_role_identifier_idx ON public.role_status USING btree (status_identifier, role_identifier);


--
-- Name: role_ui_access_ui_access_identifier_role_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX role_ui_access_ui_access_identifier_role_identifier_idx ON public.role_ui_access USING btree (ui_access_identifier, role_identifier);


--
-- Name: roles_engine_call_action_mess_engine_call_action_message_de_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX roles_engine_call_action_mess_engine_call_action_message_de_idx ON public.roles_engine_call_action_message_destination_email USING btree (engine_call_action_message_destination_email_identifier, role_identifier);


--
-- Name: room_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX room_location_identifier_idx ON public.room USING btree (location_identifier);


--
-- Name: service_function_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX service_function_employee_identifier_idx ON public.service_function USING btree (employee_identifier);


--
-- Name: service_function_possible_service_function_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX service_function_possible_service_function_identifier_idx ON public.service_function USING btree (possible_service_function_identifier);


--
-- Name: setting_process_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX setting_process_identifier_idx ON public.setting USING btree (process_identifier);


--
-- Name: setting_site_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX setting_site_identifier_idx ON public.setting USING btree (site_identifier);


--
-- Name: spectralink_account_number_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX spectralink_account_number_idx ON public.spectralink_account USING btree (number) WHERE (cas_mode = ANY (ARRAY['ACTIVE'::public.cas_mode, 'INACTIVE'::public.cas_mode]));


--
-- Name: spectralink_group_location_location_identifier_spectralink__idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX spectralink_group_location_location_identifier_spectralink__idx ON public.spectralink_group_location USING btree (location_identifier, spectralink_group_identifier);


--
-- Name: spectralink_group_spectralink_spectralink_account_identifie_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX spectralink_group_spectralink_spectralink_account_identifie_idx ON public.spectralink_group_spectralink_account USING btree (spectralink_account_identifier, spectralink_group_identifier);


--
-- Name: spectralink_message_account_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX spectralink_message_account_identifier_idx ON public.spectralink_message USING btree (account_identifier);


--
-- Name: spectralink_message_reference_context_location_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX spectralink_message_reference_context_location_identifier_idx ON public.spectralink_message_reference USING btree (context_location_identifier);


--
-- Name: spectralink_message_reference_engine_call_action_message_id_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX spectralink_message_reference_engine_call_action_message_id_idx ON public.spectralink_message_reference USING btree (engine_call_action_message_identifier);


--
-- Name: spectralink_message_reference_tag_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX spectralink_message_reference_tag_idx ON public.spectralink_message_reference USING btree (tag);


--
-- Name: spectralink_message_scheduled_at_identifier_expired_at_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX spectralink_message_scheduled_at_identifier_expired_at_idx ON public.spectralink_message USING btree (scheduled_at, identifier, expired_at) WHERE ((action IS NULL) OR (action <> 136));


--
-- Name: state_cause_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX state_cause_device_identifier_idx ON public.state_cause USING btree (device_identifier);


--
-- Name: state_cause_state_cause_template_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX state_cause_state_cause_template_identifier_idx ON public.state_cause USING btree (state_cause_template_identifier);


--
-- Name: state_cause_template_device_device_identifier_state_cause_t_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX state_cause_template_device_device_identifier_state_cause_t_idx ON public.state_cause_template_device USING btree (device_identifier, state_cause_template_identifier);


--
-- Name: state_machine_state_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX state_machine_state_device_identifier_idx ON public.state_machine_state USING btree (device_identifier);


--
-- Name: string_bluetooth_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX string_bluetooth_device_identifier_idx ON public.string USING btree (bluetooth_device_identifier);


--
-- Name: sui_status_image_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX sui_status_image_identifier_idx ON public.sui_status USING btree (image_identifier);


--
-- Name: sui_status_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX sui_status_patient_identifier_idx ON public.sui_status USING btree (patient_identifier);


--
-- Name: sui_status_trigger_bluetooth_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX sui_status_trigger_bluetooth_device_identifier_idx ON public.sui_status_trigger USING btree (bluetooth_device_identifier);


--
-- Name: sui_status_trigger_on_connected_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX sui_status_trigger_on_connected_identifier_idx ON public.sui_status_trigger USING btree (on_connected_identifier);


--
-- Name: sui_status_trigger_on_disconnected_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX sui_status_trigger_on_disconnected_identifier_idx ON public.sui_status_trigger USING btree (on_disconnected_identifier);


--
-- Name: sui_status_trigger_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX sui_status_trigger_patient_identifier_idx ON public.sui_status_trigger USING btree (patient_identifier);


--
-- Name: sui_status_trigger_wifi_network_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX sui_status_trigger_wifi_network_identifier_idx ON public.sui_status_trigger USING btree (wifi_network_identifier);


--
-- Name: supplement_registration_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX supplement_registration_employee_identifier_idx ON public.supplement_registration USING btree (employee_identifier);


--
-- Name: supplement_registration_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX supplement_registration_patient_identifier_idx ON public.supplement_registration USING btree (patient_identifier);


--
-- Name: supplement_registration_supplement_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX supplement_registration_supplement_identifier_idx ON public.supplement_registration USING btree (supplement_identifier);


--
-- Name: task_types_roles_role_identifier_task_type_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX task_types_roles_role_identifier_task_type_identifier_idx ON public.task_types_roles USING btree (role_identifier, task_type_identifier);


--
-- Name: translation_translation_key_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX translation_translation_key_idx ON public.translation USING btree (translation_key);


--
-- Name: trusted_device_patient_patient_identifier_trusted_device_id_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX trusted_device_patient_patient_identifier_trusted_device_id_idx ON public.trusted_device_patient USING btree (patient_identifier, trusted_device_identifier);


--
-- Name: trusted_device_sui_status_sui_status_identifier_trusted_dev_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX trusted_device_sui_status_sui_status_identifier_trusted_dev_idx ON public.trusted_device_sui_status USING btree (sui_status_identifier, trusted_device_identifier);


--
-- Name: ui_access_platform_view_unique; Type: INDEX; Schema: public; Owner: aperi
--

CREATE UNIQUE INDEX ui_access_platform_view_unique ON public.ui_access USING btree (platform, view);


--
-- Name: webrtc_account_device_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX webrtc_account_device_identifier_idx ON public.webrtc_account USING btree (device_identifier);


--
-- Name: webrtc_account_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX webrtc_account_employee_identifier_idx ON public.webrtc_account USING btree (employee_identifier);


--
-- Name: work_order_employee_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX work_order_employee_identifier_idx ON public.work_order USING btree (employee_identifier);


--
-- Name: work_order_patient_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX work_order_patient_identifier_idx ON public.work_order USING btree (patient_identifier);


--
-- Name: work_order_possible_work_order_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX work_order_possible_work_order_identifier_idx ON public.work_order USING btree (possible_work_order_identifier);


--
-- Name: work_order_timestamp_identifier_idx; Type: INDEX; Schema: public; Owner: aperi
--

CREATE INDEX work_order_timestamp_identifier_idx ON public.work_order USING btree ("timestamp", identifier) WHERE (mailed_at IS NULL);


--
-- Name: patient api_login; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER api_login AFTER INSERT ON public.patient FOR EACH ROW EXECUTE FUNCTION public.trigger_api_login();


--
-- Name: device api_login_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER api_login_insert AFTER INSERT ON public.device FOR EACH ROW EXECUTE FUNCTION public.trigger_api_login();


--
-- Name: employee api_login_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER api_login_insert AFTER INSERT ON public.employee FOR EACH ROW EXECUTE FUNCTION public.trigger_api_login();


--
-- Name: device api_login_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER api_login_update AFTER UPDATE ON public.device FOR EACH ROW WHEN ((old.serial <> new.serial)) EXECUTE FUNCTION public.trigger_api_login();


--
-- Name: employee api_login_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER api_login_update AFTER UPDATE ON public.employee FOR EACH ROW WHEN (((old.cas_user IS DISTINCT FROM new.cas_user) OR (old.cas_password IS DISTINCT FROM new.cas_password))) EXECUTE FUNCTION public.trigger_api_login();


--
-- Name: access_control_access_door_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.access_control_access_door_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: access_door cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.access_door FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: access_door_access_control cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.access_door_access_control FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: access_door_access_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.access_door_access_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: access_door_door_procedure cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.access_door_door_procedure FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: access_door_group_access_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.access_door_group_access_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: access_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.access_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: access_group_badge cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.access_group_badge FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: action_config cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.action_config FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: action_config_dect_to_crews_of_location cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.action_config_dect_to_crews_of_location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: action_config_dect_to_crews_of_location_role cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.action_config_dect_to_crews_of_location_role FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: action_config_dect_to_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.action_config_dect_to_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: action_config_dect_to_group_dect_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.action_config_dect_to_group_dect_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: action_config_spectralink_to_crews_of_location cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.action_config_spectralink_to_crews_of_location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: action_config_spectralink_to_crews_of_location_role cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.action_config_spectralink_to_crews_of_location_role FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: action_config_spectralink_to_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.action_config_spectralink_to_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: action_config_spectralink_to_group_spectralink_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.action_config_spectralink_to_group_spectralink_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: activity cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.activity FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: address cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.address FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: administration_contact cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.administration_contact FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: allergy cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.allergy FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: api_login cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.api_login FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: api_token cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.api_token FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: app_message cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.app_message FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: application_global cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.application_global FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: application_svp cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.application_svp FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: application_svp_crews cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.application_svp_crews FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: application_svp_status cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.application_svp_status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: appointment cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.appointment FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: badge cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.badge FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: blood_type cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.blood_type FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: bluetooth_device cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.bluetooth_device FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: broadcast_call cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.broadcast_call FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: broadcast_call_broadcast_call_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.broadcast_call_broadcast_call_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: broadcast_call_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.broadcast_call_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: broadcast_call_group_device cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.broadcast_call_group_device FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: call_reason cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.call_reason FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: call_reason_category cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.call_reason_category FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: callback_queue cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.callback_queue FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: camera cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.camera FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: care cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.care FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: care_action cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.care_action FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: care_action_signature cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.care_action_signature FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: care_session cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.care_session FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: cas_report cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.cas_report FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: cas_session cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE ON public.cas_session FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: com_port cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.com_port FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: contact cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.contact FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: contact_list cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.contact_list FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: crew cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.crew FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: crew_location cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.crew_location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: day_night cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.day_night FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: dect_account cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.dect_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: dect_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.dect_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: dect_group_dect_account cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.dect_group_dect_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: dect_group_location cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.dect_group_location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: dect_message cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.dect_message FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: dect_message_queue cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.dect_message_queue FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: default_text cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.default_text FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: dementia cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.dementia FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: department cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.department FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: device cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.device FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: device_status cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.device_status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: diary cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.diary FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: diary_patient cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.diary_patient FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: diary_read cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.diary_read FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: door_procedure cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.door_procedure FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: email cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.email FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: employee cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.employee FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: employee_authorization cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.employee_authorization FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_action cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_action FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action_message cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action_message FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action_message_app cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action_message_app FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action_message_dect cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action_message_dect FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action_message_destination_dect cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action_message_destination_dect FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action_message_destination_email cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action_message_destination_email FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action_message_destination_employee cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action_message_destination_employee FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action_message_destination_employee_role cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action_message_destination_employee_role FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action_message_destination_spectralink cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action_message_destination_spectralink FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action_message_email cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action_message_email FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action_message_spectralink cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action_message_spectralink FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action_viewpoint_notification cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action_viewpoint_notification FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_call_action_viewpoint_status cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_call_action_viewpoint_status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_device_configuration_profile cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_device_configuration_profile FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_event cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_event FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_event_access_denied cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_event_access_denied FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_event_access_entered cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_event_access_entered FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_event_access_left cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_event_access_left FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_event_badge_provided cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_event_badge_provided FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_event_badge_provisioned cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_event_badge_provisioned FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_event_rf_module_provided cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_event_rf_module_provided FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_event_viewpoint_state_changed cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_event_viewpoint_state_changed FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: engine_server_configuration_profile cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.engine_server_configuration_profile FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: espa_in_message cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.espa_in_message FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: fcm_account cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.fcm_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: flyway_schema_history cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.flyway_schema_history FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: general_practitioner cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.general_practitioner FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: gps_signal cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.gps_signal FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: heartbeat cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.heartbeat FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: hulp_call cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.hulp_call FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: image cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.image FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: lifeline_message cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.lifeline_message FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: lifeline_message_answer cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.lifeline_message_answer FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: lifeline_message_button cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.lifeline_message_button FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: locality cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.locality FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: location cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: location_call cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.location_call FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: location_call_callback cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.location_call_callback FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: location_call_employee_presence cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.location_call_employee_presence FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: location_call_patient_in_location cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.location_call_patient_in_location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: location_call_state_change cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.location_call_state_change FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: location_gateway_device_gateway cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.location_gateway_device_gateway FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: location_patient cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.location_patient FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: log cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.log FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: log_care cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.log_care FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: log_door cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.log_door FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: log_duty cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.log_duty FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: log_employee_dect_account cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.log_employee_dect_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: log_employee_spectralink_account cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.log_employee_spectralink_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: log_engine_context_device cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.log_engine_context_device FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: log_engine_context_location cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.log_engine_context_location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: log_engine_context_patient cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.log_engine_context_patient FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: log_location_patient cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.log_location_patient FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: log_patient_cas_mode cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.log_patient_cas_mode FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: log_status cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.log_status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: management_account cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.management_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: management_account_management_site cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.management_account_management_site FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: management_department cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.management_department FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: management_device cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.management_device FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: management_device_update cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.management_device_update FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: management_room cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.management_room FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: management_server cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.management_server FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: management_site cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.management_site FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: management_site_management_server cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.management_site_management_server FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_bloodpressure cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_bloodpressure FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_bloodsample cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_bloodsample FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_glycemia cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_glycemia FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_length cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_length FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_morsefallscale cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_morsefallscale FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_oxygensaturation cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_oxygensaturation FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_pulse cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_pulse FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_signature cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_signature FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_stoolrecord cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_stoolrecord FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_temperature cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_temperature FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_urineoutput cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_urineoutput FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_visualpainscale cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_visualpainscale FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_waterlowscale cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_waterlowscale FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: measurement_weight cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.measurement_weight FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: medication cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.medication FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: medication_form cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.medication_form FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: medication_signature cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.medication_signature FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: medication_signature_detail cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.medication_signature_detail FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: medication_type cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.medication_type FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: message cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.message FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: message_images cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.message_images FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: message_read_employees cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.message_read_employees FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: message_read_patients cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.message_read_patients FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: message_to_patients cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.message_to_patients FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: message_to_roles cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.message_to_roles FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_care_action cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_care_action FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_care_action_signature cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_care_action_signature FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_department cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_department FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_diary cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_diary FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_employee cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_employee FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_location cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_measurement_signature cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_measurement_signature FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_medication_signature cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_medication_signature FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_medication_type cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_medication_type FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_patient cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_patient FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_planned_care_action cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_planned_care_action FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_planned_measurement cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_planned_measurement FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_planned_medication cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_planned_medication FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_section cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_section FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection_site cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_site FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: monitor_status_device cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.monitor_status_device FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: monitor_status_server cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.monitor_status_server FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: notification cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.notification FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: organization cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.organization FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient_administration_information cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient_administration_information FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient_contact cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient_contact FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient_group_ui_access cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient_group_ui_access FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient_identification cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient_identification FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient_info cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient_info FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient_lifeline_message_pending cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient_lifeline_message_pending FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient_medical_information cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient_medical_information FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient_medical_information_allergies cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient_medical_information_allergies FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient_patient_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient_patient_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient_session cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient_session FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: patient_social_information cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.patient_social_information FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: period cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.period FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: picture cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.picture FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: planned_care_action cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.planned_care_action FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: planned_measurement cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.planned_measurement FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: planned_medication cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.planned_medication FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: planned_medication_detail cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.planned_medication_detail FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: possible_service_function cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.possible_service_function FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: possible_work_order cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.possible_work_order FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: possible_work_order_role cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.possible_work_order_role FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: possible_work_order_top cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.possible_work_order_top FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: predefined_broadcast_call cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.predefined_broadcast_call FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: process cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.process FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: process_boot_cycle cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.process_boot_cycle FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: radio cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.radio FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: remote_alarm cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.remote_alarm FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: rf_module cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.rf_module FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: rf_module_brand cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.rf_module_brand FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: rf_module_type cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.rf_module_type FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: role cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.role FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: role_status cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.role_status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: role_ui_access cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.role_ui_access FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: roles_engine_call_action_message_destination_email cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.roles_engine_call_action_message_destination_email FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: room cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.room FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: section cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.section FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: service_function cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.service_function FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: setting cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.setting FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: shortcut cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.shortcut FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: shortcut_role cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.shortcut_role FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: site cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.site FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: spectralink_account cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.spectralink_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: spectralink_group cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.spectralink_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: spectralink_group_location cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.spectralink_group_location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: spectralink_group_spectralink_account cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.spectralink_group_spectralink_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: spectralink_message cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.spectralink_message FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: spectralink_message_queue cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.spectralink_message_queue FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: spectralink_message_reference cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.spectralink_message_reference FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: state_cause cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.state_cause FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: state_cause_template cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.state_cause_template FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: state_cause_template_device cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.state_cause_template_device FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: state_machine_change_action_config cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.state_machine_change_action_config FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: state_machine_state cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.state_machine_state FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: status cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: status_app cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.status_app FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: status_dect cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.status_dect FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: string cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.string FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: sui_patient_info cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.sui_patient_info FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: sui_status cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.sui_status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: sui_status_trigger cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.sui_status_trigger FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: supplement cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.supplement FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: supplement_registration cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.supplement_registration FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: task_type cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.task_type FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: task_types_roles cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.task_types_roles FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: translation cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.translation FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: trusted_device cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.trusted_device FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: trusted_device_patient cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.trusted_device_patient FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: trusted_device_sui_status cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.trusted_device_sui_status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: ui_access cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.ui_access FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: version_history cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.version_history FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: webrtc_account cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.webrtc_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: wifi_network cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.wifi_network FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: work_order cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.work_order FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: yunction_log cas_audit_log; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_audit_log AFTER INSERT OR DELETE OR UPDATE ON public.yunction_log FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_audit_log();


--
-- Name: mis_connection cas_mis_connection_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_mis_connection_notification_delete AFTER DELETE ON public.mis_connection FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_mis_connection_notification();


--
-- Name: mis_connection cas_mis_connection_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_mis_connection_notification_insert AFTER INSERT ON public.mis_connection FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_mis_connection_notification();


--
-- Name: mis_connection cas_mis_connection_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_mis_connection_notification_update AFTER UPDATE ON public.mis_connection FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_mis_connection_notification();


--
-- Name: access_door cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.access_door FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: access_door_access_group cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.access_door_access_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: access_door_door_procedure cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.access_door_door_procedure FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: access_group cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.access_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: access_group_badge cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.access_group_badge FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: activity cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.activity FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: application_global cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.application_global FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: application_svp_crews cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE ON public.application_svp_crews FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: badge cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.badge FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: call_reason_category cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.call_reason_category FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: camera cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.camera FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: cas_report cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.cas_report FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: crew cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.crew FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: crew_location cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.crew_location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: dect_account cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.dect_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: dect_group cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.dect_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: dect_group_dect_account cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.dect_group_dect_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: dect_group_location cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.dect_group_location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: department cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.department FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: device cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.device FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: device_status cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.device_status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: door_procedure cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.door_procedure FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: email cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.email FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: employee cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.employee FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: location cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: location_gateway_device_gateway cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.location_gateway_device_gateway FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: location_patient cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.location_patient FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: mis_connection_department cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_department FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: mis_connection_employee cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_employee FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: mis_connection_location cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: mis_connection_patient cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.mis_connection_patient FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: patient cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.patient FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: patient_identification cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.patient_identification FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: possible_work_order cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.possible_work_order FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: possible_work_order_role cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.possible_work_order_role FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: possible_work_order_top cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.possible_work_order_top FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: rf_module cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.rf_module FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: rf_module_brand cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.rf_module_brand FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: rf_module_type cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.rf_module_type FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: role cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.role FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: site cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.site FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: spectralink_account cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.spectralink_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: spectralink_group cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.spectralink_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: spectralink_group_location cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.spectralink_group_location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: spectralink_group_spectralink_account cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.spectralink_group_spectralink_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: status cas_version_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_after AFTER INSERT OR DELETE OR UPDATE ON public.status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_version_after();


--
-- Name: access_door cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.access_door FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: access_group cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.access_group FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: activity cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.activity FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: application_svp cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.application_svp FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: badge cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.badge FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: call_reason_category cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.call_reason_category FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: camera cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.camera FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: crew cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.crew FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: dect_account cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.dect_account FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: dect_group cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.dect_group FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: department cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.department FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: device cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.device FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: device_status cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.device_status FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: door_procedure cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.door_procedure FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: email cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.email FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: employee cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.employee FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: location cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.location FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: mis_connection_department cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.mis_connection_department FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: mis_connection_employee cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.mis_connection_employee FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: mis_connection_location cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.mis_connection_location FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: mis_connection_patient cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.mis_connection_patient FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: patient cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.patient FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: patient_identification cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.patient_identification FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: possible_work_order cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.possible_work_order FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: possible_work_order_top cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.possible_work_order_top FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: rf_module cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.rf_module FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: rf_module_brand cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.rf_module_brand FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: rf_module_type cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.rf_module_type FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: role cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.role FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: spectralink_account cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.spectralink_account FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: spectralink_group cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.spectralink_group FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: status cas_version_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER cas_version_before BEFORE UPDATE ON public.status FOR EACH ROW WHEN ((old.cas_version = new.cas_version)) EXECUTE FUNCTION public.trigger_cas_version_before();


--
-- Name: dect_message_queue dect_message_queue_inserted_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER dect_message_queue_inserted_trigger AFTER INSERT ON public.dect_message_queue FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('dect_message_queue_inserted');


--
-- Name: employee employee_not_active_after; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER employee_not_active_after AFTER UPDATE ON public.employee FOR EACH ROW WHEN (((old.cas_mode <> new.cas_mode) AND (new.cas_mode <> 'ACTIVE'::public.cas_mode))) EXECUTE FUNCTION public.trigger_employee_not_active_after();


--
-- Name: employee employee_not_active_before; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER employee_not_active_before BEFORE INSERT OR UPDATE ON public.employee FOR EACH ROW WHEN ((new.cas_mode <> 'ACTIVE'::public.cas_mode)) EXECUTE FUNCTION public.trigger_employee_not_active_before();


--
-- Name: location location_care; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER location_care BEFORE INSERT ON public.location FOR EACH ROW EXECUTE FUNCTION public.trigger_location_care();


--
-- Name: location location_room; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER location_room AFTER INSERT OR UPDATE ON public.location FOR EACH ROW EXECUTE FUNCTION public.trigger_location_room();


--
-- Name: location_patient location_room; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER location_room AFTER INSERT OR DELETE ON public.location_patient FOR EACH ROW EXECUTE FUNCTION public.trigger_location_room();


--
-- Name: care_session log_care_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_care_insert AFTER INSERT ON public.care_session FOR EACH ROW EXECUTE FUNCTION public.trigger_log_care();


--
-- Name: care_session log_care_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_care_update AFTER UPDATE ON public.care_session FOR EACH ROW WHEN ((old.timestamp_leave IS DISTINCT FROM new.timestamp_leave)) EXECUTE FUNCTION public.trigger_log_care();


--
-- Name: activity log_duty_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_duty_delete AFTER DELETE ON public.activity FOR EACH ROW WHEN (old.active) EXECUTE FUNCTION public.trigger_log_duty();


--
-- Name: activity log_duty_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_duty_insert AFTER INSERT ON public.activity FOR EACH ROW WHEN (new.active) EXECUTE FUNCTION public.trigger_log_duty();


--
-- Name: activity log_duty_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_duty_update AFTER UPDATE ON public.activity FOR EACH ROW WHEN ((old.active <> new.active)) EXECUTE FUNCTION public.trigger_log_duty();


--
-- Name: employee log_employee_dect_account_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_employee_dect_account_delete AFTER DELETE ON public.employee FOR EACH ROW WHEN ((old.dect_account_identifier IS NOT NULL)) EXECUTE FUNCTION public.trigger_log_employee_dect_account();


--
-- Name: employee log_employee_dect_account_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_employee_dect_account_insert AFTER INSERT ON public.employee FOR EACH ROW WHEN ((new.dect_account_identifier IS NOT NULL)) EXECUTE FUNCTION public.trigger_log_employee_dect_account();


--
-- Name: employee log_employee_dect_account_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_employee_dect_account_update AFTER UPDATE ON public.employee FOR EACH ROW WHEN ((old.dect_account_identifier IS DISTINCT FROM new.dect_account_identifier)) EXECUTE FUNCTION public.trigger_log_employee_dect_account();


--
-- Name: employee log_employee_spectralink_account_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_employee_spectralink_account_delete AFTER DELETE ON public.employee FOR EACH ROW WHEN ((old.spectralink_account_identifier IS NOT NULL)) EXECUTE FUNCTION public.trigger_log_employee_spectralink_account();


--
-- Name: employee log_employee_spectralink_account_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_employee_spectralink_account_insert AFTER INSERT ON public.employee FOR EACH ROW WHEN ((new.spectralink_account_identifier IS NOT NULL)) EXECUTE FUNCTION public.trigger_log_employee_spectralink_account();


--
-- Name: employee log_employee_spectralink_account_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_employee_spectralink_account_update AFTER UPDATE ON public.employee FOR EACH ROW WHEN ((old.spectralink_account_identifier IS DISTINCT FROM new.spectralink_account_identifier)) EXECUTE FUNCTION public.trigger_log_employee_spectralink_account();


--
-- Name: location_patient log_location_patient; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_location_patient AFTER INSERT OR DELETE ON public.location_patient FOR EACH ROW EXECUTE FUNCTION public.trigger_log_location_patient();


--
-- Name: patient log_patient_cas_mode_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_patient_cas_mode_delete AFTER DELETE ON public.patient FOR EACH ROW WHEN ((old.cas_mode = 'ACTIVE'::public.cas_mode)) EXECUTE FUNCTION public.trigger_log_patient_cas_mode();


--
-- Name: patient log_patient_cas_mode_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_patient_cas_mode_insert AFTER INSERT ON public.patient FOR EACH ROW WHEN ((new.cas_mode = 'ACTIVE'::public.cas_mode)) EXECUTE FUNCTION public.trigger_log_patient_cas_mode();


--
-- Name: patient log_patient_cas_mode_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_patient_cas_mode_update AFTER UPDATE ON public.patient FOR EACH ROW WHEN (((old.cas_mode <> new.cas_mode) AND ((old.cas_mode = 'ACTIVE'::public.cas_mode) OR (new.cas_mode = 'ACTIVE'::public.cas_mode)))) EXECUTE FUNCTION public.trigger_log_patient_cas_mode();


--
-- Name: care log_status; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_status AFTER UPDATE ON public.care FOR EACH ROW WHEN ((old.status_identifier <> new.status_identifier)) EXECUTE FUNCTION public.trigger_log_status();


--
-- Name: location log_status; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER log_status AFTER INSERT ON public.location FOR EACH ROW EXECUTE FUNCTION public.trigger_log_status();


--
-- Name: mis_connection mis_sync; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER mis_sync BEFORE DELETE ON public.mis_connection FOR EACH ROW EXECUTE FUNCTION public.trigger_mis_sync();


--
-- Name: activity notify_activity_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_activity_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.activity FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('activity_changes');


--
-- Name: callback_queue notify_callback_queue_inserted_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_callback_queue_inserted_trigger AFTER INSERT ON public.callback_queue FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('callback_queue_inserted');


--
-- Name: care notify_care_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_care_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.care FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('care_changes');


--
-- Name: care_session notify_care_session_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_care_session_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.care_session FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('care_session_changes');


--
-- Name: crew_location notify_crew_location_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_crew_location_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.crew_location FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('crew_location_changes');


--
-- Name: device notify_device_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_device_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.device FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('device_changes');


--
-- Name: employee notify_employee_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_employee_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.employee FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('employee_changes');


--
-- Name: engine_event_rf_module_provided notify_engine_event_rf_module_provided_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_engine_event_rf_module_provided_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.engine_event_rf_module_provided FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('engine_event_rf_module_provided_changes');


--
-- Name: engine_event notify_engine_insert_badge_provided_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_engine_insert_badge_provided_trigger AFTER INSERT ON public.engine_event FOR EACH ROW WHEN ((new.badge_provided_identifier IS NOT NULL)) EXECUTE FUNCTION public.simple_notify('engine_event_badge_provided_changes');


--
-- Name: location_call notify_location_call_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_location_call_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.location_call FOR EACH ROW EXECUTE FUNCTION public.notify_location_call_updated();


--
-- Name: location_call_employee_presence notify_location_call_employee_presence_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_location_call_employee_presence_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.location_call_employee_presence FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('location_call_employee_presence_changes');


--
-- Name: location notify_location_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_location_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.location FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('location_changes');


--
-- Name: notification notify_notification_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_notification_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.notification FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('notification_changes');


--
-- Name: patient notify_patient_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_patient_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.patient FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('patient_changes');


--
-- Name: translation notify_translation_changes_trigger; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER notify_translation_changes_trigger AFTER INSERT OR DELETE OR UPDATE ON public.translation FOR EACH STATEMENT EXECUTE FUNCTION public.simple_notify('translation_changes');


--
-- Name: message_to_patients patient_lifeline_message_pending_add; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER patient_lifeline_message_pending_add AFTER INSERT ON public.message_to_patients FOR EACH ROW EXECUTE FUNCTION public.patient_lifeline_message_pending_add();


--
-- Name: lifeline_message_answer patient_lifeline_message_pending_remove; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER patient_lifeline_message_pending_remove AFTER INSERT ON public.lifeline_message_answer FOR EACH ROW EXECUTE FUNCTION public.patient_lifeline_message_pending_remove();


--
-- Name: patient patient_name; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER patient_name BEFORE INSERT OR UPDATE ON public.patient FOR EACH ROW EXECUTE FUNCTION public.trigger_patient_name();


--
-- Name: patient sui_patient_info; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER sui_patient_info AFTER INSERT ON public.patient FOR EACH ROW EXECUTE FUNCTION public.trigger_sui_patient_info();


--
-- Name: care_session trigger_care_session_insert_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_care_session_insert_update AFTER INSERT OR UPDATE ON public.care_session FOR EACH ROW EXECUTE FUNCTION public.trigger_care_session_location_call();


--
-- Name: care trigger_care_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_care_update AFTER UPDATE ON public.care FOR EACH ROW EXECUTE FUNCTION public.trigger_care_location_call();


--
-- Name: access_door trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.access_door FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: access_group trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.access_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: badge trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.badge FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: call_reason_category trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.call_reason_category FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: camera trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.camera FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: crew trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.crew FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: dect_account trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.dect_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: dect_group trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.dect_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: department trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.department FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: device trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.device FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: device_status trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.device_status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: door_procedure trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.door_procedure FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: employee trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.employee FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: location trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: patient trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.patient FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: possible_work_order trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.possible_work_order FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: possible_work_order_top trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.possible_work_order_top FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: rf_module trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.rf_module FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: rf_module_brand trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.rf_module_brand FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: rf_module_type trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.rf_module_type FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: role trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.role FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: spectralink_account trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.spectralink_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: spectralink_group trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.spectralink_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: status trigger_cas_notification_delete; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_delete AFTER DELETE ON public.status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: access_door trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.access_door FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: access_group trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.access_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: badge trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.badge FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: call_reason_category trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.call_reason_category FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: camera trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.camera FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: crew trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.crew FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: dect_account trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.dect_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: dect_group trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.dect_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: department trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.department FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: device trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.device FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: device_status trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.device_status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: door_procedure trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.door_procedure FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: employee trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.employee FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: location trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.location FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: patient trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.patient FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: possible_work_order trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.possible_work_order FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: possible_work_order_top trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.possible_work_order_top FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: rf_module trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.rf_module FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: rf_module_brand trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.rf_module_brand FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: rf_module_type trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.rf_module_type FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: role trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.role FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: spectralink_account trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.spectralink_account FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: spectralink_group trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.spectralink_group FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: status trigger_cas_notification_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_insert AFTER INSERT ON public.status FOR EACH ROW EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: access_door trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.access_door FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: access_group trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.access_group FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: badge trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.badge FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: call_reason_category trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.call_reason_category FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: camera trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.camera FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: crew trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.crew FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: dect_account trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.dect_account FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: dect_group trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.dect_group FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: department trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.department FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: device trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.device FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: device_status trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.device_status FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: door_procedure trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.door_procedure FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: employee trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.employee FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: location trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.location FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: patient trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.patient FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: possible_work_order trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.possible_work_order FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: possible_work_order_top trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.possible_work_order_top FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: rf_module trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.rf_module FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: rf_module_brand trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.rf_module_brand FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: rf_module_type trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.rf_module_type FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: role trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.role FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: spectralink_account trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.spectralink_account FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: spectralink_group trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.spectralink_group FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: status trigger_cas_notification_update; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_cas_notification_update AFTER UPDATE ON public.status FOR EACH ROW WHEN ((old.cas_version <> new.cas_version)) EXECUTE FUNCTION public.trigger_cas_notification();


--
-- Name: employee trigger_employee_authorization_insert; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_employee_authorization_insert AFTER INSERT ON public.employee FOR EACH ROW EXECUTE FUNCTION public.trigger_employee_authorization();


--
-- Name: mis_connection_employee trigger_mis_legacy; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_mis_legacy AFTER INSERT OR UPDATE ON public.mis_connection_employee FOR EACH ROW EXECUTE FUNCTION public.trigger_mis_legacy();


--
-- Name: mis_connection_patient trigger_mis_legacy; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_mis_legacy AFTER INSERT OR UPDATE ON public.mis_connection_patient FOR EACH ROW EXECUTE FUNCTION public.trigger_mis_legacy();


--
-- Name: application_global trigger_prune_application_global_device; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_application_global_device AFTER DELETE ON public.application_global FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_application_global_device();


--
-- Name: webrtc_account trigger_prune_camera_webrtc_account; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_camera_webrtc_account AFTER DELETE ON public.webrtc_account FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_camera_webrtc_account();


--
-- Name: engine_call_action_message_destination_employee trigger_prune_e_c_a_m_d_employee_engine_call_action_message_app; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_e_c_a_m_d_employee_engine_call_action_message_app AFTER DELETE ON public.engine_call_action_message_destination_employee FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_e_c_a_m_d_employee_engine_call_action_message_app();


--
-- Name: engine_call_action_message_destination_employee trigger_prune_e_c_a_m_d_employee_engine_call_action_message_emp; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_e_c_a_m_d_employee_engine_call_action_message_emp AFTER DELETE ON public.engine_call_action_message_destination_employee FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_e_c_a_m_d_employee_engine_call_action_message_emp();


--
-- Name: employee trigger_prune_employee_fcm_account; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_employee_fcm_account AFTER DELETE ON public.employee FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_employee_fcm_account();


--
-- Name: engine_call_action trigger_prune_engine_call_action_engine_call_action_message; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_call_action_engine_call_action_message AFTER DELETE ON public.engine_call_action FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_call_action_engine_call_action_message();


--
-- Name: engine_call_action trigger_prune_engine_call_action_engine_call_action_viewpoint_n; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_call_action_engine_call_action_viewpoint_n AFTER DELETE ON public.engine_call_action FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_call_action_engine_call_action_viewpoint_n();


--
-- Name: engine_call_action trigger_prune_engine_call_action_engine_call_action_viewpoint_s; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_call_action_engine_call_action_viewpoint_s AFTER DELETE ON public.engine_call_action FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_call_action_engine_call_action_viewpoint_s();


--
-- Name: engine_call_action_message_destination_employee trigger_prune_engine_call_action_message_dect_engine_call_actio; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_call_action_message_dect_engine_call_actio AFTER DELETE ON public.engine_call_action_message_destination_employee FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_call_action_message_dect_engine_call_actio();


--
-- Name: engine_call_action_message_destination_dect trigger_prune_engine_call_action_message_destination_dect_engin; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_call_action_message_destination_dect_engin AFTER DELETE ON public.engine_call_action_message_destination_dect FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_call_action_message_destination_dect_engin();


--
-- Name: engine_call_action_message_destination_email trigger_prune_engine_call_action_message_destination_email_engi; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_call_action_message_destination_email_engi AFTER DELETE ON public.engine_call_action_message_destination_email FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_call_action_message_destination_email_engi();


--
-- Name: engine_call_action_message_destination_spectralink trigger_prune_engine_call_action_message_destination_spectralin; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_call_action_message_destination_spectralin AFTER DELETE ON public.engine_call_action_message_destination_spectralink FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_call_action_message_destination_spectralin();


--
-- Name: engine_call_action_message_destination_employee trigger_prune_engine_call_action_message_spectralink_engine_cal; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_call_action_message_spectralink_engine_cal AFTER DELETE ON public.engine_call_action_message_destination_employee FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_call_action_message_spectralink_engine_cal();


--
-- Name: engine_event trigger_prune_engine_event_badge_engine_event_badge_provided; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_event_badge_engine_event_badge_provided AFTER DELETE ON public.engine_event FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_event_badge_engine_event_badge_provided();


--
-- Name: engine_event trigger_prune_engine_event_badge_engine_event_badge_provisioned; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_event_badge_engine_event_badge_provisioned AFTER DELETE ON public.engine_event FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_event_badge_engine_event_badge_provisioned();


--
-- Name: engine_event trigger_prune_engine_event_badge_rf_module_event_rf_module_prov; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_event_badge_rf_module_event_rf_module_prov AFTER DELETE ON public.engine_event FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_event_badge_rf_module_event_rf_module_prov();


--
-- Name: engine_event trigger_prune_engine_event_engine_event_access_denied; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_event_engine_event_access_denied AFTER DELETE ON public.engine_event FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_event_engine_event_access_denied();


--
-- Name: engine_event trigger_prune_engine_event_engine_event_access_entered; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_event_engine_event_access_entered AFTER DELETE ON public.engine_event FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_event_engine_event_access_entered();


--
-- Name: engine_event trigger_prune_engine_event_engine_event_access_left; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_event_engine_event_access_left AFTER DELETE ON public.engine_event FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_event_engine_event_access_left();


--
-- Name: engine_event trigger_prune_engine_event_engine_event_viewpoint_state_changed; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_engine_event_engine_event_viewpoint_state_changed AFTER DELETE ON public.engine_event FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_engine_event_engine_event_viewpoint_state_changed();


--
-- Name: general_practitioner trigger_prune_general_practitioner_administration_contact; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_general_practitioner_administration_contact AFTER DELETE ON public.general_practitioner FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_general_practitioner_administration_contact();


--
-- Name: location trigger_prune_location_care; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_location_care AFTER DELETE ON public.location FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_location_care();


--
-- Name: message trigger_prune_message_lifeline_message; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_message_lifeline_message AFTER DELETE ON public.message FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_message_lifeline_message();


--
-- Name: organization trigger_prune_organization_administration_contact; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_organization_administration_contact AFTER DELETE ON public.organization FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_organization_administration_contact();


--
-- Name: patient trigger_prune_patient_patient_administration_information; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_patient_patient_administration_information AFTER DELETE ON public.patient FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_patient_patient_administration_information();


--
-- Name: patient trigger_prune_patient_patient_medical_information; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_patient_patient_medical_information AFTER DELETE ON public.patient FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_patient_patient_medical_information();


--
-- Name: patient trigger_prune_patient_patient_social_information; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_patient_patient_social_information AFTER DELETE ON public.patient FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_patient_patient_social_information();


--
-- Name: status trigger_prune_status_status_app; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_status_status_app AFTER DELETE ON public.status FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_status_status_app();


--
-- Name: status trigger_prune_status_status_dect; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_status_status_dect AFTER DELETE ON public.status FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_status_status_dect();


--
-- Name: sui_patient_info trigger_prune_sui_patient_info_patient; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_prune_sui_patient_info_patient AFTER DELETE ON public.sui_patient_info FOR EACH ROW EXECUTE FUNCTION public.trigger_prune_sui_patient_info_patient();


--
-- Name: spectralink_message trigger_spectralink_message_external_identifier; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER trigger_spectralink_message_external_identifier BEFORE INSERT ON public.spectralink_message FOR EACH ROW EXECUTE FUNCTION public.trigger_spectralink_message_external_identifier();


--
-- Name: monitor_status_device update_device_updatedtimestamp; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER update_device_updatedtimestamp BEFORE UPDATE ON public.monitor_status_device FOR EACH ROW EXECUTE FUNCTION public.update_updatedtimestamp();


--
-- Name: monitor_status_server update_server_updatedtimestamp; Type: TRIGGER; Schema: public; Owner: aperi
--

CREATE TRIGGER update_server_updatedtimestamp BEFORE UPDATE ON public.monitor_status_server FOR EACH ROW EXECUTE FUNCTION public.update_updatedtimestamp();


--
-- Name: access_door_access_control access_door_access_control_access_door_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door_access_control
    ADD CONSTRAINT access_door_access_control_access_door_identifier_fkey FOREIGN KEY (access_door_identifier) REFERENCES public.access_door(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: access_door_access_group access_door_access_group_access_door_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door_access_group
    ADD CONSTRAINT access_door_access_group_access_door_identifier_fkey FOREIGN KEY (access_door_identifier) REFERENCES public.access_door(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: access_door_access_group access_door_access_group_access_group_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door_access_group
    ADD CONSTRAINT access_door_access_group_access_group_identifier_fkey FOREIGN KEY (access_group_identifier) REFERENCES public.access_group(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: access_door access_door_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door
    ADD CONSTRAINT access_door_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: access_door_door_procedure access_door_door_procedure_access_door_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door_door_procedure
    ADD CONSTRAINT access_door_door_procedure_access_door_identifier_fkey FOREIGN KEY (access_door_identifier) REFERENCES public.access_door(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: access_door_door_procedure access_door_door_procedure_door_procedure_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door_door_procedure
    ADD CONSTRAINT access_door_door_procedure_door_procedure_identifier_fkey FOREIGN KEY (door_procedure_identifier) REFERENCES public.door_procedure(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: access_door_group_access_group access_door_group_access_group_access_group_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_door_group_access_group
    ADD CONSTRAINT access_door_group_access_group_access_group_identifier_fkey FOREIGN KEY (access_group_identifier) REFERENCES public.access_group(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: access_group_badge access_group_badge_access_group_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_group_badge
    ADD CONSTRAINT access_group_badge_access_group_identifier_fkey FOREIGN KEY (access_group_identifier) REFERENCES public.access_group(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: access_group_badge access_group_badge_badge_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.access_group_badge
    ADD CONSTRAINT access_group_badge_badge_identifier_fkey FOREIGN KEY (badge_identifier) REFERENCES public.badge(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: action_config_dect_to_crews_of_location_role action_config_dect_to_crews_o_action_config_dect_to_crews__fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_crews_of_location_role
    ADD CONSTRAINT action_config_dect_to_crews_o_action_config_dect_to_crews__fkey FOREIGN KEY (action_config_dect_to_crews_of_location_identifier) REFERENCES public.action_config_dect_to_crews_of_location(identifier) ON DELETE CASCADE;


--
-- Name: action_config_dect_to_crews_of_location action_config_dect_to_crews_of_lo_action_config_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_crews_of_location
    ADD CONSTRAINT action_config_dect_to_crews_of_lo_action_config_identifier_fkey FOREIGN KEY (action_config_identifier) REFERENCES public.action_config(identifier) ON DELETE CASCADE;


--
-- Name: action_config_dect_to_crews_of_location_role action_config_dect_to_crews_of_location_ro_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_crews_of_location_role
    ADD CONSTRAINT action_config_dect_to_crews_of_location_ro_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON DELETE CASCADE;


--
-- Name: action_config_dect_to_group action_config_dect_to_group_action_config_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_group
    ADD CONSTRAINT action_config_dect_to_group_action_config_identifier_fkey FOREIGN KEY (action_config_identifier) REFERENCES public.action_config(identifier) ON DELETE CASCADE;


--
-- Name: action_config_dect_to_group_dect_group action_config_dect_to_group_d_action_config_dect_to_group__fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_group_dect_group
    ADD CONSTRAINT action_config_dect_to_group_d_action_config_dect_to_group__fkey FOREIGN KEY (action_config_dect_to_group_identifier) REFERENCES public.action_config_dect_to_group(identifier) ON DELETE CASCADE;


--
-- Name: action_config_dect_to_group_dect_group action_config_dect_to_group_dect_gro_dect_group_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_dect_to_group_dect_group
    ADD CONSTRAINT action_config_dect_to_group_dect_gro_dect_group_identifier_fkey FOREIGN KEY (dect_group_identifier) REFERENCES public.dect_group(identifier) ON DELETE CASCADE;


--
-- Name: action_config_spectralink_to_group_spectralink_group action_config_spectralink_to__action_config_spectralink_to_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_group_spectralink_group
    ADD CONSTRAINT action_config_spectralink_to__action_config_spectralink_to_fkey FOREIGN KEY (action_config_spectralink_to_group_identifier) REFERENCES public.action_config_spectralink_to_group(identifier) ON DELETE CASCADE;


--
-- Name: action_config_spectralink_to_group_spectralink_group action_config_spectralink_to__spectralink_group_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_group_spectralink_group
    ADD CONSTRAINT action_config_spectralink_to__spectralink_group_identifier_fkey FOREIGN KEY (spectralink_group_identifier) REFERENCES public.spectralink_group(identifier) ON DELETE CASCADE;


--
-- Name: action_config_spectralink_to_crews_of_location_role action_config_spectralink_to_action_config_spectralink_to_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_crews_of_location_role
    ADD CONSTRAINT action_config_spectralink_to_action_config_spectralink_to_fkey1 FOREIGN KEY (action_config_spectralink_to_crews_of_location_identifier) REFERENCES public.action_config_spectralink_to_crews_of_location(identifier) ON DELETE CASCADE;


--
-- Name: action_config_spectralink_to_crews_of_location action_config_spectralink_to_crew_action_config_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_crews_of_location
    ADD CONSTRAINT action_config_spectralink_to_crew_action_config_identifier_fkey FOREIGN KEY (action_config_identifier) REFERENCES public.action_config(identifier) ON DELETE CASCADE;


--
-- Name: action_config_spectralink_to_crews_of_location_role action_config_spectralink_to_crews_of_loca_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_crews_of_location_role
    ADD CONSTRAINT action_config_spectralink_to_crews_of_loca_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON DELETE CASCADE;


--
-- Name: action_config_spectralink_to_group action_config_spectralink_to_grou_action_config_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.action_config_spectralink_to_group
    ADD CONSTRAINT action_config_spectralink_to_grou_action_config_identifier_fkey FOREIGN KEY (action_config_identifier) REFERENCES public.action_config(identifier) ON DELETE CASCADE;


--
-- Name: activity activity_crew_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.activity
    ADD CONSTRAINT activity_crew_identifier_fkey FOREIGN KEY (crew_identifier) REFERENCES public.crew(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: activity activity_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.activity
    ADD CONSTRAINT activity_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: activity activity_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.activity
    ADD CONSTRAINT activity_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: address address_contact_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.address
    ADD CONSTRAINT address_contact_identifier_fkey FOREIGN KEY (contact_identifier) REFERENCES public.administration_contact(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: api_login api_login_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login
    ADD CONSTRAINT api_login_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: api_login api_login_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login
    ADD CONSTRAINT api_login_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: api_login api_login_management_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login
    ADD CONSTRAINT api_login_management_account_identifier_fkey FOREIGN KEY (management_account_identifier) REFERENCES public.management_account(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: api_login api_login_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login
    ADD CONSTRAINT api_login_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: api_login api_login_process_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_login
    ADD CONSTRAINT api_login_process_identifier_fkey FOREIGN KEY (process_identifier) REFERENCES public.process(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: api_token api_token_api_login_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.api_token
    ADD CONSTRAINT api_token_api_login_identifier_fkey FOREIGN KEY (api_login_identifier) REFERENCES public.api_login(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: app_message app_message_context_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.app_message
    ADD CONSTRAINT app_message_context_location_identifier_fkey FOREIGN KEY (context_location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: app_message app_message_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.app_message
    ADD CONSTRAINT app_message_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: app_message app_message_engine_call_action_message_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.app_message
    ADD CONSTRAINT app_message_engine_call_action_message_identifier_fkey FOREIGN KEY (engine_call_action_message_identifier) REFERENCES public.engine_call_action_message(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: application_global application_global_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_global
    ADD CONSTRAINT application_global_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: application_svp_crews application_svp_crews_application_svp_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_svp_crews
    ADD CONSTRAINT application_svp_crews_application_svp_identifier_fkey FOREIGN KEY (application_svp_identifier) REFERENCES public.application_svp(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: application_svp_crews application_svp_crews_crew_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_svp_crews
    ADD CONSTRAINT application_svp_crews_crew_identifier_fkey FOREIGN KEY (crew_identifier) REFERENCES public.crew(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: application_svp application_svp_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_svp
    ADD CONSTRAINT application_svp_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: application_svp application_svp_esvp_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_svp
    ADD CONSTRAINT application_svp_esvp_device_identifier_fkey FOREIGN KEY (esvp_device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: application_svp_status application_svp_status_application_svp_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_svp_status
    ADD CONSTRAINT application_svp_status_application_svp_identifier_fkey FOREIGN KEY (application_svp_identifier) REFERENCES public.application_svp(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: application_svp_status application_svp_status_status_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.application_svp_status
    ADD CONSTRAINT application_svp_status_status_identifier_fkey FOREIGN KEY (status_identifier) REFERENCES public.status(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: appointment appointment_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.appointment
    ADD CONSTRAINT appointment_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: appointment appointment_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.appointment
    ADD CONSTRAINT appointment_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: badge badge_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.badge
    ADD CONSTRAINT badge_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: badge badge_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.badge
    ADD CONSTRAINT badge_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: broadcast_call_broadcast_call_group broadcast_call_broadcast_call_broadcast_call_group_identif_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.broadcast_call_broadcast_call_group
    ADD CONSTRAINT broadcast_call_broadcast_call_broadcast_call_group_identif_fkey FOREIGN KEY (broadcast_call_group_identifier) REFERENCES public.broadcast_call_group(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: broadcast_call_broadcast_call_group broadcast_call_broadcast_call_gr_broadcast_call_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.broadcast_call_broadcast_call_group
    ADD CONSTRAINT broadcast_call_broadcast_call_gr_broadcast_call_identifier_fkey FOREIGN KEY (broadcast_call_identifier) REFERENCES public.broadcast_call(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: broadcast_call broadcast_call_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.broadcast_call
    ADD CONSTRAINT broadcast_call_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: broadcast_call_group_device broadcast_call_group_device_broadcast_call_group_identifie_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.broadcast_call_group_device
    ADD CONSTRAINT broadcast_call_group_device_broadcast_call_group_identifie_fkey FOREIGN KEY (broadcast_call_group_identifier) REFERENCES public.broadcast_call_group(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: broadcast_call_group_device broadcast_call_group_device_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.broadcast_call_group_device
    ADD CONSTRAINT broadcast_call_group_device_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: call_reason call_reason_call_reason_category_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.call_reason
    ADD CONSTRAINT call_reason_call_reason_category_identifier_fkey FOREIGN KEY (call_reason_category_identifier) REFERENCES public.call_reason_category(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: call_reason call_reason_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.call_reason
    ADD CONSTRAINT call_reason_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: call_reason call_reason_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.call_reason
    ADD CONSTRAINT call_reason_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: call_reason call_reason_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.call_reason
    ADD CONSTRAINT call_reason_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: care_session care_session_care_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care_session
    ADD CONSTRAINT care_session_care_identifier_fkey FOREIGN KEY (care_identifier) REFERENCES public.care(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: care_session care_session_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care_session
    ADD CONSTRAINT care_session_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: care care_state_cause_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care
    ADD CONSTRAINT care_state_cause_identifier_fkey FOREIGN KEY (state_cause_identifier) REFERENCES public.state_cause(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: care care_status_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care
    ADD CONSTRAINT care_status_identifier_fkey FOREIGN KEY (status_identifier) REFERENCES public.status(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: cas_session cas_session_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.cas_session
    ADD CONSTRAINT cas_session_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: contact contact_contact_list_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.contact
    ADD CONSTRAINT contact_contact_list_identifier_fkey FOREIGN KEY (contact_list_identifier) REFERENCES public.contact_list(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: contact_list contact_list_crew_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.contact_list
    ADD CONSTRAINT contact_list_crew_identifier_fkey FOREIGN KEY (crew_identifier) REFERENCES public.crew(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: contact_list contact_list_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.contact_list
    ADD CONSTRAINT contact_list_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: contact contact_webrtc_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.contact
    ADD CONSTRAINT contact_webrtc_account_identifier_fkey FOREIGN KEY (webrtc_account_identifier) REFERENCES public.webrtc_account(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: crew_location crew_location_crew_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.crew_location
    ADD CONSTRAINT crew_location_crew_identifier_fkey FOREIGN KEY (crew_identifier) REFERENCES public.crew(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: crew_location crew_location_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.crew_location
    ADD CONSTRAINT crew_location_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: day_night day_night_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.day_night
    ADD CONSTRAINT day_night_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: day_night day_night_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.day_night
    ADD CONSTRAINT day_night_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: day_night day_night_period_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.day_night
    ADD CONSTRAINT day_night_period_identifier_fkey FOREIGN KEY (period_identifier) REFERENCES public.period(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: dect_group_dect_account dect_group_dect_account_dect_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_group_dect_account
    ADD CONSTRAINT dect_group_dect_account_dect_account_identifier_fkey FOREIGN KEY (dect_account_identifier) REFERENCES public.dect_account(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: dect_group_dect_account dect_group_dect_account_dect_group_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_group_dect_account
    ADD CONSTRAINT dect_group_dect_account_dect_group_identifier_fkey FOREIGN KEY (dect_group_identifier) REFERENCES public.dect_group(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: dect_group_location dect_group_location_dect_group_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_group_location
    ADD CONSTRAINT dect_group_location_dect_group_identifier_fkey FOREIGN KEY (dect_group_identifier) REFERENCES public.dect_group(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: dect_group_location dect_group_location_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_group_location
    ADD CONSTRAINT dect_group_location_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: dect_message dect_message_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_message
    ADD CONSTRAINT dect_message_account_identifier_fkey FOREIGN KEY (account_identifier) REFERENCES public.dect_account(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: dect_message dect_message_callback_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_message
    ADD CONSTRAINT dect_message_callback_account_identifier_fkey FOREIGN KEY (callback_account_identifier) REFERENCES public.dect_account(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: dect_message dect_message_context_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_message
    ADD CONSTRAINT dect_message_context_location_identifier_fkey FOREIGN KEY (context_location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: dect_message dect_message_engine_call_action_message_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_message
    ADD CONSTRAINT dect_message_engine_call_action_message_identifier_fkey FOREIGN KEY (engine_call_action_message_identifier) REFERENCES public.engine_call_action_message(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: dect_message_queue dect_message_queue_engine_event_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.dect_message_queue
    ADD CONSTRAINT dect_message_queue_engine_event_identifier_fkey FOREIGN KEY (engine_event_identifier) REFERENCES public.engine_event(identifier) ON DELETE CASCADE;


--
-- Name: department department_site_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.department
    ADD CONSTRAINT department_site_identifier_fkey FOREIGN KEY (site_identifier) REFERENCES public.site(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: device device_engine_device_configuration_profile_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.device
    ADD CONSTRAINT device_engine_device_configuration_profile_identifier_fkey FOREIGN KEY (engine_device_configuration_profile_identifier) REFERENCES public.engine_device_configuration_profile(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: device device_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.device
    ADD CONSTRAINT device_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: diary diary_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.diary
    ADD CONSTRAINT diary_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON DELETE SET NULL;


--
-- Name: diary_patient diary_patient_diary_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.diary_patient
    ADD CONSTRAINT diary_patient_diary_identifier_fkey FOREIGN KEY (diary_identifier) REFERENCES public.diary(identifier) ON DELETE CASCADE;


--
-- Name: diary_patient diary_patient_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.diary_patient
    ADD CONSTRAINT diary_patient_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON DELETE CASCADE;


--
-- Name: diary_read diary_read_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.diary_read
    ADD CONSTRAINT diary_read_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON DELETE CASCADE;


--
-- Name: diary_read diary_read_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.diary_read
    ADD CONSTRAINT diary_read_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON DELETE CASCADE;


--
-- Name: email email_crew_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.email
    ADD CONSTRAINT email_crew_identifier_fkey FOREIGN KEY (crew_identifier) REFERENCES public.crew(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: email email_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.email
    ADD CONSTRAINT email_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: email email_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.email
    ADD CONSTRAINT email_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: email email_possible_work_order_top_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.email
    ADD CONSTRAINT email_possible_work_order_top_identifier_fkey FOREIGN KEY (possible_work_order_top_identifier) REFERENCES public.possible_work_order_top(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: email email_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.email
    ADD CONSTRAINT email_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: employee_authorization employee_authorizaton_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.employee_authorization
    ADD CONSTRAINT employee_authorizaton_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: employee employee_dect_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.employee
    ADD CONSTRAINT employee_dect_account_identifier_fkey FOREIGN KEY (dect_account_identifier) REFERENCES public.dect_account(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: employee employee_fcm_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.employee
    ADD CONSTRAINT employee_fcm_account_identifier_fkey FOREIGN KEY (fcm_account_identifier) REFERENCES public.fcm_account(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: employee employee_spectralink_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.employee
    ADD CONSTRAINT employee_spectralink_account_identifier_fkey FOREIGN KEY (spectralink_account_identifier) REFERENCES public.spectralink_account(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_action engine_action_engine_call_action_message_acknowledgment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_engine_call_action_message_acknowledgment_id_fkey FOREIGN KEY (engine_call_action_message_acknowledgment_identifier) REFERENCES public.engine_call_action_message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_action engine_action_engine_call_action_message_destination_dect__fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_engine_call_action_message_destination_dect__fkey FOREIGN KEY (engine_call_action_message_destination_dect_identifier) REFERENCES public.engine_call_action_message_destination_dect(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_action engine_action_engine_call_action_message_destination_email_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_engine_call_action_message_destination_email_fkey FOREIGN KEY (engine_call_action_message_destination_email_identifier) REFERENCES public.engine_call_action_message_destination_email(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_action engine_action_engine_call_action_message_destination_emplo_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_engine_call_action_message_destination_emplo_fkey FOREIGN KEY (engine_call_action_message_destination_employee_identifier) REFERENCES public.engine_call_action_message_destination_employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_action engine_action_engine_call_action_message_destination_spect_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_engine_call_action_message_destination_spect_fkey FOREIGN KEY (engine_call_action_message_destination_spectralink_identifier) REFERENCES public.engine_call_action_message_destination_spectralink(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_action engine_action_engine_call_action_message_rejection_identif_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_engine_call_action_message_rejection_identif_fkey FOREIGN KEY (engine_call_action_message_rejection_identifier) REFERENCES public.engine_call_action_message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_action engine_action_engine_call_action_message_termination_ident_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_engine_call_action_message_termination_ident_fkey FOREIGN KEY (engine_call_action_message_termination_identifier) REFERENCES public.engine_call_action_message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_action engine_action_engine_call_action_viewpoint_notification_ac_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_engine_call_action_viewpoint_notification_ac_fkey FOREIGN KEY (engine_call_action_viewpoint_notification_acknowledgment_identi) REFERENCES public.engine_call_action_viewpoint_notification(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_action engine_action_engine_call_action_viewpoint_notification_te_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_engine_call_action_viewpoint_notification_te_fkey FOREIGN KEY (engine_call_action_viewpoint_notification_termination_identifie) REFERENCES public.engine_call_action_viewpoint_notification(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_action engine_action_engine_call_action_viewpoint_status_acknowle_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_engine_call_action_viewpoint_status_acknowle_fkey FOREIGN KEY (engine_call_action_viewpoint_status_acknowledgment_identifier) REFERENCES public.engine_call_action_viewpoint_status(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_action engine_action_engine_call_action_viewpoint_status_terminat_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_engine_call_action_viewpoint_status_terminat_fkey FOREIGN KEY (engine_call_action_viewpoint_status_termination_identifier) REFERENCES public.engine_call_action_viewpoint_status(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_action engine_action_engine_call_termination_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_action
    ADD CONSTRAINT engine_action_engine_call_termination_identifier_fkey FOREIGN KEY (engine_call_termination_identifier) REFERENCES public.engine_call(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_call_action engine_call_action_engine_call_action_message_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action
    ADD CONSTRAINT engine_call_action_engine_call_action_message_identifier_fkey FOREIGN KEY (engine_call_action_message_identifier) REFERENCES public.engine_call_action_message(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action engine_call_action_engine_call_action_viewpoint_notificati_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action
    ADD CONSTRAINT engine_call_action_engine_call_action_viewpoint_notificati_fkey FOREIGN KEY (engine_call_action_viewpoint_notification_identifier) REFERENCES public.engine_call_action_viewpoint_notification(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action engine_call_action_engine_call_action_viewpoint_status_ide_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action
    ADD CONSTRAINT engine_call_action_engine_call_action_viewpoint_status_ide_fkey FOREIGN KEY (engine_call_action_viewpoint_status_identifier) REFERENCES public.engine_call_action_viewpoint_status(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action engine_call_action_engine_call_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action
    ADD CONSTRAINT engine_call_action_engine_call_identifier_fkey FOREIGN KEY (engine_call_identifier) REFERENCES public.engine_call(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_d_engine_call_action_message_i_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_d_engine_call_action_message_i_fkey1 FOREIGN KEY (engine_call_action_message_identifier) REFERENCES public.engine_call_action_message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_call_action_message_destination_dect engine_call_action_message_d_engine_call_action_message_i_fkey2; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_dect
    ADD CONSTRAINT engine_call_action_message_d_engine_call_action_message_i_fkey2 FOREIGN KEY (engine_call_action_message_identifier) REFERENCES public.engine_call_action_message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_call_action_message_destination_spectralink engine_call_action_message_d_engine_call_action_message_i_fkey3; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_spectralink
    ADD CONSTRAINT engine_call_action_message_d_engine_call_action_message_i_fkey3 FOREIGN KEY (engine_call_action_message_identifier) REFERENCES public.engine_call_action_message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_call_action_message_destination_employee_role engine_call_action_message_de_engine_call_action_message_d_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee_role
    ADD CONSTRAINT engine_call_action_message_de_engine_call_action_message_d_fkey FOREIGN KEY (engine_call_action_message_destination_employee_identifier) REFERENCES public.engine_call_action_message_destination_employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_call_action_message_destination_email engine_call_action_message_de_engine_call_action_message_i_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_email
    ADD CONSTRAINT engine_call_action_message_de_engine_call_action_message_i_fkey FOREIGN KEY (engine_call_action_message_identifier) REFERENCES public.engine_call_action_message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_de_settings_spectralink_identif_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_de_settings_spectralink_identif_fkey FOREIGN KEY (settings_spectralink_identifier) REFERENCES public.engine_call_action_message_spectralink(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_spectralink engine_call_action_message_de_spectralink_account_identifi_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_spectralink
    ADD CONSTRAINT engine_call_action_message_de_spectralink_account_identifi_fkey FOREIGN KEY (spectralink_account_identifier) REFERENCES public.spectralink_account(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_desti_settings_email_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_desti_settings_email_identifier_fkey FOREIGN KEY (settings_email_identifier) REFERENCES public.engine_call_action_message_email(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_destin_settings_dect_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_destin_settings_dect_identifier_fkey FOREIGN KEY (settings_dect_identifier) REFERENCES public.engine_call_action_message_dect(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_dect engine_call_action_message_destina_dect_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_dect
    ADD CONSTRAINT engine_call_action_message_destina_dect_account_identifier_fkey FOREIGN KEY (dect_account_identifier) REFERENCES public.dect_account(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_destina_settings_app_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_destina_settings_app_identifier_fkey FOREIGN KEY (settings_app_identifier) REFERENCES public.engine_call_action_message_app(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_destinatio_employee_identifier_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_destinatio_employee_identifier_fkey1 FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_destinatio_location_identifier_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_destinatio_location_identifier_fkey1 FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_dect engine_call_action_message_destinatio_location_identifier_fkey2; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_dect
    ADD CONSTRAINT engine_call_action_message_destinatio_location_identifier_fkey2 FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_spectralink engine_call_action_message_destinatio_location_identifier_fkey3; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_spectralink
    ADD CONSTRAINT engine_call_action_message_destinatio_location_identifier_fkey3 FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_dect engine_call_action_message_destinatio_settings_identifier_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_dect
    ADD CONSTRAINT engine_call_action_message_destinatio_settings_identifier_fkey1 FOREIGN KEY (settings_identifier) REFERENCES public.engine_call_action_message_dect(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_spectralink engine_call_action_message_destinatio_settings_identifier_fkey2; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_spectralink
    ADD CONSTRAINT engine_call_action_message_destinatio_settings_identifier_fkey2 FOREIGN KEY (settings_identifier) REFERENCES public.engine_call_action_message_spectralink(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_email engine_call_action_message_destination__patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_email
    ADD CONSTRAINT engine_call_action_message_destination__patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_email engine_call_action_message_destination_ema_crew_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_email
    ADD CONSTRAINT engine_call_action_message_destination_ema_crew_identifier_fkey FOREIGN KEY (crew_identifier) REFERENCES public.crew(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_employee engine_call_action_message_destination_emp_crew_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee
    ADD CONSTRAINT engine_call_action_message_destination_emp_crew_identifier_fkey FOREIGN KEY (crew_identifier) REFERENCES public.crew(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_employee_role engine_call_action_message_destination_emp_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_employee_role
    ADD CONSTRAINT engine_call_action_message_destination_emp_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_call_action_message_destination_email engine_call_action_message_destination_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_email
    ADD CONSTRAINT engine_call_action_message_destination_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_email engine_call_action_message_destination_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_email
    ADD CONSTRAINT engine_call_action_message_destination_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_message_destination_email engine_call_action_message_destination_settings_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_message_destination_email
    ADD CONSTRAINT engine_call_action_message_destination_settings_identifier_fkey FOREIGN KEY (settings_identifier) REFERENCES public.engine_call_action_message_email(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_viewpoint_notification engine_call_action_viewpoint_notif_notification_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_viewpoint_notification
    ADD CONSTRAINT engine_call_action_viewpoint_notif_notification_identifier_fkey FOREIGN KEY (notification_identifier) REFERENCES public.notification(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_viewpoint_notification engine_call_action_viewpoint_notificat_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_viewpoint_notification
    ADD CONSTRAINT engine_call_action_viewpoint_notificat_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_call_action_viewpoint_notification engine_call_action_viewpoint_notificatio_status_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_viewpoint_notification
    ADD CONSTRAINT engine_call_action_viewpoint_notificatio_status_identifier_fkey FOREIGN KEY (status_identifier) REFERENCES public.status(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_call_action_viewpoint_status engine_call_action_viewpoint_status_cause_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_viewpoint_status
    ADD CONSTRAINT engine_call_action_viewpoint_status_cause_identifier_fkey FOREIGN KEY (cause_identifier) REFERENCES public.state_cause(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_call_action_viewpoint_status engine_call_action_viewpoint_status_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_viewpoint_status
    ADD CONSTRAINT engine_call_action_viewpoint_status_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_call_action_viewpoint_status engine_call_action_viewpoint_status_status_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_call_action_viewpoint_status
    ADD CONSTRAINT engine_call_action_viewpoint_status_status_identifier_fkey FOREIGN KEY (status_identifier) REFERENCES public.status(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_event engine_event_access_denied_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_access_denied_identifier_fkey FOREIGN KEY (access_denied_identifier) REFERENCES public.engine_event_access_denied(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_event_access_denied engine_event_access_denied_session_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_access_denied
    ADD CONSTRAINT engine_event_access_denied_session_identifier_fkey FOREIGN KEY (session_identifier) REFERENCES public.care_session(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_event engine_event_access_entered_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_access_entered_identifier_fkey FOREIGN KEY (access_entered_identifier) REFERENCES public.engine_event_access_entered(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_event_access_entered engine_event_access_entered_session_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_access_entered
    ADD CONSTRAINT engine_event_access_entered_session_identifier_fkey FOREIGN KEY (session_identifier) REFERENCES public.care_session(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_event engine_event_access_left_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_access_left_identifier_fkey FOREIGN KEY (access_left_identifier) REFERENCES public.engine_event_access_left(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_event_access_left engine_event_access_left_session_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_access_left
    ADD CONSTRAINT engine_event_access_left_session_identifier_fkey FOREIGN KEY (session_identifier) REFERENCES public.care_session(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_event_badge_provided engine_event_badge_provided_badge_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_badge_provided
    ADD CONSTRAINT engine_event_badge_provided_badge_identifier_fkey FOREIGN KEY (badge_identifier) REFERENCES public.badge(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_event_badge_provided engine_event_badge_provided_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_badge_provided
    ADD CONSTRAINT engine_event_badge_provided_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_event engine_event_badge_provided_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_badge_provided_identifier_fkey FOREIGN KEY (badge_provided_identifier) REFERENCES public.engine_event_badge_provided(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_event_badge_provisioned engine_event_badge_provisioned_badge_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_badge_provisioned
    ADD CONSTRAINT engine_event_badge_provisioned_badge_identifier_fkey FOREIGN KEY (badge_identifier) REFERENCES public.badge(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_event_badge_provisioned engine_event_badge_provisioned_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_badge_provisioned
    ADD CONSTRAINT engine_event_badge_provisioned_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_event engine_event_badge_provisioned_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_badge_provisioned_identifier_fkey FOREIGN KEY (badge_provisioned_identifier) REFERENCES public.engine_event_badge_provisioned(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_event_badge_provisioned engine_event_badge_provisioned_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_badge_provisioned
    ADD CONSTRAINT engine_event_badge_provisioned_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_event_rf_module_provided engine_event_rf_module_provided_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_rf_module_provided
    ADD CONSTRAINT engine_event_rf_module_provided_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_event engine_event_rf_module_provided_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_rf_module_provided_identifier_fkey FOREIGN KEY (rf_module_provided_identifier) REFERENCES public.engine_event_rf_module_provided(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_event_rf_module_provided engine_event_rf_module_provided_rf_module_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_rf_module_provided
    ADD CONSTRAINT engine_event_rf_module_provided_rf_module_identifier_fkey FOREIGN KEY (rf_module_identifier) REFERENCES public.rf_module(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: engine_event engine_event_viewpoint_state_changed_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event
    ADD CONSTRAINT engine_event_viewpoint_state_changed_identifier_fkey FOREIGN KEY (viewpoint_state_changed_identifier) REFERENCES public.engine_event_viewpoint_state_changed(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: engine_event_viewpoint_state_changed engine_event_viewpoint_state_changed_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.engine_event_viewpoint_state_changed
    ADD CONSTRAINT engine_event_viewpoint_state_changed_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: espa_in_message espa_in_message_com_port_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.espa_in_message
    ADD CONSTRAINT espa_in_message_com_port_identifier_fkey FOREIGN KEY (com_port_identifier) REFERENCES public.com_port(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_care_action fk_care_action; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_care_action
    ADD CONSTRAINT fk_care_action FOREIGN KEY (care_action_identifier) REFERENCES public.care_action(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_care_action_signature fk_care_action_signature; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_care_action_signature
    ADD CONSTRAINT fk_care_action_signature FOREIGN KEY (care_action_signature_identifier) REFERENCES public.care_action_signature(identifier) ON DELETE CASCADE;


--
-- Name: care_action_signature fk_care_action_signature_care_action; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care_action_signature
    ADD CONSTRAINT fk_care_action_signature_care_action FOREIGN KEY (care_action_identifier) REFERENCES public.care_action(identifier) ON DELETE CASCADE;


--
-- Name: care_action_signature fk_care_action_signature_employee; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care_action_signature
    ADD CONSTRAINT fk_care_action_signature_employee FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON DELETE CASCADE;


--
-- Name: care_action_signature fk_care_action_signature_patient; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care_action_signature
    ADD CONSTRAINT fk_care_action_signature_patient FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON DELETE CASCADE;


--
-- Name: care_action_signature fk_care_action_signature_planned_care_action; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.care_action_signature
    ADD CONSTRAINT fk_care_action_signature_planned_care_action FOREIGN KEY (planned_care_action_identifier) REFERENCES public.planned_care_action(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_diary fk_diary; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_diary
    ADD CONSTRAINT fk_diary FOREIGN KEY (diary_identifier) REFERENCES public.diary(identifier) ON DELETE CASCADE;


--
-- Name: location_call_callback fk_location_call; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_callback
    ADD CONSTRAINT fk_location_call FOREIGN KEY (location_call_identifier) REFERENCES public.location_call(identifier) ON DELETE CASCADE;


--
-- Name: callback_queue fk_location_call; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.callback_queue
    ADD CONSTRAINT fk_location_call FOREIGN KEY (location_call_callback_identifier) REFERENCES public.location_call_callback(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_care_action fk_mis_connection; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_care_action
    ADD CONSTRAINT fk_mis_connection FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_care_action_signature fk_mis_connection; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_care_action_signature
    ADD CONSTRAINT fk_mis_connection FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_planned_care_action fk_mis_connection; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_care_action
    ADD CONSTRAINT fk_mis_connection FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_diary fk_mis_connection; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_diary
    ADD CONSTRAINT fk_mis_connection FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_planned_care_action fk_planned_care_action; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_care_action
    ADD CONSTRAINT fk_planned_care_action FOREIGN KEY (planned_care_action_identifier) REFERENCES public.planned_care_action(identifier) ON DELETE CASCADE;


--
-- Name: planned_care_action fk_planned_care_action_care_action; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_care_action
    ADD CONSTRAINT fk_planned_care_action_care_action FOREIGN KEY (care_action_identifier) REFERENCES public.care_action(identifier) ON DELETE CASCADE;


--
-- Name: planned_care_action fk_planned_care_action_patient; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_care_action
    ADD CONSTRAINT fk_planned_care_action_patient FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON DELETE CASCADE;


--
-- Name: general_practitioner general_practitioner_administration_contact_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.general_practitioner
    ADD CONSTRAINT general_practitioner_administration_contact_identifier_fkey FOREIGN KEY (administration_contact_identifier) REFERENCES public.administration_contact(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: gps_signal gps_signal_address_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.gps_signal
    ADD CONSTRAINT gps_signal_address_identifier_fkey FOREIGN KEY (address_identifier) REFERENCES public.address(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: gps_signal gps_signal_remote_alarm_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.gps_signal
    ADD CONSTRAINT gps_signal_remote_alarm_identifier_fkey FOREIGN KEY (remote_alarm_identifier) REFERENCES public.remote_alarm(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: gps_signal gps_signal_trusted_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.gps_signal
    ADD CONSTRAINT gps_signal_trusted_device_identifier_fkey FOREIGN KEY (trusted_device_identifier) REFERENCES public.trusted_device(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: hulp_call hulp_call_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.hulp_call
    ADD CONSTRAINT hulp_call_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: hulp_call hulp_call_webrtc_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.hulp_call
    ADD CONSTRAINT hulp_call_webrtc_account_identifier_fkey FOREIGN KEY (webrtc_account_identifier) REFERENCES public.webrtc_account(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: lifeline_message_answer lifeline_message_answer_lifeline_message_button_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.lifeline_message_answer
    ADD CONSTRAINT lifeline_message_answer_lifeline_message_button_identifier_fkey FOREIGN KEY (lifeline_message_button_identifier) REFERENCES public.lifeline_message_button(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: lifeline_message_answer lifeline_message_answer_lifeline_message_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.lifeline_message_answer
    ADD CONSTRAINT lifeline_message_answer_lifeline_message_identifier_fkey FOREIGN KEY (lifeline_message_identifier) REFERENCES public.lifeline_message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: lifeline_message_answer lifeline_message_answer_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.lifeline_message_answer
    ADD CONSTRAINT lifeline_message_answer_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: lifeline_message_button lifeline_message_button_lifeline_message_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.lifeline_message_button
    ADD CONSTRAINT lifeline_message_button_lifeline_message_identifier_fkey FOREIGN KEY (lifeline_message_identifier) REFERENCES public.lifeline_message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: locality locality_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.locality
    ADD CONSTRAINT locality_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: locality locality_rf_module_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.locality
    ADD CONSTRAINT locality_rf_module_identifier_fkey FOREIGN KEY (rf_module_identifier) REFERENCES public.rf_module(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: location_call location_call_call_reason_category_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call
    ADD CONSTRAINT location_call_call_reason_category_identifier_fkey FOREIGN KEY (call_reason_category_identifier) REFERENCES public.call_reason_category(identifier) ON DELETE CASCADE;


--
-- Name: location_call location_call_call_reason_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call
    ADD CONSTRAINT location_call_call_reason_employee_identifier_fkey FOREIGN KEY (call_reason_employee_identifier) REFERENCES public.employee(identifier) ON DELETE CASCADE;


--
-- Name: location_call location_call_current_status_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call
    ADD CONSTRAINT location_call_current_status_identifier_fkey FOREIGN KEY (current_status_identifier) REFERENCES public.status(identifier) ON DELETE CASCADE;


--
-- Name: location_call_employee_presence location_call_employee_presence_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_employee_presence
    ADD CONSTRAINT location_call_employee_presence_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON DELETE CASCADE;


--
-- Name: location_call_employee_presence location_call_employee_presence_location_call_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_employee_presence
    ADD CONSTRAINT location_call_employee_presence_location_call_identifier_fkey FOREIGN KEY (location_call_identifier) REFERENCES public.location_call(identifier) ON DELETE CASCADE;


--
-- Name: location_call location_call_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call
    ADD CONSTRAINT location_call_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON DELETE CASCADE;


--
-- Name: location_call_patient_in_location location_call_patient_in_location_location_call_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_patient_in_location
    ADD CONSTRAINT location_call_patient_in_location_location_call_identifier_fkey FOREIGN KEY (location_call_identifier) REFERENCES public.location_call(identifier) ON DELETE CASCADE;


--
-- Name: location_call_patient_in_location location_call_patient_in_location_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_patient_in_location
    ADD CONSTRAINT location_call_patient_in_location_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON DELETE CASCADE;


--
-- Name: location_call_state_change location_call_state_change_location_call_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_state_change
    ADD CONSTRAINT location_call_state_change_location_call_identifier_fkey FOREIGN KEY (location_call_identifier) REFERENCES public.location_call(identifier) ON DELETE CASCADE;


--
-- Name: location_call_state_change location_call_state_change_status_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_call_state_change
    ADD CONSTRAINT location_call_state_change_status_identifier_fkey FOREIGN KEY (status_identifier) REFERENCES public.status(identifier) ON DELETE CASCADE;


--
-- Name: location location_care_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location
    ADD CONSTRAINT location_care_identifier_fkey FOREIGN KEY (care_identifier) REFERENCES public.care(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: location location_department_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location
    ADD CONSTRAINT location_department_identifier_fkey FOREIGN KEY (department_identifier) REFERENCES public.department(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: location_gateway_device_gateway location_gateway_device_gateway_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_gateway_device_gateway
    ADD CONSTRAINT location_gateway_device_gateway_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: location_gateway_device_gateway location_gateway_device_gateway_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_gateway_device_gateway
    ADD CONSTRAINT location_gateway_device_gateway_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: location_patient location_patient_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_patient
    ADD CONSTRAINT location_patient_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: location_patient location_patient_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.location_patient
    ADD CONSTRAINT location_patient_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_care log_care_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_care
    ADD CONSTRAINT log_care_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_care log_care_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_care
    ADD CONSTRAINT log_care_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_door log_door_access_door_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_door
    ADD CONSTRAINT log_door_access_door_identifier_fkey FOREIGN KEY (access_door_identifier) REFERENCES public.access_door(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_door log_door_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_door
    ADD CONSTRAINT log_door_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_door log_door_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_door
    ADD CONSTRAINT log_door_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_duty log_duty_crew_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_duty
    ADD CONSTRAINT log_duty_crew_identifier_fkey FOREIGN KEY (crew_identifier) REFERENCES public.crew(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_duty log_duty_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_duty
    ADD CONSTRAINT log_duty_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_duty log_duty_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_duty
    ADD CONSTRAINT log_duty_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_employee_dect_account log_employee_dect_account_dect_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_employee_dect_account
    ADD CONSTRAINT log_employee_dect_account_dect_account_identifier_fkey FOREIGN KEY (dect_account_identifier) REFERENCES public.dect_account(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_employee_dect_account log_employee_dect_account_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_employee_dect_account
    ADD CONSTRAINT log_employee_dect_account_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_employee_spectralink_account log_employee_spectralink_acco_spectralink_account_identifi_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_employee_spectralink_account
    ADD CONSTRAINT log_employee_spectralink_acco_spectralink_account_identifi_fkey FOREIGN KEY (spectralink_account_identifier) REFERENCES public.spectralink_account(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_employee_spectralink_account log_employee_spectralink_account_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_employee_spectralink_account
    ADD CONSTRAINT log_employee_spectralink_account_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_engine_context_device log_engine_context_device_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_engine_context_device
    ADD CONSTRAINT log_engine_context_device_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_engine_context_location log_engine_context_location_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_engine_context_location
    ADD CONSTRAINT log_engine_context_location_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_engine_context_patient log_engine_context_patient_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_engine_context_patient
    ADD CONSTRAINT log_engine_context_patient_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_location_patient log_location_patient_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_location_patient
    ADD CONSTRAINT log_location_patient_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_location_patient log_location_patient_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_location_patient
    ADD CONSTRAINT log_location_patient_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_patient_cas_mode log_patient_cas_mode_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_patient_cas_mode
    ADD CONSTRAINT log_patient_cas_mode_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log log_site_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log
    ADD CONSTRAINT log_site_identifier_fkey FOREIGN KEY (site_identifier) REFERENCES public.management_site(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: log_status log_status_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_status
    ADD CONSTRAINT log_status_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: log_status log_status_status_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.log_status
    ADD CONSTRAINT log_status_status_identifier_fkey FOREIGN KEY (status_identifier) REFERENCES public.status(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: management_account_management_site management_account_management_management_account_identifie_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_account_management_site
    ADD CONSTRAINT management_account_management_management_account_identifie_fkey FOREIGN KEY (management_account_identifier) REFERENCES public.management_account(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: management_account_management_site management_account_management_s_management_site_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_account_management_site
    ADD CONSTRAINT management_account_management_s_management_site_identifier_fkey FOREIGN KEY (management_site_identifier) REFERENCES public.management_site(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: management_department management_department_site_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_department
    ADD CONSTRAINT management_department_site_identifier_fkey FOREIGN KEY (site_identifier) REFERENCES public.management_site(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: management_device management_device_room_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_device
    ADD CONSTRAINT management_device_room_identifier_fkey FOREIGN KEY (room_identifier) REFERENCES public.management_room(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: management_device management_device_server_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_device
    ADD CONSTRAINT management_device_server_identifier_fkey FOREIGN KEY (server_identifier) REFERENCES public.management_server(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: management_device_update management_device_update_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_device_update
    ADD CONSTRAINT management_device_update_account_identifier_fkey FOREIGN KEY (account_identifier) REFERENCES public.management_account(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: management_device_update management_device_update_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_device_update
    ADD CONSTRAINT management_device_update_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.management_device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: management_device_update management_device_update_server_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_device_update
    ADD CONSTRAINT management_device_update_server_identifier_fkey FOREIGN KEY (server_identifier) REFERENCES public.management_server(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: management_device_update management_device_update_site_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_device_update
    ADD CONSTRAINT management_device_update_site_identifier_fkey FOREIGN KEY (site_identifier) REFERENCES public.management_site(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: management_room management_room_department_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_room
    ADD CONSTRAINT management_room_department_identifier_fkey FOREIGN KEY (department_identifier) REFERENCES public.management_department(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: management_site_management_server management_site_management_se_management_server_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_site_management_server
    ADD CONSTRAINT management_site_management_se_management_server_identifier_fkey FOREIGN KEY (management_server_identifier) REFERENCES public.management_server(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: management_site_management_server management_site_management_serv_management_site_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.management_site_management_server
    ADD CONSTRAINT management_site_management_serv_management_site_identifier_fkey FOREIGN KEY (management_site_identifier) REFERENCES public.management_site(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurement_bloodpressure measurement_bloodpressure_measurement_signature_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_bloodpressure
    ADD CONSTRAINT measurement_bloodpressure_measurement_signature_identifier_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: measurement_bloodsample measurement_bloodsample_measurement_signature_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_bloodsample
    ADD CONSTRAINT measurement_bloodsample_measurement_signature_identifier_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: measurement_glycemia measurement_glycemia_measurement_signature_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_glycemia
    ADD CONSTRAINT measurement_glycemia_measurement_signature_identifier_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: measurement_length measurement_length_measurement_signature_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_length
    ADD CONSTRAINT measurement_length_measurement_signature_identifier_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: measurement_morsefallscale measurement_morsefallscale_measurement_signature_identifie_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_morsefallscale
    ADD CONSTRAINT measurement_morsefallscale_measurement_signature_identifie_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: measurement_oxygensaturation measurement_oxygensaturation_measurement_signature_identif_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_oxygensaturation
    ADD CONSTRAINT measurement_oxygensaturation_measurement_signature_identif_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: measurement_pulse measurement_pulse_measurement_signature_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_pulse
    ADD CONSTRAINT measurement_pulse_measurement_signature_identifier_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: measurement_signature measurement_signature_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_signature
    ADD CONSTRAINT measurement_signature_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON DELETE RESTRICT;


--
-- Name: measurement_signature measurement_signature_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_signature
    ADD CONSTRAINT measurement_signature_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON DELETE CASCADE;


--
-- Name: measurement_signature measurement_signature_planned_measurement_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_signature
    ADD CONSTRAINT measurement_signature_planned_measurement_identifier_fkey FOREIGN KEY (planned_measurement_identifier) REFERENCES public.planned_measurement(identifier) ON DELETE SET NULL;


--
-- Name: measurement_stoolrecord measurement_stoolrecord_measurement_signature_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_stoolrecord
    ADD CONSTRAINT measurement_stoolrecord_measurement_signature_identifier_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: measurement_temperature measurement_temperature_measurement_signature_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_temperature
    ADD CONSTRAINT measurement_temperature_measurement_signature_identifier_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: measurement_urineoutput measurement_urineoutput_measurement_signature_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_urineoutput
    ADD CONSTRAINT measurement_urineoutput_measurement_signature_identifier_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: measurement_visualpainscale measurement_visualpainscale_measurement_signature_identifi_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_visualpainscale
    ADD CONSTRAINT measurement_visualpainscale_measurement_signature_identifi_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: measurement_waterlowscale measurement_waterlowscale_measurement_signature_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_waterlowscale
    ADD CONSTRAINT measurement_waterlowscale_measurement_signature_identifier_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: measurement_weight measurement_weight_measurement_signature_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.measurement_weight
    ADD CONSTRAINT measurement_weight_measurement_signature_identifier_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: medication medication_medication_form_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication
    ADD CONSTRAINT medication_medication_form_identifier_fkey FOREIGN KEY (medication_form_identifier) REFERENCES public.medication_form(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: medication_signature_detail medication_signature_detail_medication_signature_identifie_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_signature_detail
    ADD CONSTRAINT medication_signature_detail_medication_signature_identifie_fkey FOREIGN KEY (medication_signature_identifier) REFERENCES public.medication_signature(identifier) ON DELETE CASCADE;


--
-- Name: medication_signature_detail medication_signature_detail_medication_type_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_signature_detail
    ADD CONSTRAINT medication_signature_detail_medication_type_identifier_fkey FOREIGN KEY (medication_type_identifier) REFERENCES public.medication_type(identifier) ON DELETE CASCADE;


--
-- Name: medication_signature medication_signature_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_signature
    ADD CONSTRAINT medication_signature_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON DELETE SET NULL;


--
-- Name: medication_signature medication_signature_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_signature
    ADD CONSTRAINT medication_signature_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON DELETE RESTRICT;


--
-- Name: medication_signature medication_signature_patient_identifier_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_signature
    ADD CONSTRAINT medication_signature_patient_identifier_fkey1 FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON DELETE RESTRICT;


--
-- Name: medication_signature medication_signature_patient_identifier_fkey2; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_signature
    ADD CONSTRAINT medication_signature_patient_identifier_fkey2 FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON DELETE RESTRICT;


--
-- Name: medication_signature medication_signature_patient_identifier_fkey3; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_signature
    ADD CONSTRAINT medication_signature_patient_identifier_fkey3 FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON DELETE RESTRICT;


--
-- Name: medication_signature medication_signature_planned_medication_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.medication_signature
    ADD CONSTRAINT medication_signature_planned_medication_identifier_fkey FOREIGN KEY (planned_medication_identifier) REFERENCES public.planned_medication(identifier);


--
-- Name: message message_about_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message
    ADD CONSTRAINT message_about_patient_identifier_fkey FOREIGN KEY (about_patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: message message_from_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message
    ADD CONSTRAINT message_from_employee_identifier_fkey FOREIGN KEY (from_employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: message message_from_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message
    ADD CONSTRAINT message_from_patient_identifier_fkey FOREIGN KEY (from_patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: message_images message_images_image_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_images
    ADD CONSTRAINT message_images_image_identifier_fkey FOREIGN KEY (image_identifier) REFERENCES public.image(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: message_images message_images_message_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_images
    ADD CONSTRAINT message_images_message_identifier_fkey FOREIGN KEY (message_identifier) REFERENCES public.message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: message message_lifeline_message_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message
    ADD CONSTRAINT message_lifeline_message_identifier_fkey FOREIGN KEY (lifeline_message_identifier) REFERENCES public.lifeline_message(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: message_read_employees message_read_employees_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_read_employees
    ADD CONSTRAINT message_read_employees_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: message_read_employees message_read_employees_message_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_read_employees
    ADD CONSTRAINT message_read_employees_message_identifier_fkey FOREIGN KEY (message_identifier) REFERENCES public.message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: message_read_patients message_read_patients_message_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_read_patients
    ADD CONSTRAINT message_read_patients_message_identifier_fkey FOREIGN KEY (message_identifier) REFERENCES public.message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: message_read_patients message_read_patients_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_read_patients
    ADD CONSTRAINT message_read_patients_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: message_to_patients message_to_patients_message_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_to_patients
    ADD CONSTRAINT message_to_patients_message_identifier_fkey FOREIGN KEY (message_identifier) REFERENCES public.message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: message_to_patients message_to_patients_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_to_patients
    ADD CONSTRAINT message_to_patients_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: message_to_roles message_to_roles_message_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_to_roles
    ADD CONSTRAINT message_to_roles_message_identifier_fkey FOREIGN KEY (message_identifier) REFERENCES public.message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: message_to_roles message_to_roles_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.message_to_roles
    ADD CONSTRAINT message_to_roles_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_department mis_connection_department_department_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_department
    ADD CONSTRAINT mis_connection_department_department_identifier_fkey FOREIGN KEY (department_identifier) REFERENCES public.department(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_department mis_connection_department_mis_connection_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_department
    ADD CONSTRAINT mis_connection_department_mis_connection_identifier_fkey FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_employee mis_connection_employee_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_employee
    ADD CONSTRAINT mis_connection_employee_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_employee mis_connection_employee_mis_connection_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_employee
    ADD CONSTRAINT mis_connection_employee_mis_connection_identifier_fkey FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_location mis_connection_location_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_location
    ADD CONSTRAINT mis_connection_location_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_location mis_connection_location_mis_connection_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_location
    ADD CONSTRAINT mis_connection_location_mis_connection_identifier_fkey FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_measurement_signature mis_connection_measurement_si_measurement_signature_identi_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_measurement_signature
    ADD CONSTRAINT mis_connection_measurement_si_measurement_signature_identi_fkey FOREIGN KEY (measurement_signature_identifier) REFERENCES public.measurement_signature(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_measurement_signature mis_connection_measurement_signa_mis_connection_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_measurement_signature
    ADD CONSTRAINT mis_connection_measurement_signa_mis_connection_identifier_fkey FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_medication_signature mis_connection_medication_sig_medication_signature_identif_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_medication_signature
    ADD CONSTRAINT mis_connection_medication_sig_medication_signature_identif_fkey FOREIGN KEY (medication_signature_identifier) REFERENCES public.medication_signature(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_medication_signature mis_connection_medication_signat_mis_connection_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_medication_signature
    ADD CONSTRAINT mis_connection_medication_signat_mis_connection_identifier_fkey FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_medication_type mis_connection_medication_type_medication_type_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_medication_type
    ADD CONSTRAINT mis_connection_medication_type_medication_type_identifier_fkey FOREIGN KEY (medication_type_identifier) REFERENCES public.medication_type(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_medication_type mis_connection_medication_type_mis_connection_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_medication_type
    ADD CONSTRAINT mis_connection_medication_type_mis_connection_identifier_fkey FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_patient mis_connection_patient_mis_connection_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_patient
    ADD CONSTRAINT mis_connection_patient_mis_connection_identifier_fkey FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_patient mis_connection_patient_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_patient
    ADD CONSTRAINT mis_connection_patient_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_planned_measurement mis_connection_planned_measur_planned_measurement_identifi_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_measurement
    ADD CONSTRAINT mis_connection_planned_measur_planned_measurement_identifi_fkey FOREIGN KEY (planned_measurement_identifier) REFERENCES public.planned_measurement(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_planned_measurement mis_connection_planned_measureme_mis_connection_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_measurement
    ADD CONSTRAINT mis_connection_planned_measureme_mis_connection_identifier_fkey FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_planned_medication mis_connection_planned_medica_planned_medication_identifie_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_medication
    ADD CONSTRAINT mis_connection_planned_medica_planned_medication_identifie_fkey FOREIGN KEY (planned_medication_identifier) REFERENCES public.planned_medication(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_planned_medication mis_connection_planned_medicatio_mis_connection_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_planned_medication
    ADD CONSTRAINT mis_connection_planned_medicatio_mis_connection_identifier_fkey FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON DELETE CASCADE;


--
-- Name: mis_connection_section mis_connection_section_mis_connection_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_section
    ADD CONSTRAINT mis_connection_section_mis_connection_identifier_fkey FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_section mis_connection_section_section_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_section
    ADD CONSTRAINT mis_connection_section_section_identifier_fkey FOREIGN KEY (section_identifier) REFERENCES public.section(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_site mis_connection_site_mis_connection_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_site
    ADD CONSTRAINT mis_connection_site_mis_connection_identifier_fkey FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: mis_connection_site mis_connection_site_site_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.mis_connection_site
    ADD CONSTRAINT mis_connection_site_site_identifier_fkey FOREIGN KEY (site_identifier) REFERENCES public.site(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: monitor_status_device monitor_status_device_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.monitor_status_device
    ADD CONSTRAINT monitor_status_device_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier);


--
-- Name: notification notification_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.notification
    ADD CONSTRAINT notification_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: notification notification_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.notification
    ADD CONSTRAINT notification_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: notification notification_status_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.notification
    ADD CONSTRAINT notification_status_identifier_fkey FOREIGN KEY (status_identifier) REFERENCES public.status(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: organization organization_administration_contact_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.organization
    ADD CONSTRAINT organization_administration_contact_identifier_fkey FOREIGN KEY (administration_contact_identifier) REFERENCES public.administration_contact(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient_administration_information patient_administration_inform_preferably_hospital_identifi_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_administration_information
    ADD CONSTRAINT patient_administration_inform_preferably_hospital_identifi_fkey FOREIGN KEY (preferably_hospital_identifier) REFERENCES public.organization(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: patient_administration_information patient_administration_informa_health_insurance_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_administration_information
    ADD CONSTRAINT patient_administration_informa_health_insurance_identifier_fkey FOREIGN KEY (health_insurance_identifier) REFERENCES public.organization(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: patient_administration_information patient_administration_information_domicile_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_administration_information
    ADD CONSTRAINT patient_administration_information_domicile_identifier_fkey FOREIGN KEY (domicile_identifier) REFERENCES public.address(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: patient_contact patient_contact_administration_contact_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_contact
    ADD CONSTRAINT patient_contact_administration_contact_identifier_fkey FOREIGN KEY (administration_contact_identifier) REFERENCES public.administration_contact(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient_contact patient_contact_patient_administration_information_identif_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_contact
    ADD CONSTRAINT patient_contact_patient_administration_information_identif_fkey FOREIGN KEY (patient_administration_information_identifier) REFERENCES public.patient_administration_information(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient_group_ui_access patient_group_ui_access_patient_group_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_group_ui_access
    ADD CONSTRAINT patient_group_ui_access_patient_group_identifier_fkey FOREIGN KEY (patient_group_identifier) REFERENCES public.patient_group(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient_group_ui_access patient_group_ui_access_ui_access_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_group_ui_access
    ADD CONSTRAINT patient_group_ui_access_ui_access_identifier_fkey FOREIGN KEY (ui_access_identifier) REFERENCES public.ui_access(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient_identification patient_identification_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_identification
    ADD CONSTRAINT patient_identification_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient_lifeline_message_pending patient_lifeline_message_pendi_lifeline_message_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_lifeline_message_pending
    ADD CONSTRAINT patient_lifeline_message_pendi_lifeline_message_identifier_fkey FOREIGN KEY (lifeline_message_identifier) REFERENCES public.lifeline_message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient_lifeline_message_pending patient_lifeline_message_pending_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_lifeline_message_pending
    ADD CONSTRAINT patient_lifeline_message_pending_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient_medical_information_allergies patient_medical_information_a_patient_medical_information__fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_medical_information_allergies
    ADD CONSTRAINT patient_medical_information_a_patient_medical_information__fkey FOREIGN KEY (patient_medical_information_identifier) REFERENCES public.patient_medical_information(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient_medical_information_allergies patient_medical_information_allergies_allergy_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_medical_information_allergies
    ADD CONSTRAINT patient_medical_information_allergies_allergy_identifier_fkey FOREIGN KEY (allergy_identifier) REFERENCES public.allergy(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient_medical_information patient_medical_information_blood_type_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_medical_information
    ADD CONSTRAINT patient_medical_information_blood_type_identifier_fkey FOREIGN KEY (blood_type_identifier) REFERENCES public.blood_type(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: patient_medical_information patient_medical_information_dementia_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_medical_information
    ADD CONSTRAINT patient_medical_information_dementia_identifier_fkey FOREIGN KEY (dementia_identifier) REFERENCES public.dementia(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: patient_medical_information patient_medical_information_general_practitioner_identifie_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_medical_information
    ADD CONSTRAINT patient_medical_information_general_practitioner_identifie_fkey FOREIGN KEY (general_practitioner_identifier) REFERENCES public.general_practitioner(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: patient patient_patient_administration_information_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient
    ADD CONSTRAINT patient_patient_administration_information_identifier_fkey FOREIGN KEY (patient_administration_information_identifier) REFERENCES public.patient_administration_information(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: patient_patient_group patient_patient_group_patient_group_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_patient_group
    ADD CONSTRAINT patient_patient_group_patient_group_identifier_fkey FOREIGN KEY (patient_group_identifier) REFERENCES public.patient_group(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient_patient_group patient_patient_group_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_patient_group
    ADD CONSTRAINT patient_patient_group_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient_info patient_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_info
    ADD CONSTRAINT patient_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: patient patient_patient_medical_information_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient
    ADD CONSTRAINT patient_patient_medical_information_identifier_fkey FOREIGN KEY (patient_medical_information_identifier) REFERENCES public.patient_medical_information(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: patient patient_patient_social_information_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient
    ADD CONSTRAINT patient_patient_social_information_identifier_fkey FOREIGN KEY (patient_social_information_identifier) REFERENCES public.patient_social_information(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: patient patient_room_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient
    ADD CONSTRAINT patient_room_identifier_fkey FOREIGN KEY (room_identifier) REFERENCES public.room(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: patient patient_section_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient
    ADD CONSTRAINT patient_section_identifier_fkey FOREIGN KEY (section_identifier) REFERENCES public.section(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: patient_session patient_session_care_session_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_session
    ADD CONSTRAINT patient_session_care_session_identifier_fkey FOREIGN KEY (care_session_identifier) REFERENCES public.care_session(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: patient_session patient_session_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.patient_session
    ADD CONSTRAINT patient_session_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: planned_measurement planned_measurement_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_measurement
    ADD CONSTRAINT planned_measurement_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON DELETE CASCADE;


--
-- Name: planned_medication_detail planned_medication_detail_medication_type_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_medication_detail
    ADD CONSTRAINT planned_medication_detail_medication_type_identifier_fkey FOREIGN KEY (medication_type_identifier) REFERENCES public.medication_type(identifier) ON DELETE CASCADE;


--
-- Name: planned_medication_detail planned_medication_detail_planned_medication_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_medication_detail
    ADD CONSTRAINT planned_medication_detail_planned_medication_identifier_fkey FOREIGN KEY (planned_medication_identifier) REFERENCES public.planned_medication(identifier) ON DELETE CASCADE;


--
-- Name: planned_medication planned_medication_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.planned_medication
    ADD CONSTRAINT planned_medication_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON DELETE CASCADE;


--
-- Name: possible_work_order possible_work_order_possible_work_order_top_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.possible_work_order
    ADD CONSTRAINT possible_work_order_possible_work_order_top_identifier_fkey FOREIGN KEY (possible_work_order_top_identifier) REFERENCES public.possible_work_order_top(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: possible_work_order_role possible_work_order_role_possible_work_order_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.possible_work_order_role
    ADD CONSTRAINT possible_work_order_role_possible_work_order_identifier_fkey FOREIGN KEY (possible_work_order_identifier) REFERENCES public.possible_work_order(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: possible_work_order_role possible_work_order_role_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.possible_work_order_role
    ADD CONSTRAINT possible_work_order_role_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: process_boot_cycle process_boot_cycle_process_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.process_boot_cycle
    ADD CONSTRAINT process_boot_cycle_process_identifier_fkey FOREIGN KEY (process_identifier) REFERENCES public.process(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: process process_mis_connection_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.process
    ADD CONSTRAINT process_mis_connection_identifier_fkey FOREIGN KEY (mis_connection_identifier) REFERENCES public.mis_connection(identifier) NOT VALID;


--
-- Name: process process_site_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.process
    ADD CONSTRAINT process_site_identifier_fkey FOREIGN KEY (site_identifier) REFERENCES public.site(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: remote_alarm remote_alarm_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.remote_alarm
    ADD CONSTRAINT remote_alarm_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: remote_alarm remote_alarm_sui_status_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.remote_alarm
    ADD CONSTRAINT remote_alarm_sui_status_identifier_fkey FOREIGN KEY (sui_status_identifier) REFERENCES public.sui_status(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: remote_alarm remote_alarm_trusted_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.remote_alarm
    ADD CONSTRAINT remote_alarm_trusted_device_identifier_fkey FOREIGN KEY (trusted_device_identifier) REFERENCES public.trusted_device(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: rf_module rf_module_brand_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.rf_module
    ADD CONSTRAINT rf_module_brand_identifier_fkey FOREIGN KEY (brand_identifier) REFERENCES public.rf_module_brand(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: rf_module rf_module_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.rf_module
    ADD CONSTRAINT rf_module_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: rf_module rf_module_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.rf_module
    ADD CONSTRAINT rf_module_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: rf_module rf_module_type_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.rf_module
    ADD CONSTRAINT rf_module_type_identifier_fkey FOREIGN KEY (type_identifier) REFERENCES public.rf_module_type(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: role_status role_status_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.role_status
    ADD CONSTRAINT role_status_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: role_status role_status_status_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.role_status
    ADD CONSTRAINT role_status_status_identifier_fkey FOREIGN KEY (status_identifier) REFERENCES public.status(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: role_ui_access role_ui_access_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.role_ui_access
    ADD CONSTRAINT role_ui_access_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: role_ui_access role_ui_access_ui_access_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.role_ui_access
    ADD CONSTRAINT role_ui_access_ui_access_identifier_fkey FOREIGN KEY (ui_access_identifier) REFERENCES public.ui_access(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: roles_engine_call_action_message_destination_email roles_engine_call_action_mess_engine_call_action_message_d_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.roles_engine_call_action_message_destination_email
    ADD CONSTRAINT roles_engine_call_action_mess_engine_call_action_message_d_fkey FOREIGN KEY (engine_call_action_message_destination_email_identifier) REFERENCES public.engine_call_action_message_destination_email(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: roles_engine_call_action_message_destination_email roles_engine_call_action_message_destinati_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.roles_engine_call_action_message_destination_email
    ADD CONSTRAINT roles_engine_call_action_message_destinati_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: room room_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.room
    ADD CONSTRAINT room_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: service_function service_function_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.service_function
    ADD CONSTRAINT service_function_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: service_function service_function_possible_service_function_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.service_function
    ADD CONSTRAINT service_function_possible_service_function_identifier_fkey FOREIGN KEY (possible_service_function_identifier) REFERENCES public.possible_service_function(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: setting setting_process_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.setting
    ADD CONSTRAINT setting_process_identifier_fkey FOREIGN KEY (process_identifier) REFERENCES public.process(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: setting setting_site_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.setting
    ADD CONSTRAINT setting_site_identifier_fkey FOREIGN KEY (site_identifier) REFERENCES public.site(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: shortcut shortcut_picture_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.shortcut
    ADD CONSTRAINT shortcut_picture_identifier_fkey FOREIGN KEY (picture_identifier) REFERENCES public.picture(identifier) ON DELETE CASCADE;


--
-- Name: shortcut shortcut_picture_identifier_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.shortcut
    ADD CONSTRAINT shortcut_picture_identifier_fkey1 FOREIGN KEY (picture_identifier) REFERENCES public.picture(identifier) ON DELETE CASCADE;


--
-- Name: shortcut shortcut_picture_identifier_fkey2; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.shortcut
    ADD CONSTRAINT shortcut_picture_identifier_fkey2 FOREIGN KEY (picture_identifier) REFERENCES public.picture(identifier) ON DELETE CASCADE;


--
-- Name: shortcut shortcut_picture_identifier_fkey3; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.shortcut
    ADD CONSTRAINT shortcut_picture_identifier_fkey3 FOREIGN KEY (picture_identifier) REFERENCES public.picture(identifier) ON DELETE CASCADE;


--
-- Name: shortcut_role shortcut_role_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.shortcut_role
    ADD CONSTRAINT shortcut_role_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON DELETE CASCADE;


--
-- Name: shortcut_role shortcut_role_shortcut_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.shortcut_role
    ADD CONSTRAINT shortcut_role_shortcut_identifier_fkey FOREIGN KEY (shortcut_identifier) REFERENCES public.shortcut(identifier) ON DELETE CASCADE;


--
-- Name: spectralink_group_location spectralink_group_location_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_group_location
    ADD CONSTRAINT spectralink_group_location_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: spectralink_group_location spectralink_group_location_spectralink_group_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_group_location
    ADD CONSTRAINT spectralink_group_location_spectralink_group_identifier_fkey FOREIGN KEY (spectralink_group_identifier) REFERENCES public.spectralink_group(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: spectralink_group_spectralink_account spectralink_group_spectralink_spectralink_account_identifi_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_group_spectralink_account
    ADD CONSTRAINT spectralink_group_spectralink_spectralink_account_identifi_fkey FOREIGN KEY (spectralink_account_identifier) REFERENCES public.spectralink_account(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: spectralink_group_spectralink_account spectralink_group_spectralink_spectralink_group_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_group_spectralink_account
    ADD CONSTRAINT spectralink_group_spectralink_spectralink_group_identifier_fkey FOREIGN KEY (spectralink_group_identifier) REFERENCES public.spectralink_group(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: spectralink_message spectralink_message_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message
    ADD CONSTRAINT spectralink_message_account_identifier_fkey FOREIGN KEY (account_identifier) REFERENCES public.spectralink_account(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: spectralink_message_queue spectralink_message_queue_account_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message_queue
    ADD CONSTRAINT spectralink_message_queue_account_identifier_fkey FOREIGN KEY (account_identifier) REFERENCES public.spectralink_account(identifier) ON DELETE CASCADE;


--
-- Name: spectralink_message_queue spectralink_message_queue_engine_event_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message_queue
    ADD CONSTRAINT spectralink_message_queue_engine_event_identifier_fkey FOREIGN KEY (engine_event_identifier) REFERENCES public.engine_event(identifier) ON DELETE CASCADE;


--
-- Name: spectralink_message_reference spectralink_message_reference_context_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message_reference
    ADD CONSTRAINT spectralink_message_reference_context_location_identifier_fkey FOREIGN KEY (context_location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: spectralink_message_reference spectralink_message_reference_engine_call_action_message_i_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.spectralink_message_reference
    ADD CONSTRAINT spectralink_message_reference_engine_call_action_message_i_fkey FOREIGN KEY (engine_call_action_message_identifier) REFERENCES public.engine_call_action_message(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: state_cause state_cause_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_cause
    ADD CONSTRAINT state_cause_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: state_cause state_cause_state_cause_template_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_cause
    ADD CONSTRAINT state_cause_state_cause_template_identifier_fkey FOREIGN KEY (state_cause_template_identifier) REFERENCES public.state_cause_template(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: state_cause_template_device state_cause_template_device_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_cause_template_device
    ADD CONSTRAINT state_cause_template_device_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: state_cause_template_device state_cause_template_device_state_cause_template_identifie_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_cause_template_device
    ADD CONSTRAINT state_cause_template_device_state_cause_template_identifie_fkey FOREIGN KEY (state_cause_template_identifier) REFERENCES public.state_cause_template(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: state_machine_change_action_config state_machine_change_action_confi_action_config_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_machine_change_action_config
    ADD CONSTRAINT state_machine_change_action_confi_action_config_identifier_fkey FOREIGN KEY (action_config_identifier) REFERENCES public.action_config(identifier) ON DELETE CASCADE;


--
-- Name: state_machine_state state_machine_state_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.state_machine_state
    ADD CONSTRAINT state_machine_state_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: status status_app_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.status
    ADD CONSTRAINT status_app_identifier_fkey FOREIGN KEY (app_identifier) REFERENCES public.status_app(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: status status_dect_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.status
    ADD CONSTRAINT status_dect_identifier_fkey FOREIGN KEY (dect_identifier) REFERENCES public.status_dect(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: string string_bluetooth_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.string
    ADD CONSTRAINT string_bluetooth_device_identifier_fkey FOREIGN KEY (bluetooth_device_identifier) REFERENCES public.bluetooth_device(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: sui_patient_info sui_patient_info_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_patient_info
    ADD CONSTRAINT sui_patient_info_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: sui_status sui_status_image_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status
    ADD CONSTRAINT sui_status_image_identifier_fkey FOREIGN KEY (image_identifier) REFERENCES public.image(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: sui_status sui_status_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status
    ADD CONSTRAINT sui_status_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: sui_status_trigger sui_status_trigger_bluetooth_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status_trigger
    ADD CONSTRAINT sui_status_trigger_bluetooth_device_identifier_fkey FOREIGN KEY (bluetooth_device_identifier) REFERENCES public.bluetooth_device(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: sui_status_trigger sui_status_trigger_on_connected_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status_trigger
    ADD CONSTRAINT sui_status_trigger_on_connected_identifier_fkey FOREIGN KEY (on_connected_identifier) REFERENCES public.sui_status(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: sui_status_trigger sui_status_trigger_on_disconnected_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status_trigger
    ADD CONSTRAINT sui_status_trigger_on_disconnected_identifier_fkey FOREIGN KEY (on_disconnected_identifier) REFERENCES public.sui_status(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: sui_status_trigger sui_status_trigger_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status_trigger
    ADD CONSTRAINT sui_status_trigger_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: sui_status_trigger sui_status_trigger_wifi_network_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.sui_status_trigger
    ADD CONSTRAINT sui_status_trigger_wifi_network_identifier_fkey FOREIGN KEY (wifi_network_identifier) REFERENCES public.wifi_network(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: supplement_registration supplement_registration_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.supplement_registration
    ADD CONSTRAINT supplement_registration_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: supplement_registration supplement_registration_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.supplement_registration
    ADD CONSTRAINT supplement_registration_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: supplement_registration supplement_registration_supplement_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.supplement_registration
    ADD CONSTRAINT supplement_registration_supplement_identifier_fkey FOREIGN KEY (supplement_identifier) REFERENCES public.supplement(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: task_types_roles task_types_roles_role_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.task_types_roles
    ADD CONSTRAINT task_types_roles_role_identifier_fkey FOREIGN KEY (role_identifier) REFERENCES public.role(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: task_types_roles task_types_roles_task_type_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.task_types_roles
    ADD CONSTRAINT task_types_roles_task_type_identifier_fkey FOREIGN KEY (task_type_identifier) REFERENCES public.task_type(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: trusted_device_patient trusted_device_patient_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.trusted_device_patient
    ADD CONSTRAINT trusted_device_patient_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: trusted_device_patient trusted_device_patient_trusted_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.trusted_device_patient
    ADD CONSTRAINT trusted_device_patient_trusted_device_identifier_fkey FOREIGN KEY (trusted_device_identifier) REFERENCES public.trusted_device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: trusted_device_sui_status trusted_device_sui_status_sui_status_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.trusted_device_sui_status
    ADD CONSTRAINT trusted_device_sui_status_sui_status_identifier_fkey FOREIGN KEY (sui_status_identifier) REFERENCES public.sui_status(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: trusted_device_sui_status trusted_device_sui_status_trusted_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.trusted_device_sui_status
    ADD CONSTRAINT trusted_device_sui_status_trusted_device_identifier_fkey FOREIGN KEY (trusted_device_identifier) REFERENCES public.trusted_device(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: webrtc_account webrtc_account_camera_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.webrtc_account
    ADD CONSTRAINT webrtc_account_camera_identifier_fkey FOREIGN KEY (camera_identifier) REFERENCES public.camera(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: webrtc_account webrtc_account_device_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.webrtc_account
    ADD CONSTRAINT webrtc_account_device_identifier_fkey FOREIGN KEY (device_identifier) REFERENCES public.device(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: webrtc_account webrtc_account_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.webrtc_account
    ADD CONSTRAINT webrtc_account_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: webrtc_account webrtc_account_location_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.webrtc_account
    ADD CONSTRAINT webrtc_account_location_identifier_fkey FOREIGN KEY (location_identifier) REFERENCES public.location(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: webrtc_account webrtc_account_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.webrtc_account
    ADD CONSTRAINT webrtc_account_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: work_order work_order_employee_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.work_order
    ADD CONSTRAINT work_order_employee_identifier_fkey FOREIGN KEY (employee_identifier) REFERENCES public.employee(identifier) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: work_order work_order_patient_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.work_order
    ADD CONSTRAINT work_order_patient_identifier_fkey FOREIGN KEY (patient_identifier) REFERENCES public.patient(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: work_order work_order_possible_work_order_identifier_fkey; Type: FK CONSTRAINT; Schema: public; Owner: aperi
--

ALTER TABLE ONLY public.work_order
    ADD CONSTRAINT work_order_possible_work_order_identifier_fkey FOREIGN KEY (possible_work_order_identifier) REFERENCES public.possible_work_order(identifier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: access_door; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.access_door ENABLE ROW LEVEL SECURITY;

--
-- Name: access_door_access_control; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.access_door_access_control ENABLE ROW LEVEL SECURITY;

--
-- Name: access_door_access_group; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.access_door_access_group ENABLE ROW LEVEL SECURITY;

--
-- Name: access_door_door_procedure; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.access_door_door_procedure ENABLE ROW LEVEL SECURITY;

--
-- Name: access_door_group_access_group; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.access_door_group_access_group ENABLE ROW LEVEL SECURITY;

--
-- Name: access_group; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.access_group ENABLE ROW LEVEL SECURITY;

--
-- Name: access_group_badge; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.access_group_badge ENABLE ROW LEVEL SECURITY;

--
-- Name: activity; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.activity ENABLE ROW LEVEL SECURITY;

--
-- Name: api_login; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.api_login ENABLE ROW LEVEL SECURITY;

--
-- Name: api_token; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.api_token ENABLE ROW LEVEL SECURITY;

--
-- Name: app_message; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.app_message ENABLE ROW LEVEL SECURITY;

--
-- Name: application_global; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.application_global ENABLE ROW LEVEL SECURITY;

--
-- Name: application_svp; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.application_svp ENABLE ROW LEVEL SECURITY;

--
-- Name: application_svp_crews; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.application_svp_crews ENABLE ROW LEVEL SECURITY;

--
-- Name: application_svp_status; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.application_svp_status ENABLE ROW LEVEL SECURITY;

--
-- Name: appointment; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.appointment ENABLE ROW LEVEL SECURITY;

--
-- Name: badge; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.badge ENABLE ROW LEVEL SECURITY;

--
-- Name: broadcast_call_group_device; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.broadcast_call_group_device ENABLE ROW LEVEL SECURITY;

--
-- Name: call_reason; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.call_reason ENABLE ROW LEVEL SECURITY;

--
-- Name: call_reason_category; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.call_reason_category ENABLE ROW LEVEL SECURITY;

--
-- Name: camera; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.camera ENABLE ROW LEVEL SECURITY;

--
-- Name: care; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.care ENABLE ROW LEVEL SECURITY;

--
-- Name: care_session; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.care_session ENABLE ROW LEVEL SECURITY;

--
-- Name: access_door cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.access_door USING (true);


--
-- Name: access_door_access_control cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.access_door_access_control USING (true);


--
-- Name: access_door_access_group cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.access_door_access_group USING (true);


--
-- Name: access_door_door_procedure cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.access_door_door_procedure USING (true);


--
-- Name: access_door_group_access_group cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.access_door_group_access_group USING (true);


--
-- Name: access_group cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.access_group USING (true);


--
-- Name: access_group_badge cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.access_group_badge USING (true);


--
-- Name: activity cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.activity USING (true);


--
-- Name: api_login cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.api_login USING (true);


--
-- Name: api_token cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.api_token USING (true);


--
-- Name: app_message cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.app_message USING (true);


--
-- Name: application_global cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.application_global USING (true);


--
-- Name: application_svp cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.application_svp USING (true);


--
-- Name: application_svp_crews cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.application_svp_crews USING (true);


--
-- Name: application_svp_status cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.application_svp_status USING (true);


--
-- Name: appointment cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.appointment USING (true);


--
-- Name: badge cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.badge USING (true);


--
-- Name: broadcast_call_group_device cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.broadcast_call_group_device USING (true);


--
-- Name: call_reason cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.call_reason USING (true);


--
-- Name: call_reason_category cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.call_reason_category USING (true);


--
-- Name: camera cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.camera USING (true);


--
-- Name: care cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.care USING (true);


--
-- Name: care_session cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.care_session USING (true);


--
-- Name: cas_session cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.cas_session USING (true);


--
-- Name: crew cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.crew USING (true);


--
-- Name: crew_location cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.crew_location USING (true);


--
-- Name: day_night cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.day_night USING (true);


--
-- Name: dect_account cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.dect_account USING (true);


--
-- Name: dect_group cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.dect_group USING (true);


--
-- Name: dect_group_dect_account cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.dect_group_dect_account USING (true);


--
-- Name: dect_group_location cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.dect_group_location USING (true);


--
-- Name: dect_message cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.dect_message USING (true);


--
-- Name: department cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.department USING (true);


--
-- Name: device cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.device USING (true);


--
-- Name: device_status cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.device_status USING (true);


--
-- Name: door_procedure cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.door_procedure USING (true);


--
-- Name: email cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.email USING (true);


--
-- Name: employee cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.employee USING (true);


--
-- Name: engine_action cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.engine_action USING (true);


--
-- Name: engine_call_action_message_destination_employee_role cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.engine_call_action_message_destination_employee_role USING (true);


--
-- Name: engine_call_action_viewpoint_notification cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.engine_call_action_viewpoint_notification USING (true);


--
-- Name: engine_call_action_viewpoint_status cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.engine_call_action_viewpoint_status USING (true);


--
-- Name: engine_event_access_entered cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.engine_event_access_entered USING (true);


--
-- Name: engine_event_access_left cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.engine_event_access_left USING (true);


--
-- Name: engine_event_badge_provided cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.engine_event_badge_provided USING (true);


--
-- Name: engine_event_badge_provisioned cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.engine_event_badge_provisioned USING (true);


--
-- Name: engine_event_rf_module_provided cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.engine_event_rf_module_provided USING (true);


--
-- Name: engine_event_viewpoint_state_changed cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.engine_event_viewpoint_state_changed USING (true);


--
-- Name: hulp_call cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.hulp_call USING (true);


--
-- Name: lifeline_message_answer cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.lifeline_message_answer USING (true);


--
-- Name: locality cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.locality USING (true);


--
-- Name: location cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.location USING (true);


--
-- Name: location_gateway_device_gateway cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.location_gateway_device_gateway USING (true);


--
-- Name: location_patient cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.location_patient USING (true);


--
-- Name: message_read_employees cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.message_read_employees USING (true);


--
-- Name: message_read_patients cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.message_read_patients USING (true);


--
-- Name: message_to_patients cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.message_to_patients USING (true);


--
-- Name: message_to_roles cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.message_to_roles USING (true);


--
-- Name: notification cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.notification USING (true);


--
-- Name: patient cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.patient USING (true);


--
-- Name: patient_identification cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.patient_identification USING (true);


--
-- Name: patient_lifeline_message_pending cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.patient_lifeline_message_pending USING (true);


--
-- Name: patient_patient_group cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.patient_patient_group USING (true);


--
-- Name: patient_session cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.patient_session USING (true);


--
-- Name: possible_work_order cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.possible_work_order USING (true);


--
-- Name: possible_work_order_role cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.possible_work_order_role USING (true);


--
-- Name: possible_work_order_top cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.possible_work_order_top USING (true);


--
-- Name: remote_alarm cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.remote_alarm USING (true);


--
-- Name: rf_module cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.rf_module USING (true);


--
-- Name: rf_module_brand cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.rf_module_brand USING (true);


--
-- Name: rf_module_type cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.rf_module_type USING (true);


--
-- Name: role cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.role USING (true);


--
-- Name: role_status cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.role_status USING (true);


--
-- Name: role_ui_access cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.role_ui_access USING (true);


--
-- Name: roles_engine_call_action_message_destination_email cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.roles_engine_call_action_message_destination_email USING (true);


--
-- Name: room cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.room USING (true);


--
-- Name: shortcut cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.shortcut USING (true);


--
-- Name: spectralink_account cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.spectralink_account USING (true);


--
-- Name: spectralink_group cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.spectralink_group USING (true);


--
-- Name: spectralink_group_location cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.spectralink_group_location USING (true);


--
-- Name: spectralink_group_spectralink_account cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.spectralink_group_spectralink_account USING (true);


--
-- Name: spectralink_message cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.spectralink_message USING (true);


--
-- Name: state_cause_template_device cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.state_cause_template_device USING (true);


--
-- Name: status cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.status USING (true);


--
-- Name: sui_patient_info cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.sui_patient_info USING (true);


--
-- Name: sui_status cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.sui_status USING (true);


--
-- Name: sui_status_trigger cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.sui_status_trigger USING (true);


--
-- Name: trusted_device_patient cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.trusted_device_patient USING (true);


--
-- Name: trusted_device_sui_status cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.trusted_device_sui_status USING (true);


--
-- Name: work_order cas_fallback; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fallback ON public.work_order USING (true);


--
-- Name: access_door cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.access_door AS RESTRICTIVE USING (((device_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.device
  WHERE (device.identifier = access_door.device_identifier)))));


--
-- Name: access_door_access_control cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.access_door_access_control AS RESTRICTIVE USING (((access_door_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.access_door
  WHERE (access_door.identifier = access_door_access_control.access_door_identifier)))));


--
-- Name: access_door_access_group cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.access_door_access_group AS RESTRICTIVE USING ((((access_door_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.access_door
  WHERE (access_door.identifier = access_door_access_group.access_door_identifier)))) AND ((access_group_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.access_group
  WHERE (access_group.identifier = access_door_access_group.access_group_identifier))))));


--
-- Name: access_door_door_procedure cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.access_door_door_procedure AS RESTRICTIVE USING ((((access_door_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.access_door
  WHERE (access_door.identifier = access_door_door_procedure.access_door_identifier)))) AND ((door_procedure_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.door_procedure
  WHERE (door_procedure.identifier = access_door_door_procedure.door_procedure_identifier))))));


--
-- Name: access_door_group_access_group cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.access_door_group_access_group AS RESTRICTIVE USING (((access_group_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.access_group
  WHERE (access_group.identifier = access_door_group_access_group.access_group_identifier)))));


--
-- Name: access_group_badge cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.access_group_badge AS RESTRICTIVE USING ((((access_group_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.access_group
  WHERE (access_group.identifier = access_group_badge.access_group_identifier)))) AND ((badge_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.badge
  WHERE (badge.identifier = access_group_badge.badge_identifier))))));


--
-- Name: activity cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.activity AS RESTRICTIVE USING ((((crew_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.crew
  WHERE (crew.identifier = activity.crew_identifier)))) AND ((employee_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.employee
  WHERE (employee.identifier = activity.employee_identifier)))) AND ((role_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.role
  WHERE (role.identifier = activity.role_identifier))))));


--
-- Name: api_login cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.api_login AS RESTRICTIVE USING ((((device_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.device
  WHERE (device.identifier = api_login.device_identifier)))) AND ((employee_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.employee
  WHERE (employee.identifier = api_login.employee_identifier)))) AND ((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = api_login.patient_identifier))))));


--
-- Name: api_token cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.api_token AS RESTRICTIVE USING (((api_login_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.api_login
  WHERE (api_login.identifier = api_token.api_login_identifier)))));


--
-- Name: app_message cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.app_message AS RESTRICTIVE USING (((employee_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.employee
  WHERE (employee.identifier = app_message.employee_identifier)))));


--
-- Name: application_global cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.application_global AS RESTRICTIVE USING (((device_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.device
  WHERE (device.identifier = application_global.device_identifier)))));


--
-- Name: application_svp cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.application_svp AS RESTRICTIVE USING ((((esvp_device_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.device
  WHERE (device.identifier = application_svp.esvp_device_identifier)))) AND ((device_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.device
  WHERE (device.identifier = application_svp.device_identifier))))));


--
-- Name: application_svp_crews cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.application_svp_crews AS RESTRICTIVE USING ((((application_svp_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.application_svp
  WHERE (application_svp.identifier = application_svp_crews.application_svp_identifier)))) AND ((crew_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.crew
  WHERE (crew.identifier = application_svp_crews.crew_identifier))))));


--
-- Name: application_svp_status cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.application_svp_status AS RESTRICTIVE USING ((((application_svp_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.application_svp
  WHERE (application_svp.identifier = application_svp_status.application_svp_identifier)))) AND ((status_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.status
  WHERE (status.identifier = application_svp_status.status_identifier))))));


--
-- Name: appointment cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.appointment AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = appointment.patient_identifier)))));


--
-- Name: broadcast_call_group_device cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.broadcast_call_group_device AS RESTRICTIVE USING (((device_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.device
  WHERE (device.identifier = broadcast_call_group_device.device_identifier)))));


--
-- Name: call_reason cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.call_reason AS RESTRICTIVE USING ((((call_reason_category_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.call_reason_category
  WHERE (call_reason_category.identifier = call_reason.call_reason_category_identifier)))) AND ((employee_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.employee
  WHERE (employee.identifier = call_reason.employee_identifier)))) AND ((location_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.location
  WHERE (location.identifier = call_reason.location_identifier)))) AND ((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = call_reason.patient_identifier))))));


--
-- Name: care cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.care AS RESTRICTIVE USING (((status_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.status
  WHERE (status.identifier = care.status_identifier)))));


--
-- Name: care_session cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.care_session AS RESTRICTIVE USING ((((care_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.care
  WHERE (care.identifier = care_session.care_identifier)))) AND ((employee_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.employee
  WHERE (employee.identifier = care_session.employee_identifier))))));


--
-- Name: cas_session cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.cas_session AS RESTRICTIVE USING (((employee_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.employee
  WHERE (employee.identifier = cas_session.employee_identifier)))));


--
-- Name: crew_location cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.crew_location AS RESTRICTIVE USING ((((crew_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.crew
  WHERE (crew.identifier = crew_location.crew_identifier)))) AND ((location_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.location
  WHERE (location.identifier = crew_location.location_identifier))))));


--
-- Name: day_night cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.day_night AS RESTRICTIVE USING ((((employee_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.employee
  WHERE (employee.identifier = day_night.employee_identifier)))) AND ((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = day_night.patient_identifier))))));


--
-- Name: dect_group_dect_account cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.dect_group_dect_account AS RESTRICTIVE USING ((((dect_account_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.dect_account
  WHERE (dect_account.identifier = dect_group_dect_account.dect_account_identifier)))) AND ((dect_group_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.dect_group
  WHERE (dect_group.identifier = dect_group_dect_account.dect_group_identifier))))));


--
-- Name: dect_group_location cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.dect_group_location AS RESTRICTIVE USING ((((dect_group_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.dect_group
  WHERE (dect_group.identifier = dect_group_location.dect_group_identifier)))) AND ((location_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.location
  WHERE (location.identifier = dect_group_location.location_identifier))))));


--
-- Name: dect_message cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.dect_message AS RESTRICTIVE USING (((account_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.dect_account
  WHERE (dect_account.identifier = dect_message.account_identifier)))));


--
-- Name: device cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.device AS RESTRICTIVE USING (((location_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.location
  WHERE (location.identifier = device.location_identifier)))));


--
-- Name: email cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.email AS RESTRICTIVE USING ((((crew_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.crew
  WHERE (crew.identifier = email.crew_identifier)))) AND ((employee_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.employee
  WHERE (employee.identifier = email.employee_identifier)))) AND ((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = email.patient_identifier)))) AND ((possible_work_order_top_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.possible_work_order_top
  WHERE (possible_work_order_top.identifier = email.possible_work_order_top_identifier)))) AND ((role_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.role
  WHERE (role.identifier = email.role_identifier))))));


--
-- Name: engine_action cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.engine_action AS RESTRICTIVE USING ((((engine_call_action_viewpoint_notification_termination_identifie IS NULL) OR (EXISTS ( SELECT
   FROM public.engine_call_action_viewpoint_notification
  WHERE (engine_call_action_viewpoint_notification.identifier = engine_action.engine_call_action_viewpoint_notification_termination_identifie)))) AND ((engine_call_action_viewpoint_notification_acknowledgment_identi IS NULL) OR (EXISTS ( SELECT
   FROM public.engine_call_action_viewpoint_notification
  WHERE (engine_call_action_viewpoint_notification.identifier = engine_action.engine_call_action_viewpoint_notification_acknowledgment_identi)))) AND ((engine_call_action_viewpoint_status_termination_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.engine_call_action_viewpoint_status
  WHERE (engine_call_action_viewpoint_status.identifier = engine_action.engine_call_action_viewpoint_status_termination_identifier)))) AND ((engine_call_action_viewpoint_status_acknowledgment_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.engine_call_action_viewpoint_status
  WHERE (engine_call_action_viewpoint_status.identifier = engine_action.engine_call_action_viewpoint_status_acknowledgment_identifier))))));


--
-- Name: engine_call_action_message_destination_employee_role cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.engine_call_action_message_destination_employee_role AS RESTRICTIVE USING (((role_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.role
  WHERE (role.identifier = engine_call_action_message_destination_employee_role.role_identifier)))));


--
-- Name: engine_call_action_viewpoint_notification cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.engine_call_action_viewpoint_notification AS RESTRICTIVE USING ((((location_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.location
  WHERE (location.identifier = engine_call_action_viewpoint_notification.location_identifier)))) AND ((status_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.status
  WHERE (status.identifier = engine_call_action_viewpoint_notification.status_identifier))))));


--
-- Name: engine_call_action_viewpoint_status cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.engine_call_action_viewpoint_status AS RESTRICTIVE USING ((((location_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.location
  WHERE (location.identifier = engine_call_action_viewpoint_status.location_identifier)))) AND ((status_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.status
  WHERE (status.identifier = engine_call_action_viewpoint_status.status_identifier))))));


--
-- Name: engine_event_access_entered cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.engine_event_access_entered AS RESTRICTIVE USING (((session_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.care_session
  WHERE (care_session.identifier = engine_event_access_entered.session_identifier)))));


--
-- Name: engine_event_access_left cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.engine_event_access_left AS RESTRICTIVE USING (((session_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.care_session
  WHERE (care_session.identifier = engine_event_access_left.session_identifier)))));


--
-- Name: engine_event_badge_provided cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.engine_event_badge_provided AS RESTRICTIVE USING ((((badge_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.badge
  WHERE (badge.identifier = engine_event_badge_provided.badge_identifier)))) AND ((device_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.device
  WHERE (device.identifier = engine_event_badge_provided.device_identifier))))));


--
-- Name: engine_event_badge_provisioned cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.engine_event_badge_provisioned AS RESTRICTIVE USING ((((badge_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.badge
  WHERE (badge.identifier = engine_event_badge_provisioned.badge_identifier)))) AND ((employee_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.employee
  WHERE (employee.identifier = engine_event_badge_provisioned.employee_identifier)))) AND ((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = engine_event_badge_provisioned.patient_identifier))))));


--
-- Name: engine_event_rf_module_provided cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.engine_event_rf_module_provided AS RESTRICTIVE USING ((((device_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.device
  WHERE (device.identifier = engine_event_rf_module_provided.device_identifier)))) AND ((rf_module_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.rf_module
  WHERE (rf_module.identifier = engine_event_rf_module_provided.rf_module_identifier))))));


--
-- Name: engine_event_viewpoint_state_changed cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.engine_event_viewpoint_state_changed AS RESTRICTIVE USING (((location_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.location
  WHERE (location.identifier = engine_event_viewpoint_state_changed.location_identifier)))));


--
-- Name: hulp_call cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.hulp_call AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = hulp_call.patient_identifier)))));


--
-- Name: lifeline_message_answer cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.lifeline_message_answer AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = lifeline_message_answer.patient_identifier)))));


--
-- Name: locality cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.locality AS RESTRICTIVE USING ((((device_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.device
  WHERE (device.identifier = locality.device_identifier)))) AND ((rf_module_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.rf_module
  WHERE (rf_module.identifier = locality.rf_module_identifier))))));


--
-- Name: location cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.location AS RESTRICTIVE USING (((care_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.care
  WHERE (care.identifier = location.care_identifier)))));


--
-- Name: location_gateway_device_gateway cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.location_gateway_device_gateway AS RESTRICTIVE USING ((((device_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.device
  WHERE (device.identifier = location_gateway_device_gateway.device_identifier)))) AND ((location_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.location
  WHERE (location.identifier = location_gateway_device_gateway.location_identifier))))));


--
-- Name: location_patient cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.location_patient AS RESTRICTIVE USING ((((location_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.location
  WHERE (location.identifier = location_patient.location_identifier)))) AND ((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = location_patient.patient_identifier))))));


--
-- Name: message_read_employees cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.message_read_employees AS RESTRICTIVE USING (((employee_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.employee
  WHERE (employee.identifier = message_read_employees.employee_identifier)))));


--
-- Name: message_read_patients cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.message_read_patients AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = message_read_patients.patient_identifier)))));


--
-- Name: message_to_patients cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.message_to_patients AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = message_to_patients.patient_identifier)))));


--
-- Name: message_to_roles cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.message_to_roles AS RESTRICTIVE USING (((role_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.role
  WHERE (role.identifier = message_to_roles.role_identifier)))));


--
-- Name: notification cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.notification AS RESTRICTIVE USING ((((location_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.location
  WHERE (location.identifier = notification.location_identifier)))) AND ((status_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.status
  WHERE (status.identifier = notification.status_identifier))))));


--
-- Name: patient_identification cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.patient_identification AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = patient_identification.patient_identifier)))));


--
-- Name: patient_lifeline_message_pending cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.patient_lifeline_message_pending AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = patient_lifeline_message_pending.patient_identifier)))));


--
-- Name: patient_patient_group cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.patient_patient_group AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = patient_patient_group.patient_identifier)))));


--
-- Name: patient_session cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.patient_session AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = patient_session.patient_identifier)))));


--
-- Name: possible_work_order cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.possible_work_order AS RESTRICTIVE USING (((possible_work_order_top_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.possible_work_order_top
  WHERE (possible_work_order_top.identifier = possible_work_order.possible_work_order_top_identifier)))));


--
-- Name: possible_work_order_role cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.possible_work_order_role AS RESTRICTIVE USING ((((possible_work_order_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.possible_work_order
  WHERE (possible_work_order.identifier = possible_work_order_role.possible_work_order_identifier)))) AND ((role_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.role
  WHERE (role.identifier = possible_work_order_role.role_identifier))))));


--
-- Name: remote_alarm cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.remote_alarm AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = remote_alarm.patient_identifier)))));


--
-- Name: rf_module cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.rf_module AS RESTRICTIVE USING ((((brand_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.rf_module_brand
  WHERE (rf_module_brand.identifier = rf_module.brand_identifier)))) AND ((type_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.rf_module_type
  WHERE (rf_module_type.identifier = rf_module.type_identifier))))));


--
-- Name: role_status cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.role_status AS RESTRICTIVE USING ((((role_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.role
  WHERE (role.identifier = role_status.role_identifier)))) AND ((status_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.status
  WHERE (status.identifier = role_status.status_identifier))))));


--
-- Name: role_ui_access cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.role_ui_access AS RESTRICTIVE USING (((role_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.role
  WHERE (role.identifier = role_ui_access.role_identifier)))));


--
-- Name: roles_engine_call_action_message_destination_email cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.roles_engine_call_action_message_destination_email AS RESTRICTIVE USING (((role_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.role
  WHERE (role.identifier = roles_engine_call_action_message_destination_email.role_identifier)))));


--
-- Name: room cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.room AS RESTRICTIVE USING (((location_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.location
  WHERE (location.identifier = room.location_identifier)))));


--
-- Name: spectralink_group_location cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.spectralink_group_location AS RESTRICTIVE USING ((((location_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.location
  WHERE (location.identifier = spectralink_group_location.location_identifier)))) AND ((spectralink_group_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.spectralink_group
  WHERE (spectralink_group.identifier = spectralink_group_location.spectralink_group_identifier))))));


--
-- Name: spectralink_group_spectralink_account cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.spectralink_group_spectralink_account AS RESTRICTIVE USING ((((spectralink_account_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.spectralink_account
  WHERE (spectralink_account.identifier = spectralink_group_spectralink_account.spectralink_account_identifier)))) AND ((spectralink_group_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.spectralink_group
  WHERE (spectralink_group.identifier = spectralink_group_spectralink_account.spectralink_group_identifier))))));


--
-- Name: spectralink_message cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.spectralink_message AS RESTRICTIVE USING (((account_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.spectralink_account
  WHERE (spectralink_account.identifier = spectralink_message.account_identifier)))));


--
-- Name: state_cause_template_device cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.state_cause_template_device AS RESTRICTIVE USING (((device_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.device
  WHERE (device.identifier = state_cause_template_device.device_identifier)))));


--
-- Name: sui_patient_info cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.sui_patient_info AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = sui_patient_info.patient_identifier)))));


--
-- Name: sui_status cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.sui_status AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = sui_status.patient_identifier)))));


--
-- Name: sui_status_trigger cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.sui_status_trigger AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = sui_status_trigger.patient_identifier)))));


--
-- Name: trusted_device_patient cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.trusted_device_patient AS RESTRICTIVE USING (((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = trusted_device_patient.patient_identifier)))));


--
-- Name: trusted_device_sui_status cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.trusted_device_sui_status AS RESTRICTIVE USING (((sui_status_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.sui_status
  WHERE (sui_status.identifier = trusted_device_sui_status.sui_status_identifier)))));


--
-- Name: work_order cas_fkey; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_fkey ON public.work_order AS RESTRICTIVE USING ((((patient_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.patient
  WHERE (patient.identifier = work_order.patient_identifier)))) AND ((possible_work_order_identifier IS NULL) OR (EXISTS ( SELECT
   FROM public.possible_work_order
  WHERE (possible_work_order.identifier = work_order.possible_work_order_identifier))))));


--
-- Name: access_door cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.access_door AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: access_group cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.access_group AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: badge cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.badge AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: call_reason_category cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.call_reason_category AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: camera cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.camera AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: crew cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.crew AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: dect_account cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.dect_account AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: dect_group cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.dect_group AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: department cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.department AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: device cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.device AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: device_status cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.device_status AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: door_procedure cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.door_procedure AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: employee cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.employee AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: location cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.location AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: patient cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.patient AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: possible_work_order cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.possible_work_order AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: possible_work_order_top cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.possible_work_order_top AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: rf_module cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.rf_module AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: rf_module_brand cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.rf_module_brand AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: rf_module_type cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.rf_module_type AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: role cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.role AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: spectralink_account cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.spectralink_account AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: spectralink_group cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.spectralink_group AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: status cas_mode; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY cas_mode ON public.status AS RESTRICTIVE USING ((cas_mode = 'ACTIVE'::public.cas_mode));


--
-- Name: cas_session; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.cas_session ENABLE ROW LEVEL SECURITY;

--
-- Name: crew; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.crew ENABLE ROW LEVEL SECURITY;

--
-- Name: crew_location; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.crew_location ENABLE ROW LEVEL SECURITY;

--
-- Name: day_night; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.day_night ENABLE ROW LEVEL SECURITY;

--
-- Name: dect_account; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.dect_account ENABLE ROW LEVEL SECURITY;

--
-- Name: dect_group; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.dect_group ENABLE ROW LEVEL SECURITY;

--
-- Name: dect_group_dect_account; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.dect_group_dect_account ENABLE ROW LEVEL SECURITY;

--
-- Name: dect_group_location; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.dect_group_location ENABLE ROW LEVEL SECURITY;

--
-- Name: dect_message; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.dect_message ENABLE ROW LEVEL SECURITY;

--
-- Name: department; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.department ENABLE ROW LEVEL SECURITY;

--
-- Name: department department_mis; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY department_mis ON public.department AS RESTRICTIVE USING (((NOT (EXISTS ( SELECT
   FROM public.mis_connection_department
  WHERE (mis_connection_department.department_identifier = department.identifier)))) OR (EXISTS ( SELECT
   FROM public.mis_connection_department
  WHERE ((mis_connection_department.department_identifier = department.identifier) AND (mis_connection_department.mis_mode = 'PRESENT'::public.mis_mode))))));


--
-- Name: device; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.device ENABLE ROW LEVEL SECURITY;

--
-- Name: device_status; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.device_status ENABLE ROW LEVEL SECURITY;

--
-- Name: door_procedure; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.door_procedure ENABLE ROW LEVEL SECURITY;

--
-- Name: email; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.email ENABLE ROW LEVEL SECURITY;

--
-- Name: employee; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.employee ENABLE ROW LEVEL SECURITY;

--
-- Name: employee employee_mis; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY employee_mis ON public.employee AS RESTRICTIVE USING (((NOT (EXISTS ( SELECT
   FROM public.mis_connection_employee
  WHERE (mis_connection_employee.employee_identifier = employee.identifier)))) OR (EXISTS ( SELECT
   FROM public.mis_connection_employee
  WHERE ((mis_connection_employee.employee_identifier = employee.identifier) AND (mis_connection_employee.mis_mode = 'PRESENT'::public.mis_mode))))));


--
-- Name: engine_action; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.engine_action ENABLE ROW LEVEL SECURITY;

--
-- Name: engine_call_action_message_destination_employee_role; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.engine_call_action_message_destination_employee_role ENABLE ROW LEVEL SECURITY;

--
-- Name: engine_call_action_viewpoint_notification; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.engine_call_action_viewpoint_notification ENABLE ROW LEVEL SECURITY;

--
-- Name: engine_call_action_viewpoint_status; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.engine_call_action_viewpoint_status ENABLE ROW LEVEL SECURITY;

--
-- Name: engine_event_access_entered; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.engine_event_access_entered ENABLE ROW LEVEL SECURITY;

--
-- Name: engine_event_access_left; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.engine_event_access_left ENABLE ROW LEVEL SECURITY;

--
-- Name: engine_event_badge_provided; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.engine_event_badge_provided ENABLE ROW LEVEL SECURITY;

--
-- Name: engine_event_badge_provisioned; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.engine_event_badge_provisioned ENABLE ROW LEVEL SECURITY;

--
-- Name: engine_event_rf_module_provided; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.engine_event_rf_module_provided ENABLE ROW LEVEL SECURITY;

--
-- Name: engine_event_viewpoint_state_changed; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.engine_event_viewpoint_state_changed ENABLE ROW LEVEL SECURITY;

--
-- Name: hulp_call; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.hulp_call ENABLE ROW LEVEL SECURITY;

--
-- Name: lifeline_message_answer; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.lifeline_message_answer ENABLE ROW LEVEL SECURITY;

--
-- Name: locality; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.locality ENABLE ROW LEVEL SECURITY;

--
-- Name: location; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.location ENABLE ROW LEVEL SECURITY;

--
-- Name: location_gateway_device_gateway; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.location_gateway_device_gateway ENABLE ROW LEVEL SECURITY;

--
-- Name: location location_mis; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY location_mis ON public.location AS RESTRICTIVE USING (((NOT (EXISTS ( SELECT
   FROM public.mis_connection_location
  WHERE (mis_connection_location.location_identifier = location.identifier)))) OR (EXISTS ( SELECT
   FROM public.mis_connection_location
  WHERE ((mis_connection_location.location_identifier = location.identifier) AND (mis_connection_location.mis_mode = 'PRESENT'::public.mis_mode))))));


--
-- Name: location_patient; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.location_patient ENABLE ROW LEVEL SECURITY;

--
-- Name: message_read_employees; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.message_read_employees ENABLE ROW LEVEL SECURITY;

--
-- Name: message_read_patients; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.message_read_patients ENABLE ROW LEVEL SECURITY;

--
-- Name: message_to_patients; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.message_to_patients ENABLE ROW LEVEL SECURITY;

--
-- Name: message_to_roles; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.message_to_roles ENABLE ROW LEVEL SECURITY;

--
-- Name: notification; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.notification ENABLE ROW LEVEL SECURITY;

--
-- Name: patient; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.patient ENABLE ROW LEVEL SECURITY;

--
-- Name: patient_identification; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.patient_identification ENABLE ROW LEVEL SECURITY;

--
-- Name: patient_lifeline_message_pending; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.patient_lifeline_message_pending ENABLE ROW LEVEL SECURITY;

--
-- Name: patient patient_mis; Type: POLICY; Schema: public; Owner: aperi
--

CREATE POLICY patient_mis ON public.patient AS RESTRICTIVE USING (((NOT (EXISTS ( SELECT
   FROM public.mis_connection_patient
  WHERE (mis_connection_patient.patient_identifier = patient.identifier)))) OR (EXISTS ( SELECT
   FROM public.mis_connection_patient
  WHERE ((mis_connection_patient.patient_identifier = patient.identifier) AND (mis_connection_patient.mis_mode = 'PRESENT'::public.mis_mode))))));


--
-- Name: patient_patient_group; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.patient_patient_group ENABLE ROW LEVEL SECURITY;

--
-- Name: patient_session; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.patient_session ENABLE ROW LEVEL SECURITY;

--
-- Name: possible_work_order; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.possible_work_order ENABLE ROW LEVEL SECURITY;

--
-- Name: possible_work_order_role; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.possible_work_order_role ENABLE ROW LEVEL SECURITY;

--
-- Name: possible_work_order_top; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.possible_work_order_top ENABLE ROW LEVEL SECURITY;

--
-- Name: remote_alarm; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.remote_alarm ENABLE ROW LEVEL SECURITY;

--
-- Name: rf_module; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.rf_module ENABLE ROW LEVEL SECURITY;

--
-- Name: rf_module_brand; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.rf_module_brand ENABLE ROW LEVEL SECURITY;

--
-- Name: rf_module_type; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.rf_module_type ENABLE ROW LEVEL SECURITY;

--
-- Name: role; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.role ENABLE ROW LEVEL SECURITY;

--
-- Name: role_status; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.role_status ENABLE ROW LEVEL SECURITY;

--
-- Name: role_ui_access; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.role_ui_access ENABLE ROW LEVEL SECURITY;

--
-- Name: roles_engine_call_action_message_destination_email; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.roles_engine_call_action_message_destination_email ENABLE ROW LEVEL SECURITY;

--
-- Name: room; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.room ENABLE ROW LEVEL SECURITY;

--
-- Name: shortcut; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.shortcut ENABLE ROW LEVEL SECURITY;

--
-- Name: spectralink_account; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.spectralink_account ENABLE ROW LEVEL SECURITY;

--
-- Name: spectralink_group; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.spectralink_group ENABLE ROW LEVEL SECURITY;

--
-- Name: spectralink_group_location; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.spectralink_group_location ENABLE ROW LEVEL SECURITY;

--
-- Name: spectralink_group_spectralink_account; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.spectralink_group_spectralink_account ENABLE ROW LEVEL SECURITY;

--
-- Name: spectralink_message; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.spectralink_message ENABLE ROW LEVEL SECURITY;

--
-- Name: state_cause_template_device; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.state_cause_template_device ENABLE ROW LEVEL SECURITY;

--
-- Name: status; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.status ENABLE ROW LEVEL SECURITY;

--
-- Name: sui_patient_info; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.sui_patient_info ENABLE ROW LEVEL SECURITY;

--
-- Name: sui_status; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.sui_status ENABLE ROW LEVEL SECURITY;

--
-- Name: sui_status_trigger; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.sui_status_trigger ENABLE ROW LEVEL SECURITY;

--
-- Name: task_types_roles; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.task_types_roles ENABLE ROW LEVEL SECURITY;

--
-- Name: trusted_device_patient; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.trusted_device_patient ENABLE ROW LEVEL SECURITY;

--
-- Name: trusted_device_sui_status; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.trusted_device_sui_status ENABLE ROW LEVEL SECURITY;

--
-- Name: work_order; Type: ROW SECURITY; Schema: public; Owner: aperi
--

ALTER TABLE public.work_order ENABLE ROW LEVEL SECURITY;

--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: aperi
--

GRANT USAGE ON SCHEMA public TO "aperi-be";


--
-- Name: FUNCTION gbtreekey16_in(cstring); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbtreekey16_in(cstring) TO "aperi-be";


--
-- Name: FUNCTION gbtreekey16_out(public.gbtreekey16); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbtreekey16_out(public.gbtreekey16) TO "aperi-be";


--
-- Name: FUNCTION gbtreekey32_in(cstring); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbtreekey32_in(cstring) TO "aperi-be";


--
-- Name: FUNCTION gbtreekey32_out(public.gbtreekey32); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbtreekey32_out(public.gbtreekey32) TO "aperi-be";


--
-- Name: FUNCTION gbtreekey4_in(cstring); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbtreekey4_in(cstring) TO "aperi-be";


--
-- Name: FUNCTION gbtreekey4_out(public.gbtreekey4); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbtreekey4_out(public.gbtreekey4) TO "aperi-be";


--
-- Name: FUNCTION gbtreekey8_in(cstring); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbtreekey8_in(cstring) TO "aperi-be";


--
-- Name: FUNCTION gbtreekey8_out(public.gbtreekey8); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbtreekey8_out(public.gbtreekey8) TO "aperi-be";


--
-- Name: FUNCTION gbtreekey_var_in(cstring); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbtreekey_var_in(cstring) TO "aperi-be";


--
-- Name: FUNCTION gbtreekey_var_out(public.gbtreekey_var); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbtreekey_var_out(public.gbtreekey_var) TO "aperi-be";


--
-- Name: FUNCTION _coalesce(anyelement, anyelement); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public._coalesce(anyelement, anyelement) TO "aperi-be";


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.armor(bytea) TO "aperi-be";


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.armor(bytea, text[], text[]) TO "aperi-be";


--
-- Name: FUNCTION cas_api_access_door_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_access_door_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_access_door_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_access_door_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_access_door_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_access_door_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_access_group_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_access_group_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_access_group_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_access_group_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_access_group_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_access_group_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_activity_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_activity_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_activity_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_activity_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_activity_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_activity_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_badge_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_badge_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_badge_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_badge_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_badge_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_badge_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_call_reason_category_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_call_reason_category_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_call_reason_category_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_call_reason_category_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_call_reason_category_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_call_reason_category_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_camera_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_camera_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_camera_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_camera_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_camera_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_camera_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_cas_report_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_cas_report_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_cas_report_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_cas_report_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_cas_report_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_cas_report_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_crew_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_crew_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_crew_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_crew_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_crew_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_crew_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_dect_account_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_dect_account_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_dect_account_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_dect_account_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_dect_account_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_dect_account_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_dect_group_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_dect_group_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_dect_group_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_dect_group_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_dect_group_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_dect_group_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_department_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_department_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_department_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_department_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_department_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_department_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_device_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_device_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_device_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_device_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_device_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_device_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_device_status_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_device_status_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_device_status_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_device_status_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_device_status_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_device_status_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_door_procedure_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_door_procedure_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_door_procedure_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_door_procedure_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_door_procedure_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_door_procedure_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_email_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_email_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_email_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_email_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_email_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_email_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_employee_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_employee_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_employee_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_employee_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_employee_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_employee_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_location_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_location_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_location_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_location_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_location_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_location_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_mis_connection_department_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_mis_connection_department_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_mis_connection_department_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_mis_connection_department_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_mis_connection_department_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_mis_connection_department_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_mis_connection_employee_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_mis_connection_employee_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_mis_connection_employee_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_mis_connection_employee_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_mis_connection_employee_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_mis_connection_employee_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_mis_connection_location_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_mis_connection_location_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_mis_connection_location_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_mis_connection_location_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_mis_connection_location_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_mis_connection_location_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_mis_connection_patient_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_mis_connection_patient_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_mis_connection_patient_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_mis_connection_patient_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_mis_connection_patient_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_mis_connection_patient_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_patient_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_patient_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_patient_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_patient_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_patient_identification_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_patient_identification_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_patient_identification_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_patient_identification_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_patient_identification_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_patient_identification_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_patient_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_patient_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_possible_work_order_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_possible_work_order_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_possible_work_order_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_possible_work_order_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_possible_work_order_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_possible_work_order_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_possible_work_order_top_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_possible_work_order_top_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_possible_work_order_top_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_possible_work_order_top_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_possible_work_order_top_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_possible_work_order_top_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_rf_module_brand_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_rf_module_brand_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_rf_module_brand_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_rf_module_brand_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_rf_module_brand_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_rf_module_brand_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_rf_module_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_rf_module_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_rf_module_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_rf_module_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_rf_module_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_rf_module_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_rf_module_type_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_rf_module_type_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_rf_module_type_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_rf_module_type_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_rf_module_type_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_rf_module_type_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_role_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_role_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_role_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_role_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_role_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_role_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_shortcut_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_shortcut_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_shortcut_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_shortcut_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_shortcut_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_shortcut_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_site_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_site_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_site_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_site_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_site_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_site_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_spectralink_account_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_spectralink_account_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_spectralink_account_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_spectralink_account_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_spectralink_account_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_spectralink_account_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_spectralink_group_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_spectralink_group_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_spectralink_group_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_spectralink_group_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_spectralink_group_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_spectralink_group_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_status_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_status_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_status_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_status_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_status_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_status_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_api_svp_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_svp_get() TO "aperi-be";


--
-- Name: FUNCTION cas_api_svp_get(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_svp_get(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_svp_get_by_deviceidentifer(jsonb, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_svp_get_by_deviceidentifer(jsonb, text) TO "aperi-be";


--
-- Name: FUNCTION cas_api_svp_set(jsonb, boolean); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_api_svp_set(jsonb, boolean) TO "aperi-be";


--
-- Name: FUNCTION cas_call_query(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_call_query(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_call_query_main(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_call_query_main(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_call_query_remote(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_call_query_remote(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_call_query_wander(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_call_query_wander(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_call_reason_set(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_call_reason_set(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_employee_permissions_get(integer); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_employee_permissions_get(integer) TO "aperi-be";


--
-- Name: FUNCTION cas_employee_permissions_set(integer, jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_employee_permissions_set(integer, jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_execute_query(text, jsonb, OUT jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_execute_query(text, jsonb, OUT jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_mail_work_order_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_mail_work_order_get() TO "aperi-be";


--
-- Name: FUNCTION cas_mail_work_order_mailed(integer); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_mail_work_order_mailed(integer) TO "aperi-be";


--
-- Name: FUNCTION cas_mis_sync_connection_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_mis_sync_connection_get() TO "aperi-be";


--
-- Name: FUNCTION cas_mis_sync_populate(integer, jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_mis_sync_populate(integer, jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_mis_sync_populate_succeed(integer); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_mis_sync_populate_succeed(integer) TO "aperi-be";


--
-- Name: FUNCTION cas_notification(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_notification() TO "aperi-be";


--
-- Name: FUNCTION cas_reporting(text, jsonb, OUT jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_reporting(text, jsonb, OUT jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_reporting_call(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_reporting_call(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_reporting_call_detail(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_reporting_call_detail(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_reporting_call_main(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_reporting_call_main(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_reporting_call_remote(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_reporting_call_remote(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_reporting_call_wander(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_reporting_call_wander(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_reporting_duties(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_reporting_duties(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_reporting_presence(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_reporting_presence(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_session_create(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_session_create(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cas_session_delete(uuid); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_session_delete(uuid) TO "aperi-be";


--
-- Name: FUNCTION cas_session_get(uuid); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_session_get(uuid) TO "aperi-be";


--
-- Name: FUNCTION cas_setting_get(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cas_setting_get(jsonb) TO "aperi-be";


--
-- Name: FUNCTION cash_dist(money, money); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.cash_dist(money, money) TO "aperi-be";


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.crypt(text, text) TO "aperi-be";


--
-- Name: FUNCTION date_dist(date, date); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.date_dist(date, date) TO "aperi-be";


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.dearmor(text) TO "aperi-be";


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.decrypt(bytea, bytea, text) TO "aperi-be";


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.decrypt_iv(bytea, bytea, bytea, text) TO "aperi-be";


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.digest(bytea, text) TO "aperi-be";


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.digest(text, text) TO "aperi-be";


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.encrypt(bytea, bytea, text) TO "aperi-be";


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.encrypt_iv(bytea, bytea, bytea, text) TO "aperi-be";


--
-- Name: FUNCTION float4_dist(real, real); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.float4_dist(real, real) TO "aperi-be";


--
-- Name: FUNCTION float8_dist(double precision, double precision); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.float8_dist(double precision, double precision) TO "aperi-be";


--
-- Name: FUNCTION gbt_bit_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bit_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bit_consistent(internal, bit, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bit_consistent(internal, bit, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bit_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bit_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bit_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bit_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bit_same(public.gbtreekey_var, public.gbtreekey_var, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bit_same(public.gbtreekey_var, public.gbtreekey_var, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bit_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bit_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bpchar_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bpchar_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bpchar_consistent(internal, character, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bpchar_consistent(internal, character, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bytea_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bytea_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bytea_consistent(internal, bytea, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bytea_consistent(internal, bytea, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bytea_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bytea_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bytea_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bytea_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bytea_same(public.gbtreekey_var, public.gbtreekey_var, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bytea_same(public.gbtreekey_var, public.gbtreekey_var, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_bytea_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_bytea_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_cash_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_cash_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_cash_consistent(internal, money, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_cash_consistent(internal, money, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_cash_distance(internal, money, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_cash_distance(internal, money, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_cash_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_cash_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_cash_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_cash_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_cash_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_cash_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_cash_same(public.gbtreekey16, public.gbtreekey16, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_cash_same(public.gbtreekey16, public.gbtreekey16, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_cash_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_cash_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_date_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_date_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_date_consistent(internal, date, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_date_consistent(internal, date, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_date_distance(internal, date, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_date_distance(internal, date, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_date_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_date_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_date_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_date_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_date_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_date_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_date_same(public.gbtreekey8, public.gbtreekey8, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_date_same(public.gbtreekey8, public.gbtreekey8, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_date_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_date_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_decompress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_decompress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_enum_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_enum_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_enum_consistent(internal, anyenum, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_enum_consistent(internal, anyenum, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_enum_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_enum_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_enum_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_enum_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_enum_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_enum_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_enum_same(public.gbtreekey8, public.gbtreekey8, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_enum_same(public.gbtreekey8, public.gbtreekey8, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_enum_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_enum_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float4_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float4_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float4_consistent(internal, real, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float4_consistent(internal, real, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float4_distance(internal, real, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float4_distance(internal, real, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float4_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float4_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float4_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float4_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float4_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float4_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float4_same(public.gbtreekey8, public.gbtreekey8, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float4_same(public.gbtreekey8, public.gbtreekey8, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float4_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float4_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float8_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float8_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float8_consistent(internal, double precision, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float8_consistent(internal, double precision, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float8_distance(internal, double precision, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float8_distance(internal, double precision, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float8_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float8_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float8_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float8_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float8_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float8_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float8_same(public.gbtreekey16, public.gbtreekey16, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float8_same(public.gbtreekey16, public.gbtreekey16, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_float8_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_float8_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_inet_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_inet_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_inet_consistent(internal, inet, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_inet_consistent(internal, inet, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_inet_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_inet_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_inet_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_inet_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_inet_same(public.gbtreekey16, public.gbtreekey16, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_inet_same(public.gbtreekey16, public.gbtreekey16, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_inet_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_inet_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int2_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int2_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int2_consistent(internal, smallint, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int2_consistent(internal, smallint, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int2_distance(internal, smallint, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int2_distance(internal, smallint, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int2_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int2_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int2_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int2_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int2_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int2_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int2_same(public.gbtreekey4, public.gbtreekey4, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int2_same(public.gbtreekey4, public.gbtreekey4, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int2_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int2_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int4_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int4_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int4_consistent(internal, integer, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int4_consistent(internal, integer, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int4_distance(internal, integer, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int4_distance(internal, integer, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int4_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int4_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int4_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int4_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int4_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int4_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int4_same(public.gbtreekey8, public.gbtreekey8, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int4_same(public.gbtreekey8, public.gbtreekey8, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int4_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int4_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int8_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int8_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int8_consistent(internal, bigint, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int8_consistent(internal, bigint, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int8_distance(internal, bigint, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int8_distance(internal, bigint, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int8_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int8_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int8_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int8_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int8_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int8_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int8_same(public.gbtreekey16, public.gbtreekey16, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int8_same(public.gbtreekey16, public.gbtreekey16, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_int8_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_int8_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_intv_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_intv_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_intv_consistent(internal, interval, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_intv_consistent(internal, interval, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_intv_decompress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_intv_decompress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_intv_distance(internal, interval, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_intv_distance(internal, interval, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_intv_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_intv_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_intv_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_intv_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_intv_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_intv_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_intv_same(public.gbtreekey32, public.gbtreekey32, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_intv_same(public.gbtreekey32, public.gbtreekey32, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_intv_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_intv_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad8_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad8_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad8_consistent(internal, macaddr8, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad8_consistent(internal, macaddr8, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad8_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad8_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad8_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad8_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad8_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad8_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad8_same(public.gbtreekey16, public.gbtreekey16, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad8_same(public.gbtreekey16, public.gbtreekey16, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad8_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad8_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad_consistent(internal, macaddr, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad_consistent(internal, macaddr, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad_same(public.gbtreekey16, public.gbtreekey16, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad_same(public.gbtreekey16, public.gbtreekey16, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_macad_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_macad_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_numeric_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_numeric_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_numeric_consistent(internal, numeric, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_numeric_consistent(internal, numeric, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_numeric_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_numeric_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_numeric_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_numeric_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_numeric_same(public.gbtreekey_var, public.gbtreekey_var, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_numeric_same(public.gbtreekey_var, public.gbtreekey_var, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_numeric_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_numeric_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_oid_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_oid_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_oid_consistent(internal, oid, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_oid_consistent(internal, oid, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_oid_distance(internal, oid, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_oid_distance(internal, oid, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_oid_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_oid_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_oid_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_oid_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_oid_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_oid_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_oid_same(public.gbtreekey8, public.gbtreekey8, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_oid_same(public.gbtreekey8, public.gbtreekey8, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_oid_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_oid_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_text_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_text_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_text_consistent(internal, text, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_text_consistent(internal, text, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_text_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_text_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_text_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_text_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_text_same(public.gbtreekey_var, public.gbtreekey_var, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_text_same(public.gbtreekey_var, public.gbtreekey_var, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_text_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_text_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_time_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_time_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_time_consistent(internal, time without time zone, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_time_consistent(internal, time without time zone, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_time_distance(internal, time without time zone, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_time_distance(internal, time without time zone, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_time_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_time_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_time_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_time_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_time_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_time_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_time_same(public.gbtreekey16, public.gbtreekey16, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_time_same(public.gbtreekey16, public.gbtreekey16, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_time_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_time_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_timetz_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_timetz_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_timetz_consistent(internal, time with time zone, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_timetz_consistent(internal, time with time zone, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_ts_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_ts_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_ts_consistent(internal, timestamp without time zone, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_ts_consistent(internal, timestamp without time zone, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_ts_distance(internal, timestamp without time zone, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_ts_distance(internal, timestamp without time zone, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_ts_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_ts_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_ts_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_ts_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_ts_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_ts_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_ts_same(public.gbtreekey16, public.gbtreekey16, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_ts_same(public.gbtreekey16, public.gbtreekey16, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_ts_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_ts_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_tstz_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_tstz_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_tstz_consistent(internal, timestamp with time zone, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_tstz_consistent(internal, timestamp with time zone, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_tstz_distance(internal, timestamp with time zone, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_tstz_distance(internal, timestamp with time zone, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_uuid_compress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_uuid_compress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_uuid_consistent(internal, uuid, smallint, oid, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_uuid_consistent(internal, uuid, smallint, oid, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_uuid_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_uuid_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_uuid_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_uuid_penalty(internal, internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_uuid_picksplit(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_uuid_picksplit(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_uuid_same(public.gbtreekey32, public.gbtreekey32, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_uuid_same(public.gbtreekey32, public.gbtreekey32, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_uuid_union(internal, internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_uuid_union(internal, internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_var_decompress(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_var_decompress(internal) TO "aperi-be";


--
-- Name: FUNCTION gbt_var_fetch(internal); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gbt_var_fetch(internal) TO "aperi-be";


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gen_random_bytes(integer) TO "aperi-be";


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gen_random_uuid() TO "aperi-be";


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gen_salt(text) TO "aperi-be";


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.gen_salt(text, integer) TO "aperi-be";


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.hmac(bytea, bytea, text) TO "aperi-be";


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.hmac(text, text, text) TO "aperi-be";


--
-- Name: FUNCTION int2_dist(smallint, smallint); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.int2_dist(smallint, smallint) TO "aperi-be";


--
-- Name: FUNCTION int4_dist(integer, integer); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.int4_dist(integer, integer) TO "aperi-be";


--
-- Name: FUNCTION int8_dist(bigint, bigint); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.int8_dist(bigint, bigint) TO "aperi-be";


--
-- Name: FUNCTION interval_dist(interval, interval); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.interval_dist(interval, interval) TO "aperi-be";


--
-- Name: FUNCTION jsonb_diff(jsonb, jsonb, text[]); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.jsonb_diff(jsonb, jsonb, text[]) TO "aperi-be";


--
-- Name: FUNCTION location_call_end_call(location_call_identifier integer, enddtime timestamp with time zone); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.location_call_end_call(location_call_identifier integer, enddtime timestamp with time zone) TO "aperi-be";


--
-- Name: FUNCTION location_call_find_identifier(location_identifier integer); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.location_call_find_identifier(location_identifier integer) TO "aperi-be";


--
-- Name: FUNCTION location_call_raise_call(location_identifer integer, starttime timestamp with time zone); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.location_call_raise_call(location_identifer integer, starttime timestamp with time zone) TO "aperi-be";


--
-- Name: FUNCTION location_call_set_employee_presence(location_call_identifier integer, employee_identifier integer, timestamp_enter timestamp with time zone, timestamp_leave timestamp with time zone); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.location_call_set_employee_presence(location_call_identifier integer, employee_identifier integer, timestamp_enter timestamp with time zone, timestamp_leave timestamp with time zone) TO "aperi-be";


--
-- Name: FUNCTION location_call_update_status(location_call_identifier integer, new_state integer, updatetime timestamp with time zone); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.location_call_update_status(location_call_identifier integer, new_state integer, updatetime timestamp with time zone) TO "aperi-be";


--
-- Name: FUNCTION notify_location_call_updated(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.notify_location_call_updated() TO "aperi-be";


--
-- Name: FUNCTION oid_dist(oid, oid); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.oid_dist(oid, oid) TO "aperi-be";


--
-- Name: FUNCTION patient_lifeline_message_pending_add(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.patient_lifeline_message_pending_add() TO "aperi-be";


--
-- Name: FUNCTION patient_lifeline_message_pending_remove(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.patient_lifeline_message_pending_remove() TO "aperi-be";


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_armor_headers(text, OUT key text, OUT value text) TO "aperi-be";


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_key_id(bytea) TO "aperi-be";


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_pub_decrypt(bytea, bytea) TO "aperi-be";


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_pub_decrypt(bytea, bytea, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_pub_decrypt(bytea, bytea, text, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea) TO "aperi-be";


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_pub_encrypt(text, bytea) TO "aperi-be";


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_pub_encrypt(text, bytea, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_pub_encrypt_bytea(bytea, bytea) TO "aperi-be";


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_pub_encrypt_bytea(bytea, bytea, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_sym_decrypt(bytea, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_sym_decrypt(bytea, text, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_sym_decrypt_bytea(bytea, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_sym_decrypt_bytea(bytea, text, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_sym_encrypt(text, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_sym_encrypt(text, text, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_sym_encrypt_bytea(bytea, text) TO "aperi-be";


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.pgp_sym_encrypt_bytea(bytea, text, text) TO "aperi-be";


--
-- Name: FUNCTION prune(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.prune() TO "aperi-be";


--
-- Name: FUNCTION prune(interval); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.prune(interval) TO "aperi-be";


--
-- Name: FUNCTION r700_gettopsite(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.r700_gettopsite() TO "aperi-be";


--
-- Name: FUNCTION simple_notify(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.simple_notify() TO "aperi-be";


--
-- Name: FUNCTION spectralink_message_work(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.spectralink_message_work() TO "aperi-be";


--
-- Name: FUNCTION time_dist(time without time zone, time without time zone); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.time_dist(time without time zone, time without time zone) TO "aperi-be";


--
-- Name: FUNCTION translation_get(key character varying, languagecode character varying); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.translation_get(key character varying, languagecode character varying) TO "aperi-be";


--
-- Name: FUNCTION translation_set(key character varying, en text, nl text, fr text, ru text, de text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.translation_set(key character varying, en text, nl text, fr text, ru text, de text) TO "aperi-be";


--
-- Name: FUNCTION trigger_api_login(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_api_login() TO "aperi-be";


--
-- Name: FUNCTION trigger_care_location_call(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_care_location_call() TO "aperi-be";


--
-- Name: FUNCTION trigger_care_session_location_call(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_care_session_location_call() TO "aperi-be";


--
-- Name: FUNCTION trigger_cas_audit_log(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_cas_audit_log() TO "aperi-be";


--
-- Name: FUNCTION trigger_cas_mis_connection_notification(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_cas_mis_connection_notification() TO "aperi-be";


--
-- Name: FUNCTION trigger_cas_notification(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_cas_notification() TO "aperi-be";


--
-- Name: FUNCTION trigger_cas_version_after(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_cas_version_after() TO "aperi-be";


--
-- Name: FUNCTION trigger_cas_version_before(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_cas_version_before() TO "aperi-be";


--
-- Name: FUNCTION trigger_employee_authorization(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_employee_authorization() TO "aperi-be";


--
-- Name: FUNCTION trigger_employee_not_active_after(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_employee_not_active_after() TO "aperi-be";


--
-- Name: FUNCTION trigger_employee_not_active_before(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_employee_not_active_before() TO "aperi-be";


--
-- Name: FUNCTION trigger_location_care(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_location_care() TO "aperi-be";


--
-- Name: FUNCTION trigger_location_room(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_location_room() TO "aperi-be";


--
-- Name: FUNCTION trigger_log_care(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_log_care() TO "aperi-be";


--
-- Name: FUNCTION trigger_log_duty(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_log_duty() TO "aperi-be";


--
-- Name: FUNCTION trigger_log_employee_dect_account(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_log_employee_dect_account() TO "aperi-be";


--
-- Name: FUNCTION trigger_log_employee_spectralink_account(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_log_employee_spectralink_account() TO "aperi-be";


--
-- Name: FUNCTION trigger_log_location_patient(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_log_location_patient() TO "aperi-be";


--
-- Name: FUNCTION trigger_log_patient_cas_mode(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_log_patient_cas_mode() TO "aperi-be";


--
-- Name: FUNCTION trigger_log_status(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_log_status() TO "aperi-be";


--
-- Name: FUNCTION trigger_mis_legacy(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_mis_legacy() TO "aperi-be";


--
-- Name: FUNCTION trigger_mis_sync(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_mis_sync() TO "aperi-be";


--
-- Name: FUNCTION trigger_patient_name(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_patient_name() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_application_global_device(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_application_global_device() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_camera_webrtc_account(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_camera_webrtc_account() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_e_c_a_m_d_employee_engine_call_action_message_app(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_e_c_a_m_d_employee_engine_call_action_message_app() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_e_c_a_m_d_employee_engine_call_action_message_emp(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_e_c_a_m_d_employee_engine_call_action_message_emp() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_employee_fcm_account(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_employee_fcm_account() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_call_action_engine_call_action_message(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_call_action_engine_call_action_message() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_call_action_engine_call_action_viewpoint_n(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_call_action_engine_call_action_viewpoint_n() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_call_action_engine_call_action_viewpoint_s(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_call_action_engine_call_action_viewpoint_s() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_call_action_message_dect_engine_call_actio(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_call_action_message_dect_engine_call_actio() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_call_action_message_destination_dect_engin(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_call_action_message_destination_dect_engin() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_call_action_message_destination_email_engi(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_call_action_message_destination_email_engi() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_call_action_message_destination_spectralin(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_call_action_message_destination_spectralin() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_call_action_message_spectralink_engine_cal(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_call_action_message_spectralink_engine_cal() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_event_badge_engine_event_badge_provided(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_event_badge_engine_event_badge_provided() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_event_badge_engine_event_badge_provisioned(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_event_badge_engine_event_badge_provisioned() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_event_badge_rf_module_event_rf_module_prov(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_event_badge_rf_module_event_rf_module_prov() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_event_engine_event_access_denied(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_event_engine_event_access_denied() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_event_engine_event_access_entered(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_event_engine_event_access_entered() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_event_engine_event_access_left(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_event_engine_event_access_left() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_engine_event_engine_event_viewpoint_state_changed(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_engine_event_engine_event_viewpoint_state_changed() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_general_practitioner_administration_contact(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_general_practitioner_administration_contact() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_location_care(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_location_care() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_message_lifeline_message(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_message_lifeline_message() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_organization_administration_contact(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_organization_administration_contact() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_patient_patient_administration_information(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_patient_patient_administration_information() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_patient_patient_medical_information(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_patient_patient_medical_information() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_patient_patient_social_information(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_patient_patient_social_information() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_status_status_app(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_status_status_app() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_status_status_dect(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_status_status_dect() TO "aperi-be";


--
-- Name: FUNCTION trigger_prune_sui_patient_info_patient(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_prune_sui_patient_info_patient() TO "aperi-be";


--
-- Name: FUNCTION trigger_spectralink_message_external_identifier(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_spectralink_message_external_identifier() TO "aperi-be";


--
-- Name: FUNCTION trigger_sui_patient_info(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.trigger_sui_patient_info() TO "aperi-be";


--
-- Name: FUNCTION ts_dist(timestamp without time zone, timestamp without time zone); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.ts_dist(timestamp without time zone, timestamp without time zone) TO "aperi-be";


--
-- Name: FUNCTION tstz_dist(timestamp with time zone, timestamp with time zone); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.tstz_dist(timestamp with time zone, timestamp with time zone) TO "aperi-be";


--
-- Name: FUNCTION update_updatedtimestamp(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.update_updatedtimestamp() TO "aperi-be";


--
-- Name: FUNCTION version_current_get(); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.version_current_get() TO "aperi-be";


--
-- Name: FUNCTION version_history_set(version text); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.version_history_set(version text) TO "aperi-be";


--
-- Name: FUNCTION first(anyelement); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.first(anyelement) TO "aperi-be";


--
-- Name: FUNCTION jsonb_concat_agg(jsonb); Type: ACL; Schema: public; Owner: aperi
--

GRANT ALL ON FUNCTION public.jsonb_concat_agg(jsonb) TO "aperi-be";


--
-- Name: TABLE access_control_access_door_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.access_control_access_door_group TO "aperi-be";


--
-- Name: TABLE access_door; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.access_door TO "aperi-be";


--
-- Name: TABLE access_door_access_control; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.access_door_access_control TO "aperi-be";


--
-- Name: TABLE access_door_access_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.access_door_access_group TO "aperi-be";


--
-- Name: TABLE access_door_door_procedure; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.access_door_door_procedure TO "aperi-be";


--
-- Name: TABLE access_door_group_access_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.access_door_group_access_group TO "aperi-be";


--
-- Name: TABLE access_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.access_group TO "aperi-be";


--
-- Name: TABLE access_group_badge; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.access_group_badge TO "aperi-be";


--
-- Name: TABLE action_config; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.action_config TO "aperi-be";


--
-- Name: TABLE action_config_dect_to_crews_of_location; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.action_config_dect_to_crews_of_location TO "aperi-be";


--
-- Name: SEQUENCE action_config_dect_to_crews_of_location_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.action_config_dect_to_crews_of_location_identifier_seq TO "aperi-be";


--
-- Name: TABLE action_config_dect_to_crews_of_location_role; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.action_config_dect_to_crews_of_location_role TO "aperi-be";


--
-- Name: SEQUENCE action_config_dect_to_crews_of_location_role_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.action_config_dect_to_crews_of_location_role_identifier_seq TO "aperi-be";


--
-- Name: TABLE action_config_dect_to_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.action_config_dect_to_group TO "aperi-be";


--
-- Name: TABLE action_config_dect_to_group_dect_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.action_config_dect_to_group_dect_group TO "aperi-be";


--
-- Name: SEQUENCE action_config_dect_to_group_dect_group_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.action_config_dect_to_group_dect_group_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE action_config_dect_to_group_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.action_config_dect_to_group_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE action_config_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.action_config_identifier_seq TO "aperi-be";


--
-- Name: TABLE action_config_spectralink_to_crews_of_location; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.action_config_spectralink_to_crews_of_location TO "aperi-be";


--
-- Name: SEQUENCE action_config_spectralink_to_crews_of_location_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.action_config_spectralink_to_crews_of_location_identifier_seq TO "aperi-be";


--
-- Name: TABLE action_config_spectralink_to_crews_of_location_role; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.action_config_spectralink_to_crews_of_location_role TO "aperi-be";


--
-- Name: SEQUENCE action_config_spectralink_to_crews_of_location_r_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.action_config_spectralink_to_crews_of_location_r_identifier_seq TO "aperi-be";


--
-- Name: TABLE action_config_spectralink_to_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.action_config_spectralink_to_group TO "aperi-be";


--
-- Name: SEQUENCE action_config_spectralink_to_group_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.action_config_spectralink_to_group_identifier_seq TO "aperi-be";


--
-- Name: TABLE action_config_spectralink_to_group_spectralink_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.action_config_spectralink_to_group_spectralink_group TO "aperi-be";


--
-- Name: SEQUENCE action_config_spectralink_to_group_spectralink_g_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.action_config_spectralink_to_group_spectralink_g_identifier_seq TO "aperi-be";


--
-- Name: TABLE activity; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.activity TO "aperi-be";


--
-- Name: TABLE address; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.address TO "aperi-be";


--
-- Name: TABLE administration_contact; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.administration_contact TO "aperi-be";


--
-- Name: TABLE allergy; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.allergy TO "aperi-be";


--
-- Name: TABLE api_login; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.api_login TO "aperi-be";


--
-- Name: TABLE api_token; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.api_token TO "aperi-be";


--
-- Name: TABLE app_message; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.app_message TO "aperi-be";


--
-- Name: TABLE application_global; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.application_global TO "aperi-be";


--
-- Name: TABLE application_svp; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.application_svp TO "aperi-be";


--
-- Name: TABLE application_svp_crews; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.application_svp_crews TO "aperi-be";


--
-- Name: TABLE application_svp_status; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.application_svp_status TO "aperi-be";


--
-- Name: TABLE appointment; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.appointment TO "aperi-be";


--
-- Name: TABLE badge; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.badge TO "aperi-be";


--
-- Name: TABLE blood_type; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.blood_type TO "aperi-be";


--
-- Name: TABLE bluetooth_device; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.bluetooth_device TO "aperi-be";


--
-- Name: TABLE broadcast_call; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.broadcast_call TO "aperi-be";


--
-- Name: TABLE broadcast_call_broadcast_call_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.broadcast_call_broadcast_call_group TO "aperi-be";


--
-- Name: TABLE broadcast_call_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.broadcast_call_group TO "aperi-be";


--
-- Name: TABLE broadcast_call_group_device; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.broadcast_call_group_device TO "aperi-be";


--
-- Name: TABLE call_reason; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.call_reason TO "aperi-be";


--
-- Name: TABLE call_reason_category; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.call_reason_category TO "aperi-be";


--
-- Name: TABLE callback_queue; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.callback_queue TO "aperi-be";


--
-- Name: SEQUENCE callback_queue_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.callback_queue_identifier_seq TO "aperi-be";


--
-- Name: TABLE camera; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.camera TO "aperi-be";


--
-- Name: TABLE care; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.care TO "aperi-be";


--
-- Name: TABLE care_action; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.care_action TO "aperi-be";


--
-- Name: SEQUENCE care_action_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.care_action_identifier_seq TO "aperi-be";


--
-- Name: TABLE care_action_signature; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.care_action_signature TO "aperi-be";


--
-- Name: SEQUENCE care_action_signature_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.care_action_signature_identifier_seq TO "aperi-be";


--
-- Name: TABLE care_session; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.care_session TO "aperi-be";


--
-- Name: TABLE cas_audit_log; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.cas_audit_log TO "aperi-be";


--
-- Name: TABLE cas_notification; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.cas_notification TO "aperi-be";


--
-- Name: TABLE cas_report; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.cas_report TO "aperi-be";


--
-- Name: TABLE cas_session; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.cas_session TO "aperi-be";


--
-- Name: TABLE com_port; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.com_port TO "aperi-be";


--
-- Name: TABLE contact; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.contact TO "aperi-be";


--
-- Name: TABLE contact_list; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.contact_list TO "aperi-be";


--
-- Name: TABLE crew; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.crew TO "aperi-be";


--
-- Name: TABLE crew_location; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.crew_location TO "aperi-be";


--
-- Name: TABLE day_night; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.day_night TO "aperi-be";


--
-- Name: TABLE dect_account; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.dect_account TO "aperi-be";


--
-- Name: TABLE dect_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.dect_group TO "aperi-be";


--
-- Name: TABLE dect_group_dect_account; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.dect_group_dect_account TO "aperi-be";


--
-- Name: TABLE dect_group_location; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.dect_group_location TO "aperi-be";


--
-- Name: TABLE dect_message; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.dect_message TO "aperi-be";


--
-- Name: TABLE dect_message_queue; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.dect_message_queue TO "aperi-be";


--
-- Name: SEQUENCE dect_message_queue_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.dect_message_queue_identifier_seq TO "aperi-be";


--
-- Name: TABLE default_text; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.default_text TO "aperi-be";


--
-- Name: TABLE dementia; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.dementia TO "aperi-be";


--
-- Name: TABLE department; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.department TO "aperi-be";


--
-- Name: TABLE device; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.device TO "aperi-be";


--
-- Name: TABLE device_status; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.device_status TO "aperi-be";


--
-- Name: TABLE diary; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.diary TO "aperi-be";


--
-- Name: SEQUENCE diary_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.diary_identifier_seq TO "aperi-be";


--
-- Name: TABLE diary_patient; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.diary_patient TO "aperi-be";


--
-- Name: SEQUENCE diary_patient_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.diary_patient_identifier_seq TO "aperi-be";


--
-- Name: TABLE diary_read; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.diary_read TO "aperi-be";


--
-- Name: TABLE door_procedure; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.door_procedure TO "aperi-be";


--
-- Name: TABLE email; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.email TO "aperi-be";


--
-- Name: TABLE employee; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.employee TO "aperi-be";


--
-- Name: TABLE employee_authorization; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.employee_authorization TO "aperi-be";


--
-- Name: TABLE engine_action; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_action TO "aperi-be";


--
-- Name: TABLE engine_call; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call TO "aperi-be";


--
-- Name: TABLE engine_call_action; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action TO "aperi-be";


--
-- Name: TABLE engine_call_action_message; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action_message TO "aperi-be";


--
-- Name: TABLE engine_call_action_message_app; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action_message_app TO "aperi-be";


--
-- Name: TABLE engine_call_action_message_dect; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action_message_dect TO "aperi-be";


--
-- Name: TABLE engine_call_action_message_destination_dect; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action_message_destination_dect TO "aperi-be";


--
-- Name: TABLE engine_call_action_message_destination_email; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action_message_destination_email TO "aperi-be";


--
-- Name: TABLE engine_call_action_message_destination_employee; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action_message_destination_employee TO "aperi-be";


--
-- Name: TABLE engine_call_action_message_destination_employee_role; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action_message_destination_employee_role TO "aperi-be";


--
-- Name: TABLE engine_call_action_message_destination_spectralink; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action_message_destination_spectralink TO "aperi-be";


--
-- Name: TABLE engine_call_action_message_email; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action_message_email TO "aperi-be";


--
-- Name: TABLE engine_call_action_message_spectralink; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action_message_spectralink TO "aperi-be";


--
-- Name: TABLE engine_call_action_viewpoint_notification; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action_viewpoint_notification TO "aperi-be";


--
-- Name: TABLE engine_call_action_viewpoint_status; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_call_action_viewpoint_status TO "aperi-be";


--
-- Name: TABLE engine_device_configuration_profile; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_device_configuration_profile TO "aperi-be";


--
-- Name: TABLE engine_event; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_event TO "aperi-be";


--
-- Name: TABLE engine_event_access_denied; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_event_access_denied TO "aperi-be";


--
-- Name: TABLE engine_event_access_entered; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_event_access_entered TO "aperi-be";


--
-- Name: TABLE engine_event_access_left; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_event_access_left TO "aperi-be";


--
-- Name: TABLE engine_event_badge_provided; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_event_badge_provided TO "aperi-be";


--
-- Name: TABLE engine_event_badge_provisioned; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_event_badge_provisioned TO "aperi-be";


--
-- Name: TABLE engine_event_rf_module_provided; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_event_rf_module_provided TO "aperi-be";


--
-- Name: TABLE engine_event_viewpoint_state_changed; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_event_viewpoint_state_changed TO "aperi-be";


--
-- Name: TABLE engine_server_configuration_profile; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.engine_server_configuration_profile TO "aperi-be";


--
-- Name: TABLE espa_in_message; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.espa_in_message TO "aperi-be";


--
-- Name: TABLE fcm_account; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.fcm_account TO "aperi-be";


--
-- Name: TABLE flyway_schema_history; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.flyway_schema_history TO "aperi-be";


--
-- Name: TABLE general_practitioner; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.general_practitioner TO "aperi-be";


--
-- Name: TABLE gps_signal; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gps_signal TO "aperi-be";


--
-- Name: TABLE heartbeat; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.heartbeat TO "aperi-be";


--
-- Name: SEQUENCE heartbeat_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.heartbeat_identifier_seq TO "aperi-be";


--
-- Name: TABLE hulp_call; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.hulp_call TO "aperi-be";


--
-- Name: TABLE image; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.image TO "aperi-be";


--
-- Name: TABLE lifeline_message; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.lifeline_message TO "aperi-be";


--
-- Name: TABLE lifeline_message_answer; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.lifeline_message_answer TO "aperi-be";


--
-- Name: TABLE lifeline_message_button; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.lifeline_message_button TO "aperi-be";


--
-- Name: TABLE locality; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.locality TO "aperi-be";


--
-- Name: TABLE location; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.location TO "aperi-be";


--
-- Name: TABLE location_call; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.location_call TO "aperi-be";


--
-- Name: TABLE location_call_callback; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.location_call_callback TO "aperi-be";


--
-- Name: SEQUENCE location_call_callback_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.location_call_callback_identifier_seq TO "aperi-be";


--
-- Name: TABLE location_call_employee_presence; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.location_call_employee_presence TO "aperi-be";


--
-- Name: SEQUENCE location_call_employee_presence_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.location_call_employee_presence_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE location_call_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.location_call_identifier_seq TO "aperi-be";


--
-- Name: TABLE location_call_patient_in_location; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.location_call_patient_in_location TO "aperi-be";


--
-- Name: SEQUENCE location_call_patient_in_location_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.location_call_patient_in_location_identifier_seq TO "aperi-be";


--
-- Name: TABLE location_call_state_change; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.location_call_state_change TO "aperi-be";


--
-- Name: SEQUENCE location_call_state_change_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.location_call_state_change_identifier_seq TO "aperi-be";


--
-- Name: TABLE location_gateway_device_gateway; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.location_gateway_device_gateway TO "aperi-be";


--
-- Name: TABLE location_patient; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.location_patient TO "aperi-be";


--
-- Name: TABLE log; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.log TO "aperi-be";


--
-- Name: TABLE log_care; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.log_care TO "aperi-be";


--
-- Name: SEQUENCE log_care_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.log_care_identifier_seq TO "aperi-be";


--
-- Name: TABLE log_door; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.log_door TO "aperi-be";


--
-- Name: SEQUENCE log_door_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.log_door_identifier_seq TO "aperi-be";


--
-- Name: TABLE log_duty; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.log_duty TO "aperi-be";


--
-- Name: SEQUENCE log_duty_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.log_duty_identifier_seq TO "aperi-be";


--
-- Name: TABLE log_employee_dect_account; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.log_employee_dect_account TO "aperi-be";


--
-- Name: SEQUENCE log_employee_dect_account_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.log_employee_dect_account_identifier_seq TO "aperi-be";


--
-- Name: TABLE log_employee_spectralink_account; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.log_employee_spectralink_account TO "aperi-be";


--
-- Name: SEQUENCE log_employee_spectralink_account_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.log_employee_spectralink_account_identifier_seq TO "aperi-be";


--
-- Name: TABLE log_engine_context_device; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.log_engine_context_device TO "aperi-be";


--
-- Name: TABLE log_engine_context_location; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.log_engine_context_location TO "aperi-be";


--
-- Name: TABLE log_engine_context_patient; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.log_engine_context_patient TO "aperi-be";


--
-- Name: TABLE log_location_patient; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.log_location_patient TO "aperi-be";


--
-- Name: SEQUENCE log_location_patient_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.log_location_patient_identifier_seq TO "aperi-be";


--
-- Name: TABLE log_patient_cas_mode; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.log_patient_cas_mode TO "aperi-be";


--
-- Name: SEQUENCE log_patient_cas_mode_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.log_patient_cas_mode_identifier_seq TO "aperi-be";


--
-- Name: TABLE log_status; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.log_status TO "aperi-be";


--
-- Name: SEQUENCE log_status_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.log_status_identifier_seq TO "aperi-be";


--
-- Name: TABLE management_account; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.management_account TO "aperi-be";


--
-- Name: TABLE management_account_management_site; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.management_account_management_site TO "aperi-be";


--
-- Name: TABLE management_department; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.management_department TO "aperi-be";


--
-- Name: TABLE management_device; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.management_device TO "aperi-be";


--
-- Name: TABLE management_device_update; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.management_device_update TO "aperi-be";


--
-- Name: TABLE management_room; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.management_room TO "aperi-be";


--
-- Name: TABLE management_server; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.management_server TO "aperi-be";


--
-- Name: TABLE management_site; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.management_site TO "aperi-be";


--
-- Name: TABLE management_site_management_server; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.management_site_management_server TO "aperi-be";


--
-- Name: TABLE measurement_bloodpressure; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_bloodpressure TO "aperi-be";


--
-- Name: TABLE measurement_bloodsample; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_bloodsample TO "aperi-be";


--
-- Name: TABLE measurement_glycemia; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_glycemia TO "aperi-be";


--
-- Name: TABLE measurement_length; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_length TO "aperi-be";


--
-- Name: TABLE measurement_morsefallscale; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_morsefallscale TO "aperi-be";


--
-- Name: TABLE measurement_oxygensaturation; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_oxygensaturation TO "aperi-be";


--
-- Name: TABLE measurement_pulse; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_pulse TO "aperi-be";


--
-- Name: TABLE measurement_stoolrecord; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_stoolrecord TO "aperi-be";


--
-- Name: TABLE measurement_temperature; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_temperature TO "aperi-be";


--
-- Name: TABLE measurement_urineoutput; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_urineoutput TO "aperi-be";


--
-- Name: TABLE measurement_visualpainscale; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_visualpainscale TO "aperi-be";


--
-- Name: TABLE measurement_waterlowscale; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_waterlowscale TO "aperi-be";


--
-- Name: TABLE measurement_weight; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_weight TO "aperi-be";


--
-- Name: TABLE measurement; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement TO "aperi-be";


--
-- Name: SEQUENCE measurement_bloodpressure_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_bloodpressure_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE measurement_bloodsample_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_bloodsample_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE measurement_glycemia_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_glycemia_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE measurement_length_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_length_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE measurement_morsefallscale_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_morsefallscale_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE measurement_oxygensaturation_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_oxygensaturation_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE measurement_pulse_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_pulse_identifier_seq TO "aperi-be";


--
-- Name: TABLE measurement_signature; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.measurement_signature TO "aperi-be";


--
-- Name: SEQUENCE measurement_signature_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_signature_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE measurement_stoolrecord_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_stoolrecord_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE measurement_temperature_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_temperature_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE measurement_urineoutput_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_urineoutput_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE measurement_visualpainscale_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_visualpainscale_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE measurement_waterlowscale_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_waterlowscale_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE measurement_weight_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.measurement_weight_identifier_seq TO "aperi-be";


--
-- Name: TABLE medication; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.medication TO "aperi-be";


--
-- Name: TABLE medication_form; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.medication_form TO "aperi-be";


--
-- Name: TABLE medication_signature; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.medication_signature TO "aperi-be";


--
-- Name: TABLE medication_signature_detail; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.medication_signature_detail TO "aperi-be";


--
-- Name: SEQUENCE medication_signature_detail_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.medication_signature_detail_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE medication_signature_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.medication_signature_identifier_seq TO "aperi-be";


--
-- Name: TABLE medication_type; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.medication_type TO "aperi-be";


--
-- Name: SEQUENCE medication_type_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.medication_type_identifier_seq TO "aperi-be";


--
-- Name: TABLE message; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.message TO "aperi-be";


--
-- Name: TABLE message_images; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.message_images TO "aperi-be";


--
-- Name: TABLE message_read_employees; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.message_read_employees TO "aperi-be";


--
-- Name: TABLE message_read_patients; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.message_read_patients TO "aperi-be";


--
-- Name: TABLE message_to_patients; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.message_to_patients TO "aperi-be";


--
-- Name: TABLE message_to_roles; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.message_to_roles TO "aperi-be";


--
-- Name: TABLE mis_connection; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection TO "aperi-be";


--
-- Name: TABLE mis_connection_care_action; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_care_action TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_care_action_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_care_action_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_care_action_signature; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_care_action_signature TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_care_action_signature_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_care_action_signature_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_department; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_department TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_department_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_department_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_diary; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_diary TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_diary_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_diary_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_employee; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_employee TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_employee_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_employee_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_location; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_location TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_location_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_location_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_measurement_signature; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_measurement_signature TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_measurement_signature_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_measurement_signature_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_medication_signature; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_medication_signature TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_medication_signature_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_medication_signature_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_medication_type; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_medication_type TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_medication_type_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_medication_type_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_patient; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_patient TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_patient_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_patient_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_planned_care_action; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_planned_care_action TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_planned_care_action_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_planned_care_action_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_planned_measurement; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_planned_measurement TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_planned_measurement_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_planned_measurement_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_planned_medication; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_planned_medication TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_planned_medication_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_planned_medication_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_section; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_section TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_section_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_section_identifier_seq TO "aperi-be";


--
-- Name: TABLE mis_connection_site; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.mis_connection_site TO "aperi-be";


--
-- Name: SEQUENCE mis_connection_site_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mis_connection_site_identifier_seq TO "aperi-be";


--
-- Name: TABLE monitor_status_device; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.monitor_status_device TO "aperi-be";


--
-- Name: SEQUENCE monitor_status_device_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.monitor_status_device_identifier_seq TO "aperi-be";


--
-- Name: TABLE monitor_status_server; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.monitor_status_server TO "aperi-be";


--
-- Name: SEQUENCE monitor_status_server_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.monitor_status_server_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE mq_command_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.mq_command_identifier TO "aperi-be";


--
-- Name: TABLE notification; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.notification TO "aperi-be";


--
-- Name: TABLE organization; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.organization TO "aperi-be";


--
-- Name: TABLE patient; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient TO "aperi-be";


--
-- Name: TABLE patient_administration_information; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient_administration_information TO "aperi-be";


--
-- Name: TABLE patient_contact; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient_contact TO "aperi-be";


--
-- Name: TABLE patient_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient_group TO "aperi-be";


--
-- Name: TABLE patient_group_ui_access; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient_group_ui_access TO "aperi-be";


--
-- Name: TABLE patient_identification; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient_identification TO "aperi-be";


--
-- Name: SEQUENCE patient_identification_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.patient_identification_identifier_seq TO "aperi-be";


--
-- Name: TABLE patient_info; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient_info TO "aperi-be";


--
-- Name: SEQUENCE patient_info_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.patient_info_identifier_seq TO "aperi-be";


--
-- Name: TABLE patient_lifeline_message_pending; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient_lifeline_message_pending TO "aperi-be";


--
-- Name: TABLE patient_medical_information; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient_medical_information TO "aperi-be";


--
-- Name: TABLE patient_medical_information_allergies; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient_medical_information_allergies TO "aperi-be";


--
-- Name: TABLE patient_patient_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient_patient_group TO "aperi-be";


--
-- Name: TABLE patient_session; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient_session TO "aperi-be";


--
-- Name: TABLE patient_social_information; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.patient_social_information TO "aperi-be";


--
-- Name: TABLE period; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.period TO "aperi-be";


--
-- Name: TABLE picture; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.picture TO "aperi-be";


--
-- Name: SEQUENCE picture_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.picture_identifier_seq TO "aperi-be";


--
-- Name: TABLE planned_care_action; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.planned_care_action TO "aperi-be";


--
-- Name: SEQUENCE planned_care_action_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.planned_care_action_identifier_seq TO "aperi-be";


--
-- Name: TABLE planned_measurement; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.planned_measurement TO "aperi-be";


--
-- Name: SEQUENCE planned_measurement_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.planned_measurement_identifier_seq TO "aperi-be";


--
-- Name: TABLE planned_medication; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.planned_medication TO "aperi-be";


--
-- Name: TABLE planned_medication_detail; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.planned_medication_detail TO "aperi-be";


--
-- Name: SEQUENCE planned_medication_detail_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.planned_medication_detail_identifier_seq TO "aperi-be";


--
-- Name: SEQUENCE planned_medication_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.planned_medication_identifier_seq TO "aperi-be";


--
-- Name: TABLE possible_service_function; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.possible_service_function TO "aperi-be";


--
-- Name: TABLE possible_work_order; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.possible_work_order TO "aperi-be";


--
-- Name: TABLE possible_work_order_role; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.possible_work_order_role TO "aperi-be";


--
-- Name: TABLE possible_work_order_top; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.possible_work_order_top TO "aperi-be";


--
-- Name: TABLE predefined_broadcast_call; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.predefined_broadcast_call TO "aperi-be";


--
-- Name: TABLE process; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.process TO "aperi-be";


--
-- Name: TABLE process_boot_cycle; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.process_boot_cycle TO "aperi-be";


--
-- Name: TABLE radio; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.radio TO "aperi-be";


--
-- Name: TABLE remote_alarm; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.remote_alarm TO "aperi-be";


--
-- Name: TABLE rf_module; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.rf_module TO "aperi-be";


--
-- Name: TABLE rf_module_brand; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.rf_module_brand TO "aperi-be";


--
-- Name: TABLE rf_module_type; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.rf_module_type TO "aperi-be";


--
-- Name: TABLE role; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.role TO "aperi-be";


--
-- Name: TABLE role_status; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.role_status TO "aperi-be";


--
-- Name: TABLE role_ui_access; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.role_ui_access TO "aperi-be";


--
-- Name: TABLE roles_engine_call_action_message_destination_email; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.roles_engine_call_action_message_destination_email TO "aperi-be";


--
-- Name: TABLE room; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.room TO "aperi-be";


--
-- Name: TABLE section; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.section TO "aperi-be";


--
-- Name: SEQUENCE sequence_access_door_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_access_door_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_access_group_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_access_group_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_activity_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_activity_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_address_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_address_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_administration_contact_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_administration_contact_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_allergy_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_allergy_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_api_login_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_api_login_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_api_token_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_api_token_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_app_message_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_app_message_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_application_global_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_application_global_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_application_svp_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_application_svp_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_appointment_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_appointment_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_badge_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_badge_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_blood_type_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_blood_type_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_bluetooth_device_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_bluetooth_device_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_broadcast_call_group_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_broadcast_call_group_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_broadcast_call_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_broadcast_call_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_call_reason_category_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_call_reason_category_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_call_reason_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_call_reason_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_camera_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_camera_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_care_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_care_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_care_session_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_care_session_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_com_port_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_com_port_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_contact_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_contact_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_contact_list_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_contact_list_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_crew_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_crew_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_day_night_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_day_night_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_dect_account_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_dect_account_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_dect_group_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_dect_group_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_dect_message_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_dect_message_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_default_text_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_default_text_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_dementia_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_dementia_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_department_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_department_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_device_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_device_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_device_status_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_device_status_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_door_procedure_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_door_procedure_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_email_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_email_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_employee_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_employee_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_action_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_action_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_action_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_action_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_action_message_app_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_action_message_app_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_action_message_dect_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_action_message_dect_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_action_message_destination_dect_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_action_message_destination_dect_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_action_message_destination_email_identifie; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_action_message_destination_email_identifie TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_action_message_destination_employee_identi; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_action_message_destination_employee_identi TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_action_message_destination_spectralink_ide; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_action_message_destination_spectralink_ide TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_action_message_email_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_action_message_email_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_action_message_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_action_message_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_action_message_spectralink_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_action_message_spectralink_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_action_viewpoint_notification_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_action_viewpoint_notification_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_action_viewpoint_status_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_action_viewpoint_status_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_call_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_call_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_device_configuration_profile_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_device_configuration_profile_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_event_access_denied_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_event_access_denied_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_event_access_entered_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_event_access_entered_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_event_access_left_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_event_access_left_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_event_badge_provided_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_event_badge_provided_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_event_badge_provisioned_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_event_badge_provisioned_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_event_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_event_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_event_rf_module_provided_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_event_rf_module_provided_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_event_viewpoint_state_changed_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_event_viewpoint_state_changed_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_engine_server_configuration_profile_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_engine_server_configuration_profile_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_espa_in_message_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_espa_in_message_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_fcm_account_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_fcm_account_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_general_practitioner_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_general_practitioner_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_gps_signal_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_gps_signal_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_hulp_call_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_hulp_call_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_image_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_image_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_lifeline_message_answer_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_lifeline_message_answer_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_lifeline_message_button_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_lifeline_message_button_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_lifeline_message_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_lifeline_message_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_locality_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_locality_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_location_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_location_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_log_engine_context_device_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_log_engine_context_device_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_log_engine_context_location_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_log_engine_context_location_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_log_engine_context_patient_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_log_engine_context_patient_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_log_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_log_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_management_account_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_management_account_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_management_department_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_management_department_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_management_device_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_management_device_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_management_device_update_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_management_device_update_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_management_room_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_management_room_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_management_server_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_management_server_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_management_site_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_management_site_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_medication_form_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_medication_form_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_medication_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_medication_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_message_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_message_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_notification_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_notification_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_organization_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_organization_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_patient_administration_information_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_patient_administration_information_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_patient_contact_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_patient_contact_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_patient_group_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_patient_group_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_patient_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_patient_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_patient_medical_information_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_patient_medical_information_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_patient_session_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_patient_session_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_patient_social_information_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_patient_social_information_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_period_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_period_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_possible_service_function_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_possible_service_function_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_possible_work_order_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_possible_work_order_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_possible_work_order_top_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_possible_work_order_top_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_predefined_broadcast_call_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_predefined_broadcast_call_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_process_boot_cycle_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_process_boot_cycle_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_process_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_process_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_radio_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_radio_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_remote_alarm_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_remote_alarm_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_rf_module_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_rf_module_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_role_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_role_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_room_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_room_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_section_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_section_identifier TO "aperi-be";


--
-- Name: TABLE service_function; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.service_function TO "aperi-be";


--
-- Name: SEQUENCE sequence_service_function_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_service_function_identifier TO "aperi-be";


--
-- Name: TABLE setting; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.setting TO "aperi-be";


--
-- Name: SEQUENCE sequence_setting_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_setting_identifier TO "aperi-be";


--
-- Name: TABLE shortcut; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.shortcut TO "aperi-be";


--
-- Name: SEQUENCE sequence_shortcut_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_shortcut_identifier TO "aperi-be";


--
-- Name: TABLE site; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.site TO "aperi-be";


--
-- Name: SEQUENCE sequence_site_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_site_identifier TO "aperi-be";


--
-- Name: TABLE spectralink_account; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.spectralink_account TO "aperi-be";


--
-- Name: SEQUENCE sequence_spectralink_account_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_spectralink_account_identifier TO "aperi-be";


--
-- Name: TABLE spectralink_group; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.spectralink_group TO "aperi-be";


--
-- Name: SEQUENCE sequence_spectralink_group_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_spectralink_group_identifier TO "aperi-be";


--
-- Name: SEQUENCE sequence_spectralink_message_external_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_spectralink_message_external_identifier TO "aperi-be";


--
-- Name: TABLE spectralink_message; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.spectralink_message TO "aperi-be";


--
-- Name: SEQUENCE sequence_spectralink_message_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_spectralink_message_identifier TO "aperi-be";


--
-- Name: TABLE spectralink_message_reference; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.spectralink_message_reference TO "aperi-be";


--
-- Name: SEQUENCE sequence_spectralink_message_reference_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_spectralink_message_reference_identifier TO "aperi-be";


--
-- Name: TABLE state_cause; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.state_cause TO "aperi-be";


--
-- Name: SEQUENCE sequence_state_cause_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_state_cause_identifier TO "aperi-be";


--
-- Name: TABLE state_cause_template; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.state_cause_template TO "aperi-be";


--
-- Name: SEQUENCE sequence_state_cause_template_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_state_cause_template_identifier TO "aperi-be";


--
-- Name: TABLE state_machine_state; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.state_machine_state TO "aperi-be";


--
-- Name: SEQUENCE sequence_state_machine_state_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_state_machine_state_identifier TO "aperi-be";


--
-- Name: TABLE status_app; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.status_app TO "aperi-be";


--
-- Name: SEQUENCE sequence_status_app_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_status_app_identifier TO "aperi-be";


--
-- Name: TABLE status_dect; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.status_dect TO "aperi-be";


--
-- Name: SEQUENCE sequence_status_dect_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_status_dect_identifier TO "aperi-be";


--
-- Name: TABLE string; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.string TO "aperi-be";


--
-- Name: SEQUENCE sequence_string_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_string_identifier TO "aperi-be";


--
-- Name: TABLE sui_patient_info; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.sui_patient_info TO "aperi-be";


--
-- Name: SEQUENCE sequence_sui_patient_info_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_sui_patient_info_identifier TO "aperi-be";


--
-- Name: TABLE sui_status; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.sui_status TO "aperi-be";


--
-- Name: SEQUENCE sequence_sui_status_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_sui_status_identifier TO "aperi-be";


--
-- Name: TABLE sui_status_trigger; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.sui_status_trigger TO "aperi-be";


--
-- Name: SEQUENCE sequence_sui_status_trigger_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_sui_status_trigger_identifier TO "aperi-be";


--
-- Name: TABLE supplement; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.supplement TO "aperi-be";


--
-- Name: SEQUENCE sequence_supplement_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_supplement_identifier TO "aperi-be";


--
-- Name: TABLE supplement_registration; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.supplement_registration TO "aperi-be";


--
-- Name: SEQUENCE sequence_supplement_registration_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_supplement_registration_identifier TO "aperi-be";


--
-- Name: TABLE task_type; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.task_type TO "aperi-be";


--
-- Name: SEQUENCE sequence_task_type_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_task_type_identifier TO "aperi-be";


--
-- Name: TABLE trusted_device; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.trusted_device TO "aperi-be";


--
-- Name: SEQUENCE sequence_trusted_device_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_trusted_device_identifier TO "aperi-be";


--
-- Name: TABLE ui_access; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.ui_access TO "aperi-be";


--
-- Name: SEQUENCE sequence_ui_access_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_ui_access_identifier TO "aperi-be";


--
-- Name: TABLE webrtc_account; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.webrtc_account TO "aperi-be";


--
-- Name: SEQUENCE sequence_webrtc_account_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_webrtc_account_identifier TO "aperi-be";


--
-- Name: TABLE wifi_network; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.wifi_network TO "aperi-be";


--
-- Name: SEQUENCE sequence_wifi_network_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_wifi_network_identifier TO "aperi-be";


--
-- Name: TABLE work_order; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.work_order TO "aperi-be";


--
-- Name: SEQUENCE sequence_work_order_identifier; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.sequence_work_order_identifier TO "aperi-be";


--
-- Name: TABLE shortcut_role; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.shortcut_role TO "aperi-be";


--
-- Name: SEQUENCE shortcut_role_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.shortcut_role_identifier_seq TO "aperi-be";


--
-- Name: TABLE spectralink_group_location; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.spectralink_group_location TO "aperi-be";


--
-- Name: TABLE spectralink_group_spectralink_account; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.spectralink_group_spectralink_account TO "aperi-be";


--
-- Name: TABLE spectralink_message_queue; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.spectralink_message_queue TO "aperi-be";


--
-- Name: SEQUENCE spectralink_message_queue_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.spectralink_message_queue_identifier_seq TO "aperi-be";


--
-- Name: TABLE state_cause_template_device; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.state_cause_template_device TO "aperi-be";


--
-- Name: TABLE state_machine_change_action_config; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.state_machine_change_action_config TO "aperi-be";


--
-- Name: SEQUENCE state_machine_change_action_config_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.state_machine_change_action_config_identifier_seq TO "aperi-be";


--
-- Name: TABLE status; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.status TO "aperi-be";


--
-- Name: TABLE task_types_roles; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.task_types_roles TO "aperi-be";


--
-- Name: TABLE translation; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.translation TO "aperi-be";


--
-- Name: SEQUENCE translation_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.translation_identifier_seq TO "aperi-be";


--
-- Name: TABLE trusted_device_patient; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.trusted_device_patient TO "aperi-be";


--
-- Name: TABLE trusted_device_sui_status; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.trusted_device_sui_status TO "aperi-be";


--
-- Name: TABLE version_history; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.version_history TO "aperi-be";


--
-- Name: SEQUENCE version_history_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.version_history_identifier_seq TO "aperi-be";


--
-- Name: TABLE yunction_log; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.yunction_log TO "aperi-be";


--
-- Name: SEQUENCE yunction_log_identifier_seq; Type: ACL; Schema: public; Owner: aperi
--

GRANT SELECT,USAGE ON SEQUENCE public.yunction_log_identifier_seq TO "aperi-be";


--
-- PostgreSQL database dump complete
--

